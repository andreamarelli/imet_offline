/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/assets/js/mapping.js":
/*!****************************************!*\
  !*** ./resources/assets/js/mapping.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Environment variables\nwindow.mapbox_access_token = \"pk.eyJ1IjoiYW5kcmVhbWFyZWxsaWRldiIsImEiOiJjamF2Y3VzNGU2cWoxMnFud3E3NzByaWs1In0.bnMeWpZrxYbq0xb_fuOy6Q\"; // Urls\n\nwindow.urls = window.urls || {};\nwindow.urls.ofac_mapserver = 'https://ies-ows.jrc.ec.europa.eu/ofac/' + 'ofacgeo.php?';\nwindow.urls.ofac_mapproxy = 'https://www.observatoire-comifac.net/mapproxy/service';\nwindow.urls.ofac_tiles = 'tiles/';\nwindow.urls.dopa_geoserver = 'https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms'; // Mapping\n\nwindow.WebMapping = {};\nwindow.WebMapping.Leaflet = __webpack_require__(/*! ./mapping_leaflet/utils.js */ \"./resources/assets/js/mapping_leaflet/utils.js\");\nwindow.WebMapping.Leaflet.Layers = __webpack_require__(/*! ./mapping_leaflet/layers.js */ \"./resources/assets/js/mapping_leaflet/layers.js\");\nwindow.WebMapping.Mapbox = __webpack_require__(/*! ./mapping_mapbox/utils.js */ \"./resources/assets/js/mapping_mapbox/utils.js\");\nwindow.WebMapping.Mapbox.Layers = __webpack_require__(/*! ./mapping_mapbox/layers.js */ \"./resources/assets/js/mapping_mapbox/layers.js\");\nwindow.WebMapping.Mapbox.LayersAtlas = __webpack_require__(/*! ./mapping_mapbox/layers.atlas.js */ \"./resources/assets/js/mapping_mapbox/layers.atlas.js\");\n\n__webpack_require__(/*! ./mapping_mapbox/platform.js */ \"./resources/assets/js/mapping_mapbox/platform.js\");\n\n__webpack_require__(/*! ./mapping_mapbox/demo.js */ \"./resources/assets/js/mapping_mapbox/demo.js\");\n\n__webpack_require__(/*! ./mapping_mapbox/demo_card.js */ \"./resources/assets/js/mapping_mapbox/demo_card.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmcuanM/NzcyNiJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJtYXBib3hfYWNjZXNzX3Rva2VuIiwicHJvY2VzcyIsInVybHMiLCJvZmFjX21hcHNlcnZlciIsIm9mYWNfbWFwcHJveHkiLCJvZmFjX3RpbGVzIiwiZG9wYV9nZW9zZXJ2ZXIiLCJXZWJNYXBwaW5nIiwiTGVhZmxldCIsInJlcXVpcmUiLCJMYXllcnMiLCJNYXBib3giLCJMYXllcnNBdGxhcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQUEsTUFBTSxDQUFDQyxtQkFBUCxHQUE2QkMsdUdBQTdCLEMsQ0FFQTs7QUFDQUYsTUFBTSxDQUFDRyxJQUFQLEdBQWNILE1BQU0sQ0FBQ0csSUFBUCxJQUFlLEVBQTdCO0FBQ0FILE1BQU0sQ0FBQ0csSUFBUCxDQUFZQyxjQUFaLEdBQTZCLDJDQUEyQyxjQUF4RTtBQUNBSixNQUFNLENBQUNHLElBQVAsQ0FBWUUsYUFBWixHQUE0Qix1REFBNUI7QUFDQUwsTUFBTSxDQUFDRyxJQUFQLENBQVlHLFVBQVosR0FBeUIsUUFBekI7QUFDQU4sTUFBTSxDQUFDRyxJQUFQLENBQVlJLGNBQVosR0FBNkIsbUVBQTdCLEMsQ0FFQTs7QUFDQVAsTUFBTSxDQUFDUSxVQUFQLEdBQW9CLEVBQXBCO0FBQ0FSLE1BQU0sQ0FBQ1EsVUFBUCxDQUFrQkMsT0FBbEIsR0FBNEJDLG1CQUFPLENBQUMsa0ZBQUQsQ0FBbkM7QUFDQVYsTUFBTSxDQUFDUSxVQUFQLENBQWtCQyxPQUFsQixDQUEwQkUsTUFBMUIsR0FBbUNELG1CQUFPLENBQUMsb0ZBQUQsQ0FBMUM7QUFDQVYsTUFBTSxDQUFDUSxVQUFQLENBQWtCSSxNQUFsQixHQUEyQkYsbUJBQU8sQ0FBQyxnRkFBRCxDQUFsQztBQUNBVixNQUFNLENBQUNRLFVBQVAsQ0FBa0JJLE1BQWxCLENBQXlCRCxNQUF6QixHQUFrQ0QsbUJBQU8sQ0FBQyxrRkFBRCxDQUF6QztBQUNBVixNQUFNLENBQUNRLFVBQVAsQ0FBa0JJLE1BQWxCLENBQXlCQyxXQUF6QixHQUF1Q0gsbUJBQU8sQ0FBQyw4RkFBRCxDQUE5Qzs7QUFDQUEsbUJBQU8sQ0FBQyxzRkFBRCxDQUFQOztBQUNBQSxtQkFBTyxDQUFDLDhFQUFELENBQVA7O0FBQ0FBLG1CQUFPLENBQUMsd0ZBQUQsQ0FBUCIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHMvanMvbWFwcGluZy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIEVudmlyb25tZW50IHZhcmlhYmxlc1xud2luZG93Lm1hcGJveF9hY2Nlc3NfdG9rZW4gPSBwcm9jZXNzLmVudi5NSVhfTUFQQk9YX0FDQ0VTU19UT0tFTjtcblxuLy8gVXJsc1xud2luZG93LnVybHMgPSB3aW5kb3cudXJscyB8fCB7fTtcbndpbmRvdy51cmxzLm9mYWNfbWFwc2VydmVyID0gJ2h0dHBzOi8vaWVzLW93cy5qcmMuZWMuZXVyb3BhLmV1L29mYWMvJyArICdvZmFjZ2VvLnBocD8nO1xud2luZG93LnVybHMub2ZhY19tYXBwcm94eSA9ICdodHRwczovL3d3dy5vYnNlcnZhdG9pcmUtY29taWZhYy5uZXQvbWFwcHJveHkvc2VydmljZSc7XG53aW5kb3cudXJscy5vZmFjX3RpbGVzID0gJ3RpbGVzLyc7XG53aW5kb3cudXJscy5kb3BhX2dlb3NlcnZlciA9ICdodHRwczovL2dlb3NwYXRpYWwuanJjLmVjLmV1cm9wYS5ldS9nZW9zZXJ2ZXIvZG9wYV9leHBsb3Jlcl8zL3dtcyc7XG5cbi8vIE1hcHBpbmdcbndpbmRvdy5XZWJNYXBwaW5nID0ge307XG53aW5kb3cuV2ViTWFwcGluZy5MZWFmbGV0ID0gcmVxdWlyZSgnLi9tYXBwaW5nX2xlYWZsZXQvdXRpbHMuanMnKTtcbndpbmRvdy5XZWJNYXBwaW5nLkxlYWZsZXQuTGF5ZXJzID0gcmVxdWlyZSgnLi9tYXBwaW5nX2xlYWZsZXQvbGF5ZXJzLmpzJyk7XG53aW5kb3cuV2ViTWFwcGluZy5NYXBib3ggPSByZXF1aXJlKCcuL21hcHBpbmdfbWFwYm94L3V0aWxzLmpzJyk7XG53aW5kb3cuV2ViTWFwcGluZy5NYXBib3guTGF5ZXJzID0gcmVxdWlyZSgnLi9tYXBwaW5nX21hcGJveC9sYXllcnMuanMnKTtcbndpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnNBdGxhcyA9IHJlcXVpcmUoJy4vbWFwcGluZ19tYXBib3gvbGF5ZXJzLmF0bGFzLmpzJyk7XG5yZXF1aXJlKCcuL21hcHBpbmdfbWFwYm94L3BsYXRmb3JtLmpzJyk7XG5yZXF1aXJlKCcuL21hcHBpbmdfbWFwYm94L2RlbW8uanMnKTtcbnJlcXVpcmUoJy4vbWFwcGluZ19tYXBib3gvZGVtb19jYXJkLmpzJyk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_leaflet/layers.js":
/*!*******************************************************!*\
  !*** ./resources/assets/js/mapping_leaflet/layers.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  // ##########  Base maps - backgrounds  ##########\n  mapbox_streets: window.WebMapping.Leaflet.mapbox_layer('streets', Locale.getLabel('mapping.layers.mapbox_streets')),\n  mapbox_light: window.WebMapping.Leaflet.mapbox_layer('light', Locale.getLabel('mapping.layers.mapbox_light')),\n  mapbox_satellite: window.WebMapping.Leaflet.mapbox_layer('satellite', Locale.getLabel('mapping.layers.mapbox_satellite')),\n  // ##########  Rasters  ##########\n  comifac: window.WebMapping.Leaflet.mapproxy_wms('comifac', Locale.getLabel('mapping.layers.comifac'), {\n    attribution: '<div style=\"width: 800px;\">' + '<b>Image source de base :</b> Verhegghen, A., Mayaux, P., de Wasseige, C., and Defourny, P.: ' + 'Mapping Congo Basin vegetation types from 300 m and 1 km multi-sensor time series for carbon stocks' + ' and forest areas estimation, Biogeosciences, 9, 5061-5079, doi:10.5194/bg-9-5061-2012, 2012. ' + '<a target=\"_blank\" href=\"http://www.biogeosciences.net/9/5061/2012/bg-9-5061-2012.html\">biogeosciences.net</a>' + '<br/><b>Données sources ajoutées :</b> SRTM de la Nasa, OSM et OFAC' + '<br/><b>Traitée :</b> Mai 2015, <a target=\"_blank\" href=\"/docs/atlas/mapsteps.pdf\">Etapes de réalisation</a></div>'\n  }),\n  spotvgt: window.WebMapping.Leaflet.mapproxy_wms('spotvgt', Locale.getLabel('mapping.layers.spotvgt')),\n  modis: window.WebMapping.Leaflet.mapproxy_wms('modis', Locale.getLabel('mapping.layers.modis')),\n  srtm: window.WebMapping.Leaflet.mapproxy_wms('srtm', Locale.getLabel('mapping.layers.srtm')),\n  glc2000: window.WebMapping.Leaflet.mapproxy_wms('glc2000', Locale.getLabel('mapping.layers.glc2000')),\n  congo_basin_vegetation_map: window.WebMapping.Leaflet.mapproxy_wms('congo_basin_vegetation_map', Locale.getLabel('mapping.layers.congo_basin_vegetation_map')),\n  total_carbon: window.WebMapping.Leaflet.mapproxy_wms('total_carbon', Locale.getLabel('mapping.layers.total_carbon')),\n  // ##########  External Resources  ##########\n  tree_cover: window.Leaflet.tileLayer.wms(\"http://50.18.182.188:6080/arcgis/services/TreeCover2000/ImageServer/WMSServer?\", {\n    layers: '0',\n    format: 'image/png',\n    transparent: true,\n    attribution: 'Hansen/UMD/Google/USGS/NASA, Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>',\n    label: 'Tree Cover (2000-2010)',\n    \"abstract\": encodeURI('Hansen, M. C., P. V. Potapov, R. Moore, M. Hancher, S. A. Turubanova, A. Tyukavina, D. Thau, S. V. Stehman, S. J. Goetz, ' + 'T. R. Loveland, A. Kommareddy, A. Egorov, L. Chini, C. O. Justice, and J. R. G. Townshend. 2013. <b>“High-Resolution Global Maps of 21st-Century Forest Cover Change.”</b> ' + 'Science 342 (15 November): 850–53. Data available on-line from: <a href=\"https://glad.umd.edu/dataset/global-2010-tree-cover-30-m\" target=\"_blank\">https://glad.umd.edu/dataset/global-2010-tree-cover-30-m</a>. ' + 'Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  }),\n  intact_forest: window.Leaflet.tileLayer('https://storage.googleapis.com/earthenginepartners-hansen/tiles/intact_forest_2016/{z}/{x}/{y}.png?', {\n    attribution: '<a href=\"http://www.intactforests.org\" target=\"_blank\">Intact Forest Landscape (IFL)</a>',\n    label: 'Intact Forest Landscapes (IFL 2000-2016)',\n    \"abstract\": encodeURI('Greenpeace, University of Maryland, World Resources Institute and Transparent World. “Intact Forest Landscapes. 2000/2013/2016” ' + 'Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  }),\n  // ##########  Overlays  ##########\n  borders: window.WebMapping.Leaflet.mapserver_wms('borders', null, {}),\n  landscapes: window.WebMapping.Leaflet.mapproxy_wms('landscapes', Locale.getLabel('entities.landscape', 2)),\n  klc: window.WebMapping.Leaflet.mapproxy_wms('klc', Locale.getLabel('entities.klc', 2)),\n  concessions: window.WebMapping.Leaflet.mapserver_wms('concessions', Locale.getLabel('form/concession.concession', 2)),\n  protected_areas: window.WebMapping.Leaflet.mapproxy_wms('protected_areas', Locale.getLabel('form/protected_area.protected_area', 2))\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_leaflet/layers.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_leaflet/utils.js":
/*!******************************************************!*\
  !*** ./resources/assets/js/mapping_leaflet/utils.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = {\n  tileSize: 1024,\n\n  /**\n   * Get MapProxy wms layer\n   * @param layer_name\n   * @param label\n   * @param custom_attributes\n   * @returns {*}\n   */\n  mapproxy_wms: function mapproxy_wms(layer_name) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var custom_attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var self = this;\n    var options = {\n      layers: layer_name,\n      format: 'image/png',\n      transparent: true,\n      tileSize: self.tileSize,\n      label: label\n    };\n\n    if (!_.isEmpty(custom_attributes)) {\n      for (var _i = 0, _Object$entries = Object.entries(custom_attributes); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        options[key] = value;\n      }\n    }\n\n    return window.Leaflet.tileLayer.wms(window.urls.ofac_mapproxy, options);\n  },\n  vector_tiles: function vector_tiles(layer_name) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var custom_attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var bounds = window.Leaflet.latLngBounds(window.Leaflet.latLng(-11.125875, 5.566434), window.Leaflet.latLng(17.936017, 30.837150));\n    return window.Leaflet.vectorGrid.protobuf('https://h03-stg-ofac.jrc.it/tiles/' + layer_name + '/{z}/{x}/{y}.pbf', {\n      vectorTileLayerStyles: {\n        protected_area: {\n          color: '#ff6666',\n          opacity: 0.6,\n          weight: 2,\n          fillColor: '#ffaaaa',\n          fillOpacity: 0.6,\n          fill: true\n        }\n      },\n      bounds: bounds,\n      key: 'protected_area',\n      id: 'protected_area',\n      label: label\n    });\n  },\n\n  /**\n   * Get OFAC wms layer\n   * @param layer_name\n   * @param label\n   * @param custom_attributes\n   * @returns {*}\n   */\n  mapserver_wms: function mapserver_wms(layer_name) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var custom_attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var self = this;\n    var options = {\n      layers: layer_name,\n      format: 'image/png',\n      transparent: true,\n      tileSize: self.tileSize,\n      label: label\n    };\n\n    if (!_.isEmpty(custom_attributes)) {\n      for (var _i2 = 0, _Object$entries2 = Object.entries(custom_attributes); _i2 < _Object$entries2.length; _i2++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n            key = _Object$entries2$_i[0],\n            value = _Object$entries2$_i[1];\n\n        options[key] = value;\n      }\n    }\n\n    return window.Leaflet.tileLayer.wms(window.urls.ofac_mapserver, options);\n  },\n\n  /**\n   * Get Mapbox layer\n   * @param style\n   * @param label\n   */\n  mapbox_layer: function mapbox_layer(style) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    style = style === 'streets' ? 'streets-v11' : style;\n    style = style === 'light' ? 'light-v10' : style;\n    style = style === 'satellite' ? 'satellite-v9' : style;\n    var self = this;\n    return window.Leaflet.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=' + window.mapbox_access_token, {\n      tileSize: 512,\n      maxZoom: 18,\n      zoomOffset: -1,\n      id: 'mapbox/' + style,\n      attribution: 'Map data &copy; <a target=\"_blank\" href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, ' + '<a target=\"_blank\" href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' + 'Imagery © <a target=\"_blank\" href=\"http://mapbox.com\">Mapbox</a>',\n      label: label\n    });\n  },\n\n  /**\n   * Projects platform: get marker-cluster\n   * @param points\n   */\n  project_markerCluster: function project_markerCluster(points, label) {\n    var marker_cluster = window.Leaflet.markerClusterGroup({\n      iconCreateFunction: function iconCreateFunction(cluster) {\n        return new window.Leaflet.DivIcon({\n          html: '<div><span class=\"marker-count\">' + cluster.getChildCount() + '</span></div>',\n          className: 'marker-cluster',\n          iconSize: new window.Leaflet.Point(40, 40)\n        });\n      },\n      showCoverageOnHover: false,\n      zoomToBoundsOnClick: false,\n      label: label\n    });\n    points.forEach(function (project) {\n      var _project = _slicedToArray(project, 5),\n          lat = _project[0],\n          lon = _project[1],\n          popupInfo = _project[2],\n          title = _project[3],\n          status = _project[4];\n\n      var icon = 'asterisk';\n      var color = 'lightgray';\n\n      if (status === 'finished') {\n        color = 'red';\n      } else if (status === 'ongoing') {\n        color = 'green';\n      } else if (status === 'planned') {\n        color = 'orange';\n      }\n\n      var marker = window.Leaflet.marker(new window.Leaflet.LatLng(lat, lon), {\n        title: title,\n        icon: window.Leaflet.AwesomeMarkers.icon({\n          markerColor: color,\n          prefix: 'fa',\n          icon: icon,\n          iconColor: 'white'\n        })\n      });\n      marker.bindPopup(popupInfo);\n      marker_cluster.addLayer(marker);\n    });\n    return marker_cluster;\n  },\n  getLayersForLeaftletControl: function getLayersForLeaftletControl(layers) {\n    var result = {};\n    layers.forEach(function (layer) {\n      result[layer.options.label] = layer;\n    });\n    return result;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbGVhZmxldC91dGlscy5qcz84YjM3Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0aWxlU2l6ZSIsIm1hcHByb3h5X3dtcyIsImxheWVyX25hbWUiLCJsYWJlbCIsImN1c3RvbV9hdHRyaWJ1dGVzIiwic2VsZiIsIm9wdGlvbnMiLCJsYXllcnMiLCJmb3JtYXQiLCJ0cmFuc3BhcmVudCIsIl8iLCJpc0VtcHR5IiwiT2JqZWN0IiwiZW50cmllcyIsImtleSIsInZhbHVlIiwid2luZG93IiwiTGVhZmxldCIsInRpbGVMYXllciIsIndtcyIsInVybHMiLCJvZmFjX21hcHByb3h5IiwidmVjdG9yX3RpbGVzIiwiYm91bmRzIiwibGF0TG5nQm91bmRzIiwibGF0TG5nIiwidmVjdG9yR3JpZCIsInByb3RvYnVmIiwidmVjdG9yVGlsZUxheWVyU3R5bGVzIiwicHJvdGVjdGVkX2FyZWEiLCJjb2xvciIsIm9wYWNpdHkiLCJ3ZWlnaHQiLCJmaWxsQ29sb3IiLCJmaWxsT3BhY2l0eSIsImZpbGwiLCJpZCIsIm1hcHNlcnZlcl93bXMiLCJvZmFjX21hcHNlcnZlciIsIm1hcGJveF9sYXllciIsInN0eWxlIiwibWFwYm94X2FjY2Vzc190b2tlbiIsIm1heFpvb20iLCJ6b29tT2Zmc2V0IiwiYXR0cmlidXRpb24iLCJwcm9qZWN0X21hcmtlckNsdXN0ZXIiLCJwb2ludHMiLCJtYXJrZXJfY2x1c3RlciIsIm1hcmtlckNsdXN0ZXJHcm91cCIsImljb25DcmVhdGVGdW5jdGlvbiIsImNsdXN0ZXIiLCJEaXZJY29uIiwiaHRtbCIsImdldENoaWxkQ291bnQiLCJjbGFzc05hbWUiLCJpY29uU2l6ZSIsIlBvaW50Iiwic2hvd0NvdmVyYWdlT25Ib3ZlciIsInpvb21Ub0JvdW5kc09uQ2xpY2siLCJmb3JFYWNoIiwicHJvamVjdCIsImxhdCIsImxvbiIsInBvcHVwSW5mbyIsInRpdGxlIiwic3RhdHVzIiwiaWNvbiIsIm1hcmtlciIsIkxhdExuZyIsIkF3ZXNvbWVNYXJrZXJzIiwibWFya2VyQ29sb3IiLCJwcmVmaXgiLCJpY29uQ29sb3IiLCJiaW5kUG9wdXAiLCJhZGRMYXllciIsImdldExheWVyc0ZvckxlYWZ0bGV0Q29udHJvbCIsInJlc3VsdCIsImxheWVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBRWJDLFVBQVEsRUFBRSxJQUZHOztBQUliO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lDLGNBQVksRUFBRSxzQkFBU0MsVUFBVCxFQUEwRDtBQUFBLFFBQXJDQyxLQUFxQyx1RUFBN0IsSUFBNkI7QUFBQSxRQUF2QkMsaUJBQXVCLHVFQUFILEVBQUc7QUFDcEUsUUFBSUMsSUFBSSxHQUFHLElBQVg7QUFDQSxRQUFJQyxPQUFPLEdBQUc7QUFDVkMsWUFBTSxFQUFFTCxVQURFO0FBRVZNLFlBQU0sRUFBRSxXQUZFO0FBR1ZDLGlCQUFXLEVBQUUsSUFISDtBQUlWVCxjQUFRLEVBQUVLLElBQUksQ0FBQ0wsUUFKTDtBQUtWRyxXQUFLLEVBQUVBO0FBTEcsS0FBZDs7QUFPQSxRQUFHLENBQUNPLENBQUMsQ0FBQ0MsT0FBRixDQUFVUCxpQkFBVixDQUFKLEVBQWlDO0FBQzdCLHlDQUF5QlEsTUFBTSxDQUFDQyxPQUFQLENBQWVULGlCQUFmLENBQXpCLHFDQUE0RDtBQUFBO0FBQUEsWUFBbERVLEdBQWtEO0FBQUEsWUFBN0NDLEtBQTZDOztBQUN4RFQsZUFBTyxDQUFDUSxHQUFELENBQVAsR0FBZUMsS0FBZjtBQUNIO0FBQ0o7O0FBQ0QsV0FBT0MsTUFBTSxDQUFDQyxPQUFQLENBQWVDLFNBQWYsQ0FBeUJDLEdBQXpCLENBQTZCSCxNQUFNLENBQUNJLElBQVAsQ0FBWUMsYUFBekMsRUFBd0RmLE9BQXhELENBQVA7QUFDSCxHQTFCWTtBQTRCYmdCLGNBQVksRUFBRSxzQkFBU3BCLFVBQVQsRUFBMkQ7QUFBQSxRQUF0Q0MsS0FB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O0FBQ0g7O0FBRUQsVUFBSXFDLE1BQU0sR0FBR25ELE1BQU0sQ0FBQ0MsT0FBUCxDQUFla0QsTUFBZixDQUFzQixJQUFJbkQsTUFBTSxDQUFDQyxPQUFQLENBQWVtRCxNQUFuQixDQUEwQlAsR0FBMUIsRUFBK0JDLEdBQS9CLENBQXRCLEVBQTJEO0FBQ3BFRSxhQUFLLEVBQUVBLEtBRDZEO0FBRXBFRSxZQUFJLEVBQUVsRCxNQUFNLENBQUNDLE9BQVAsQ0FBZW9ELGNBQWYsQ0FBOEJILElBQTlCLENBQW1DO0FBQ3JDSSxxQkFBVyxFQUFFeEMsS0FEd0I7QUFFckN5QyxnQkFBTSxFQUFFLElBRjZCO0FBR3JDTCxjQUFJLEVBQUVBLElBSCtCO0FBSXJDTSxtQkFBUyxFQUFFO0FBSjBCLFNBQW5DO0FBRjhELE9BQTNELENBQWI7QUFVQUwsWUFBTSxDQUFDTSxTQUFQLENBQWlCVixTQUFqQjtBQUNBaEIsb0JBQWMsQ0FBQzJCLFFBQWYsQ0FBd0JQLE1BQXhCO0FBRUgsS0F6QkQ7QUEyQkEsV0FBT3BCLGNBQVA7QUFDSCxHQWpKWTtBQW1KYjRCLDZCQW5KYSx1Q0FtSmVwRSxNQW5KZixFQW1Kc0I7QUFDL0IsUUFBSXFFLE1BQU0sR0FBRyxFQUFiO0FBQ0FyRSxVQUFNLENBQUNvRCxPQUFQLENBQWUsVUFBU2tCLEtBQVQsRUFBZ0I7QUFDM0JELFlBQU0sQ0FBQ0MsS0FBSyxDQUFDdkUsT0FBTixDQUFjSCxLQUFmLENBQU4sR0FBOEIwRSxLQUE5QjtBQUNILEtBRkQ7QUFHQSxXQUFPRCxNQUFQO0FBQ0g7QUF6SlksQ0FBakIiLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbGVhZmxldC91dGlscy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgdGlsZVNpemU6IDEwMjQsXG5cbiAgICAvKipcbiAgICAgKiBHZXQgTWFwUHJveHkgd21zIGxheWVyXG4gICAgICogQHBhcmFtIGxheWVyX25hbWVcbiAgICAgKiBAcGFyYW0gbGFiZWxcbiAgICAgKiBAcGFyYW0gY3VzdG9tX2F0dHJpYnV0ZXNcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBtYXBwcm94eV93bXM6IGZ1bmN0aW9uKGxheWVyX25hbWUsIGxhYmVsID0gbnVsbCwgY3VzdG9tX2F0dHJpYnV0ZXMgPSB7fSl7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBsYXllcnM6IGxheWVyX25hbWUsXG4gICAgICAgICAgICBmb3JtYXQ6ICdpbWFnZS9wbmcnLFxuICAgICAgICAgICAgdHJhbnNwYXJlbnQ6IHRydWUsXG4gICAgICAgICAgICB0aWxlU2l6ZTogc2VsZi50aWxlU2l6ZSxcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbFxuICAgICAgICB9O1xuICAgICAgICBpZighXy5pc0VtcHR5KGN1c3RvbV9hdHRyaWJ1dGVzKSl7XG4gICAgICAgICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY3VzdG9tX2F0dHJpYnV0ZXMpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdpbmRvdy5MZWFmbGV0LnRpbGVMYXllci53bXMod2luZG93LnVybHMub2ZhY19tYXBwcm94eSwgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIHZlY3Rvcl90aWxlczogZnVuY3Rpb24obGF5ZXJfbmFtZSwgbGFiZWwgPSBudWxsLCBjdXN0b21fYXR0cmlidXRlcyA9IHt9KSB7XG5cbiAgICAgICAgbGV0IGJvdW5kcyA9IHdpbmRvdy5MZWFmbGV0LmxhdExuZ0JvdW5kcyhcbiAgICAgICAgICAgIHdpbmRvdy5MZWFmbGV0LmxhdExuZygtMTEuMTI1ODc1LCA1LjU2NjQzNCksXG4gICAgICAgICAgICB3aW5kb3cuTGVhZmxldC5sYXRMbmcoMTcuOTM2MDE3LCAzMC44MzcxNTApXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIHdpbmRvdy5MZWFmbGV0LnZlY3RvckdyaWQucHJvdG9idWYoJ2h0dHBzOi8vaDAzLXN0Zy1vZmFjLmpyYy5pdC90aWxlcy8nK2xheWVyX25hbWUrJy97en0ve3h9L3t5fS5wYmYnLCB7XG4gICAgICAgICAgICB2ZWN0b3JUaWxlTGF5ZXJTdHlsZXM6IHtcbiAgICAgICAgICAgICAgICBwcm90ZWN0ZWRfYXJlYToge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyNmZjY2NjYnLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjYsXG4gICAgICAgICAgICAgICAgICAgIHdlaWdodDogMixcbiAgICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmYWFhYScsXG4gICAgICAgICAgICAgICAgICAgIGZpbGxPcGFjaXR5OiAwLjYsXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYm91bmRzOiBib3VuZHMsXG4gICAgICAgICAgICBrZXk6ICdwcm90ZWN0ZWRfYXJlYScsXG4gICAgICAgICAgICBpZDogJ3Byb3RlY3RlZF9hcmVhJyxcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbFxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IE9GQUMgd21zIGxheWVyXG4gICAgICogQHBhcmFtIGxheWVyX25hbWVcbiAgICAgKiBAcGFyYW0gbGFiZWxcbiAgICAgKiBAcGFyYW0gY3VzdG9tX2F0dHJpYnV0ZXNcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBtYXBzZXJ2ZXJfd21zOiBmdW5jdGlvbihsYXllcl9uYW1lLCBsYWJlbCA9IG51bGwsIGN1c3RvbV9hdHRyaWJ1dGVzID0ge30pe1xuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgICAgICAgbGF5ZXJzOiBsYXllcl9uYW1lLFxuICAgICAgICAgICAgZm9ybWF0OiAnaW1hZ2UvcG5nJyxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgICAgICAgICAgdGlsZVNpemU6IHNlbGYudGlsZVNpemUsXG4gICAgICAgICAgICBsYWJlbDogbGFiZWxcbiAgICAgICAgfTtcbiAgICAgICAgaWYoIV8uaXNFbXB0eShjdXN0b21fYXR0cmlidXRlcykpe1xuICAgICAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGN1c3RvbV9hdHRyaWJ1dGVzKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3aW5kb3cuTGVhZmxldC50aWxlTGF5ZXIud21zKHdpbmRvdy51cmxzLm9mYWNfbWFwc2VydmVyLCBvcHRpb25zKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogR2V0IE1hcGJveCBsYXllclxuICAgICAqIEBwYXJhbSBzdHlsZVxuICAgICAqIEBwYXJhbSBsYWJlbFxuICAgICAqL1xuICAgIG1hcGJveF9sYXllcjogZnVuY3Rpb24oc3R5bGUsIGxhYmVsID0gbnVsbCl7XG5cbiAgICAgICAgc3R5bGUgPSBzdHlsZT09PSdzdHJlZXRzJyA/ICdzdHJlZXRzLXYxMScgOiBzdHlsZTtcbiAgICAgICAgc3R5bGUgPSBzdHlsZT09PSdsaWdodCcgPyAnbGlnaHQtdjEwJyA6IHN0eWxlO1xuICAgICAgICBzdHlsZSA9IHN0eWxlPT09J3NhdGVsbGl0ZScgPyAnc2F0ZWxsaXRlLXY5JyA6IHN0eWxlO1xuXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5MZWFmbGV0LnRpbGVMYXllcignaHR0cHM6Ly9hcGkubWFwYm94LmNvbS9zdHlsZXMvdjEve2lkfS90aWxlcy97en0ve3h9L3t5fT9hY2Nlc3NfdG9rZW49Jyt3aW5kb3cubWFwYm94X2FjY2Vzc190b2tlbiwge1xuICAgICAgICAgICAgdGlsZVNpemU6IDUxMixcbiAgICAgICAgICAgIG1heFpvb206IDE4LFxuICAgICAgICAgICAgem9vbU9mZnNldDogLTEsXG4gICAgICAgICAgICBpZDogJ21hcGJveC8nK3N0eWxlLFxuICAgICAgICAgICAgYXR0cmlidXRpb246ICdNYXAgZGF0YSAmY29weTsgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHA6Ly9vcGVuc3RyZWV0bWFwLm9yZ1wiPk9wZW5TdHJlZXRNYXA8L2E+IGNvbnRyaWJ1dG9ycywgJyArXG4gICAgICAgICAgICAgICAgJzxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS1zYS8yLjAvXCI+Q0MtQlktU0E8L2E+LCAnICtcbiAgICAgICAgICAgICAgICAnSW1hZ2VyeSDCqSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL21hcGJveC5jb21cIj5NYXBib3g8L2E+JyxcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbFxuICAgICAgICB9KTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvamVjdHMgcGxhdGZvcm06IGdldCBtYXJrZXItY2x1c3RlclxuICAgICAqIEBwYXJhbSBwb2ludHNcbiAgICAgKi9cbiAgICBwcm9qZWN0X21hcmtlckNsdXN0ZXI6IGZ1bmN0aW9uKHBvaW50cywgbGFiZWwpe1xuICAgICAgICBsZXQgbWFya2VyX2NsdXN0ZXIgPSB3aW5kb3cuTGVhZmxldC5tYXJrZXJDbHVzdGVyR3JvdXAoe1xuICAgICAgICAgICAgaWNvbkNyZWF0ZUZ1bmN0aW9uOiBmdW5jdGlvbiAoY2x1c3Rlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgd2luZG93LkxlYWZsZXQuRGl2SWNvbih7XG4gICAgICAgICAgICAgICAgICAgIGh0bWw6ICc8ZGl2PjxzcGFuIGNsYXNzPVwibWFya2VyLWNvdW50XCI+JyArIGNsdXN0ZXIuZ2V0Q2hpbGRDb3VudCgpICsgJzwvc3Bhbj48L2Rpdj4nLCBjbGFzc05hbWU6ICdtYXJrZXItY2x1c3RlcicsIGljb25TaXplOiBuZXcgd2luZG93LkxlYWZsZXQuUG9pbnQoNDAsIDQwKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNob3dDb3ZlcmFnZU9uSG92ZXI6IGZhbHNlLFxuICAgICAgICAgICAgem9vbVRvQm91bmRzT25DbGljazogZmFsc2UsXG4gICAgICAgICAgICBsYWJlbDogbGFiZWxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcG9pbnRzLmZvckVhY2goZnVuY3Rpb24ocHJvamVjdCkge1xuICAgICAgICAgICAgbGV0IFtsYXQsIGxvbiwgcG9wdXBJbmZvLCB0aXRsZSwgc3RhdHVzXSA9IHByb2plY3Q7XG4gICAgICAgICAgICBsZXQgaWNvbiA9ICdhc3Rlcmlzayc7XG4gICAgICAgICAgICBsZXQgY29sb3IgPSAnbGlnaHRncmF5JztcbiAgICAgICAgICAgIGlmKHN0YXR1cz09PSdmaW5pc2hlZCcpe1xuICAgICAgICAgICAgICAgIGNvbG9yID0gJ3JlZCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYoc3RhdHVzPT09J29uZ29pbmcnKXtcbiAgICAgICAgICAgICAgICBjb2xvciA9ICdncmVlbic7XG4gICAgICAgICAgICB9IGVsc2UgaWYoc3RhdHVzPT09J3BsYW5uZWQnKXtcbiAgICAgICAgICAgICAgICBjb2xvciA9ICdvcmFuZ2UnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgbWFya2VyID0gd2luZG93LkxlYWZsZXQubWFya2VyKG5ldyB3aW5kb3cuTGVhZmxldC5MYXRMbmcobGF0LCBsb24pLCB7XG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgICAgICAgIGljb246IHdpbmRvdy5MZWFmbGV0LkF3ZXNvbWVNYXJrZXJzLmljb24oe1xuICAgICAgICAgICAgICAgICAgICBtYXJrZXJDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHByZWZpeDogJ2ZhJyxcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbixcbiAgICAgICAgICAgICAgICAgICAgaWNvbkNvbG9yOiAnd2hpdGUnXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBtYXJrZXIuYmluZFBvcHVwKHBvcHVwSW5mbyk7XG4gICAgICAgICAgICBtYXJrZXJfY2x1c3Rlci5hZGRMYXllcihtYXJrZXIpO1xuXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXJfY2x1c3RlcjtcbiAgICB9LFxuXG4gICAgZ2V0TGF5ZXJzRm9yTGVhZnRsZXRDb250cm9sKGxheWVycyl7XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICAgICAgbGF5ZXJzLmZvckVhY2goZnVuY3Rpb24obGF5ZXIpIHtcbiAgICAgICAgICAgIHJlc3VsdFtsYXllci5vcHRpb25zLmxhYmVsXSA9IGxheWVyO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LFxuXG59OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_leaflet/utils.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/demo.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/demo.js ***!
  \****************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _mixins_map_mixin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mixins/map.mixin */ \"./resources/assets/js/mapping_mapbox/mixins/map.mixin.js\");\n/* harmony import */ var _mixins_layers_interactivity_mixin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mixins/layers/interactivity.mixin */ \"./resources/assets/js/mapping_mapbox/mixins/layers/interactivity.mixin.js\");\n/* harmony import */ var _mixins_visible_components__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mixins/visible_components */ \"./resources/assets/js/mapping_mapbox/mixins/visible_components.js\");\n/* harmony import */ var _store_modules_visible_components__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./store_modules/visible_components */ \"./resources/assets/js/mapping_mapbox/store_modules/visible_components.js\");\n\n\n\n\nwindow.AnalyticalPlatformMapDemo = Vue.extend({\n  mixins: [_mixins_map_mixin__WEBPACK_IMPORTED_MODULE_0__[\"default\"], _mixins_layers_interactivity_mixin__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _mixins_visible_components__WEBPACK_IMPORTED_MODULE_2__[\"default\"]],\n  store: new window.Vuex.Store({\n    modules: {\n      visible_components: _store_modules_visible_components__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n    }\n  }),\n  data: function data() {\n    return {\n      Locale: window.Locale,\n      csrf: window.Laravel.csrfToken,\n      layers: {\n        demo: {// landscapes_water_transitions: window.WebMapping.Mapbox.Layers.landscapes_water_transitions\n        },\n        overlays: {\n          comifac_mask: window.WebMapping.Mapbox.Layers.comifac_mask,\n          comifac_eez: window.WebMapping.Mapbox.Layers.comifac_eez,\n          countries: window.WebMapping.Mapbox.Layers.countries,\n          landscapes: window.WebMapping.Mapbox.Layers.landscapes,\n          klc: window.WebMapping.Mapbox.Layers.klc,\n          concessions: window.WebMapping.Mapbox.Layers.concessions,\n          protected_areas: window.WebMapping.Mapbox.Layers.protected_areas\n        }\n      },\n      map_loading: false,\n      close_layer_selector_onclick: false\n    };\n  },\n  mounted: function mounted() {\n    this.initMap();\n    this.map_loading = false;\n  },\n  methods: {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L2RlbW8uanM/NTVkNyJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJBbmFseXRpY2FsUGxhdGZvcm1NYXBEZW1vIiwiVnVlIiwiZXh0ZW5kIiwibWl4aW5zIiwibWFwIiwibGF5ZXJzX2ludGVyYWN0aXZpdHkiLCJ2aXNpYmxlX2NvbXBvbmVudHMiLCJzdG9yZSIsIlZ1ZXgiLCJTdG9yZSIsIm1vZHVsZXMiLCJ2aXNpYmxlX2NvbXBvbmVudHNfc3RvcmUiLCJkYXRhIiwiTG9jYWxlIiwiY3NyZiIsIkxhcmF2ZWwiLCJjc3JmVG9rZW4iLCJsYXllcnMiLCJkZW1vIiwib3ZlcmxheXMiLCJjb21pZmFjX21hc2siLCJXZWJNYXBwaW5nIiwiTWFwYm94IiwiTGF5ZXJzIiwiY29taWZhY19lZXoiLCJjb3VudHJpZXMiLCJsYW5kc2NhcGVzIiwia2xjIiwiY29uY2Vzc2lvbnMiLCJwcm90ZWN0ZWRfYXJlYXMiLCJtYXBfbG9hZGluZyIsImNsb3NlX2xheWVyX3NlbGVjdG9yX29uY2xpY2siLCJtb3VudGVkIiwiaW5pdE1hcCIsIm1ldGhvZHMiXSwibWFwcGluZ3MiOiJBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUdBQSxNQUFNLENBQUNDLHlCQUFQLEdBQW1DQyxHQUFHLENBQUNDLE1BQUosQ0FBVztBQUUxQ0MsUUFBTSxFQUFFLENBQ0pDLHlEQURJLEVBRUpDLDBFQUZJLEVBR0pDLGtFQUhJLENBRmtDO0FBUTFDQyxPQUFLLEVBQUUsSUFBSVIsTUFBTSxDQUFDUyxJQUFQLENBQVlDLEtBQWhCLENBQXNCO0FBQ3pCQyxXQUFPLEVBQUU7QUFDTEosd0JBQWtCLEVBQUVLLHlFQUF3QkE7QUFEdkM7QUFEZ0IsR0FBdEIsQ0FSbUM7QUFjMUNDLE1BQUksRUFBRSxnQkFBWTtBQUNkLFdBQU87QUFFSEMsWUFBTSxFQUFFZCxNQUFNLENBQUNjLE1BRlo7QUFHSEMsVUFBSSxFQUFFZixNQUFNLENBQUNnQixPQUFQLENBQWVDLFNBSGxCO0FBS0hDLFlBQU0sRUFBRTtBQUNKQyxZQUFJLEVBQUUsQ0FDRjtBQURFLFNBREY7QUFJSkMsZ0JBQVEsRUFBRTtBQUNOQyxzQkFBWSxFQUFFckIsTUFBTSxDQUFDc0IsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLE1BQXpCLENBQWdDSCxZQUR4QztBQUVOSSxxQkFBVyxFQUFFekIsTUFBTSxDQUFDc0IsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLE1BQXpCLENBQWdDQyxXQUZ2QztBQUdOQyxtQkFBUyxFQUFFMUIsTUFBTSxDQUFDc0IsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLE1BQXpCLENBQWdDRSxTQUhyQztBQUlOQyxvQkFBVSxFQUFFM0IsTUFBTSxDQUFDc0IsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLE1BQXpCLENBQWdDRyxVQUp0QztBQUtOQyxhQUFHLEVBQUU1QixNQUFNLENBQUNzQixVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsTUFBekIsQ0FBZ0NJLEdBTC9CO0FBTU5DLHFCQUFXLEVBQUU3QixNQUFNLENBQUNzQixVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsTUFBekIsQ0FBZ0NLLFdBTnZDO0FBT05DLHlCQUFlLEVBQUU5QixNQUFNLENBQUNzQixVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsTUFBekIsQ0FBZ0NNO0FBUDNDO0FBSk4sT0FMTDtBQW9CSEMsaUJBQVcsRUFBRSxLQXBCVjtBQXNCSEMsa0NBQTRCLEVBQUU7QUF0QjNCLEtBQVA7QUF3QkgsR0F2Q3lDO0FBeUMxQ0MsU0F6QzBDLHFCQXlDakM7QUFDTCxTQUFLQyxPQUFMO0FBQ0EsU0FBS0gsV0FBTCxHQUFtQixLQUFuQjtBQUNILEdBNUN5QztBQThDMUNJLFNBQU8sRUFBRTtBQTlDaUMsQ0FBWCxDQUFuQyIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHMvanMvbWFwcGluZ19tYXBib3gvZGVtby5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IG1hcCBmcm9tICcuL21peGlucy9tYXAubWl4aW4nO1xuaW1wb3J0IGxheWVyc19pbnRlcmFjdGl2aXR5IGZyb20gXCIuL21peGlucy9sYXllcnMvaW50ZXJhY3Rpdml0eS5taXhpblwiO1xuaW1wb3J0IHZpc2libGVfY29tcG9uZW50cyBmcm9tIFwiLi9taXhpbnMvdmlzaWJsZV9jb21wb25lbnRzXCI7XG5pbXBvcnQgdmlzaWJsZV9jb21wb25lbnRzX3N0b3JlIGZyb20gXCIuL3N0b3JlX21vZHVsZXMvdmlzaWJsZV9jb21wb25lbnRzXCI7XG5cblxud2luZG93LkFuYWx5dGljYWxQbGF0Zm9ybU1hcERlbW8gPSBWdWUuZXh0ZW5kKHtcblxuICAgIG1peGluczogW1xuICAgICAgICBtYXAsXG4gICAgICAgIGxheWVyc19pbnRlcmFjdGl2aXR5LFxuICAgICAgICB2aXNpYmxlX2NvbXBvbmVudHNcbiAgICBdLFxuXG4gICAgc3RvcmU6IG5ldyB3aW5kb3cuVnVleC5TdG9yZSh7XG4gICAgICAgIG1vZHVsZXM6IHtcbiAgICAgICAgICAgIHZpc2libGVfY29tcG9uZW50czogdmlzaWJsZV9jb21wb25lbnRzX3N0b3JlXG4gICAgICAgIH1cbiAgICB9KSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcblxuICAgICAgICAgICAgTG9jYWxlOiB3aW5kb3cuTG9jYWxlLFxuICAgICAgICAgICAgY3NyZjogd2luZG93LkxhcmF2ZWwuY3NyZlRva2VuLFxuXG4gICAgICAgICAgICBsYXllcnM6IHtcbiAgICAgICAgICAgICAgICBkZW1vOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGxhbmRzY2FwZXNfd2F0ZXJfdHJhbnNpdGlvbnM6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMubGFuZHNjYXBlc193YXRlcl90cmFuc2l0aW9uc1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3ZlcmxheXM6IHtcbiAgICAgICAgICAgICAgICAgICAgY29taWZhY19tYXNrOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3guTGF5ZXJzLmNvbWlmYWNfbWFzayxcbiAgICAgICAgICAgICAgICAgICAgY29taWZhY19lZXo6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMuY29taWZhY19lZXosXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cmllczogd2luZG93LldlYk1hcHBpbmcuTWFwYm94LkxheWVycy5jb3VudHJpZXMsXG4gICAgICAgICAgICAgICAgICAgIGxhbmRzY2FwZXM6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMubGFuZHNjYXBlcyxcbiAgICAgICAgICAgICAgICAgICAga2xjOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3guTGF5ZXJzLmtsYyxcbiAgICAgICAgICAgICAgICAgICAgY29uY2Vzc2lvbnM6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMuY29uY2Vzc2lvbnMsXG4gICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZF9hcmVhczogd2luZG93LldlYk1hcHBpbmcuTWFwYm94LkxheWVycy5wcm90ZWN0ZWRfYXJlYXNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBtYXBfbG9hZGluZzogZmFsc2UsXG5cbiAgICAgICAgICAgIGNsb3NlX2xheWVyX3NlbGVjdG9yX29uY2xpY2s6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbW91bnRlZCgpe1xuICAgICAgICB0aGlzLmluaXRNYXAoKTtcbiAgICAgICAgdGhpcy5tYXBfbG9hZGluZyA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICB9XG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/demo.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/demo_card.js":
/*!*********************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/demo_card.js ***!
  \*********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _mixins_visible_components__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mixins/visible_components */ \"./resources/assets/js/mapping_mapbox/mixins/visible_components.js\");\n/* harmony import */ var _store_modules_visible_components__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./store_modules/visible_components */ \"./resources/assets/js/mapping_mapbox/store_modules/visible_components.js\");\n\n\nwindow.AnalyticalPlatformCardDemo = Vue.extend({\n  mixins: [_mixins_visible_components__WEBPACK_IMPORTED_MODULE_0__[\"default\"]],\n  store: new window.Vuex.Store({\n    modules: {\n      visible_components: _store_modules_visible_components__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n    }\n  }),\n  data: function data() {\n    return {\n      // specific for DEMO\n      api_loading: false,\n      api_errors: false,\n      api_done: false,\n      no_cache: false,\n      // as for window.AnalyticalPlatform\n      Locale: window.Locale,\n      selected_card_button: null,\n      selected_card_tab: null,\n      card_has_data: false,\n      api_cancel_token: null,\n      api_data: {}\n    };\n  },\n  methods: {\n    layerIsOnMap: function layerIsOnMap(arg) {\n      return false;\n    },\n    // specific for DEMO\n    load_demo_api: function load_demo_api(site) {\n      var _this = this;\n\n      this.site = site;\n      this.api_done = false;\n      this.api_errors = false;\n      this.api_loading = false;\n      var url = this.level === 'regional' ? 'api/analysis/' + this.theme + '/' + this.level : 'api/analysis/' + this.theme + '/' + this.level + '/' + site; // Cancel previous API request if still running\n\n      if (this.api_cancel_token !== null) {\n        this.api_cancel_token();\n      }\n\n      this.api_loading = true;\n      this.card_has_data = false;\n      window.axios({\n        method: 'post',\n        url: window.Laravel.baseUrl + url,\n        data: {\n          _token: window.Laravel.csrfToken,\n          no_cache: _this.no_cache\n        },\n        cancelToken: new window.axios.CancelToken(function executor(c) {\n          _this.api_cancel_token = c;\n        })\n      }).then(function (response) {\n        console.log('Request to API executed');\n\n        _this.responseCallback(response.data);\n\n        _this.api_done = true;\n      })[\"catch\"](function (error) {\n        if (window.axios.isCancel(error)) {\n          console.log('Request to API canceled. No more necessary', error.message);\n        } else {\n          console.log(error);\n          _this.api_errors = true;\n        }\n      })[\"finally\"](function () {\n        _this.finallyCallback();\n      });\n    },\n    responseCallback: function responseCallback(response) {\n      console.log(response);\n      this.api_data[this.theme] = this.api_data[this.theme] || [];\n      this.api_data[this.theme][this.level] = this.api_data[this.theme][this.level] || [];\n\n      if (this.level === 'regional') {\n        this.api_data[this.theme][this.level] = response;\n      } else {\n        this.api_data[this.theme][this.level][this.site] = this.api_data[this.theme][this.level][this.site] || [];\n        this.api_data[this.theme][this.level][this.site] = response;\n      }\n\n      this.card_has_data = true;\n    },\n    finallyCallback: function finallyCallback() {\n      this.api_loading = false;\n    },\n    // as for window.AnalyticalPlatform\n    showCardButton: function showCardButton(button) {\n      if (this.selected_card_button !== button) {\n        this.selected_card_button = button;\n      } else {\n        this.selected_card_button = null;\n      }\n    },\n    getCachedData: function getCachedData() {\n      if (this.level !== 'local') {\n        if (this.level === 'regional') {\n          return this.api_data[this.theme][this.level];\n        } else if (this.site !== null && this.api_data[this.theme][this.level] !== null && this.api_data[this.theme][this.level].hasOwnProperty(this.site)) {\n          return this.api_data[this.theme][this.level][this.site];\n        }\n      }\n\n      return null;\n    },\n    getDataAttribute: function getDataAttribute(attribute_path) {\n      var data = this.getCachedData();\n\n      if (data !== null) {\n        // return data[attribute_path];\n        var deepFind = function deepFind(data, attribute_path) {\n          var paths = attribute_path.split('.');\n          var current = data;\n\n          for (var i = 0; i < paths.length; ++i) {\n            if (!current.hasOwnProperty(paths[i])) {\n              return null;\n            } else {\n              current = current[paths[i]];\n            }\n          }\n\n          return current;\n        };\n\n        return deepFind(data, attribute_path);\n      }\n\n      return null;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L2RlbW9fY2FyZC5qcz8yZGEwIl0sIm5hbWVzIjpbIndpbmRvdyIsIkFuYWx5dGljYWxQbGF0Zm9ybUNhcmREZW1vIiwiVnVlIiwiZXh0ZW5kIiwibWl4aW5zIiwidmlzaWJsZV9jb21wb25lbnRzIiwic3RvcmUiLCJWdWV4IiwiU3RvcmUiLCJtb2R1bGVzIiwidmlzaWJsZV9jb21wb25lbnRzX3N0b3JlIiwiZGF0YSIsImFwaV9sb2FkaW5nIiwiYXBpX2Vycm9ycyIsImFwaV9kb25lIiwibm9fY2FjaGUiLCJMb2NhbGUiLCJzZWxlY3RlZF9jYXJkX2J1dHRvbiIsInNlbGVjdGVkX2NhcmRfdGFiIiwiY2FyZF9oYXNfZGF0YSIsImFwaV9jYW5jZWxfdG9rZW4iLCJhcGlfZGF0YSIsIm1ldGhvZHMiLCJsYXllcklzT25NYXAiLCJhcmciLCJsb2FkX2RlbW9fYXBpIiwic2l0ZSIsIl90aGlzIiwidXJsIiwibGV2ZWwiLCJ0aGVtZSIsImF4aW9zIiwibWV0aG9kIiwiTGFyYXZlbCIsImJhc2VVcmwiLCJfdG9rZW4iLCJjc3JmVG9rZW4iLCJjYW5jZWxUb2tlbiIsIkNhbmNlbFRva2VuIiwiZXhlY3V0b3IiLCJjIiwidGhlbiIsInJlc3BvbnNlIiwiY29uc29sZSIsImxvZyIsInJlc3BvbnNlQ2FsbGJhY2siLCJlcnJvciIsImlzQ2FuY2VsIiwibWVzc2FnZSIsImZpbmFsbHlDYWxsYmFjayIsInNob3dDYXJkQnV0dG9uIiwiYnV0dG9uIiwiZ2V0Q2FjaGVkRGF0YSIsImhhc093blByb3BlcnR5IiwiZ2V0RGF0YUF0dHJpYnV0ZSIsImF0dHJpYnV0ZV9wYXRoIiwiZGVlcEZpbmQiLCJwYXRocyIsInNwbGl0IiwiY3VycmVudCIsImkiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFHQUEsTUFBTSxDQUFDQywwQkFBUCxHQUFvQ0MsR0FB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QkFBSSxDQUFDRCxPQUFPLENBQUNOLGNBQVIsQ0FBdUJJLEtBQUssQ0FBQ0csQ0FBRCxDQUE1QixDQUFMLEVBQXVDO0FBQ25DLHFCQUFPLElBQVA7QUFDSCxhQUZELE1BRU87QUFDSEQscUJBQU8sR0FBR0EsT0FBTyxDQUFDRixLQUFLLENBQUNHLENBQUQsQ0FBTixDQUFqQjtBQUNIO0FBQ0o7O0FBQ0QsaUJBQU9ELE9BQVA7QUFDSCxTQVhEOztBQVlBLGVBQU9ILFFBQVEsQ0FBQzdDLElBQUQsRUFBTzRDLGNBQVAsQ0FBZjtBQUNIOztBQUNELGFBQU8sSUFBUDtBQUNIO0FBckhHO0FBOUJtQyxDQUFYLENBQXBDIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9tYXBwaW5nX21hcGJveC9kZW1vX2NhcmQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdmlzaWJsZV9jb21wb25lbnRzIGZyb20gXCIuL21peGlucy92aXNpYmxlX2NvbXBvbmVudHNcIjtcbmltcG9ydCB2aXNpYmxlX2NvbXBvbmVudHNfc3RvcmUgZnJvbSBcIi4vc3RvcmVfbW9kdWxlcy92aXNpYmxlX2NvbXBvbmVudHNcIjtcblxuXG53aW5kb3cuQW5hbHl0aWNhbFBsYXRmb3JtQ2FyZERlbW8gPSBWdWUuZXh0ZW5kKHtcblxuICAgIG1peGluczogW1xuICAgICAgICB2aXNpYmxlX2NvbXBvbmVudHNcbiAgICBdLFxuXG4gICAgc3RvcmU6IG5ldyB3aW5kb3cuVnVleC5TdG9yZSh7XG4gICAgICAgIG1vZHVsZXM6IHtcbiAgICAgICAgICAgIHZpc2libGVfY29tcG9uZW50czogdmlzaWJsZV9jb21wb25lbnRzX3N0b3JlXG4gICAgICAgIH1cbiAgICB9KSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC8vIHNwZWNpZmljIGZvciBERU1PXG4gICAgICAgICAgICBhcGlfbG9hZGluZzogZmFsc2UsXG4gICAgICAgICAgICBhcGlfZXJyb3JzOiBmYWxzZSxcbiAgICAgICAgICAgIGFwaV9kb25lOiBmYWxzZSxcbiAgICAgICAgICAgIG5vX2NhY2hlOiBmYWxzZSxcblxuICAgICAgICAgICAgLy8gYXMgZm9yIHdpbmRvdy5BbmFseXRpY2FsUGxhdGZvcm1cbiAgICAgICAgICAgIExvY2FsZTogd2luZG93LkxvY2FsZSxcbiAgICAgICAgICAgIHNlbGVjdGVkX2NhcmRfYnV0dG9uOiBudWxsLFxuICAgICAgICAgICAgc2VsZWN0ZWRfY2FyZF90YWI6IG51bGwsXG4gICAgICAgICAgICBjYXJkX2hhc19kYXRhOiBmYWxzZSxcbiAgICAgICAgICAgIGFwaV9jYW5jZWxfdG9rZW46IG51bGwsXG4gICAgICAgICAgICBhcGlfZGF0YToge31cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOntcblxuICAgICAgICBsYXllcklzT25NYXAoYXJnKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICAvLyBzcGVjaWZpYyBmb3IgREVNT1xuICAgICAgICBsb2FkX2RlbW9fYXBpKHNpdGUpe1xuXG4gICAgICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5zaXRlID0gc2l0ZTtcblxuICAgICAgICAgICAgdGhpcy5hcGlfZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5hcGlfZXJyb3JzID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmFwaV9sb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGxldCB1cmwgPSB0aGlzLmxldmVsID09PSAncmVnaW9uYWwnXG4gICAgICAgICAgICAgICAgPyAnYXBpL2FuYWx5c2lzLycgKyB0aGlzLnRoZW1lICsgJy8nICsgdGhpcy5sZXZlbFxuICAgICAgICAgICAgICAgIDogJ2FwaS9hbmFseXNpcy8nICsgdGhpcy50aGVtZSArICcvJyArIHRoaXMubGV2ZWwgKyAnLycgKyBzaXRlO1xuXG4gICAgICAgICAgICAvLyBDYW5jZWwgcHJldmlvdXMgQVBJIHJlcXVlc3QgaWYgc3RpbGwgcnVubmluZ1xuICAgICAgICAgICAgaWYgKHRoaXMuYXBpX2NhbmNlbF90b2tlbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBpX2NhbmNlbF90b2tlbigpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFwaV9sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY2FyZF9oYXNfZGF0YSA9IGZhbHNlO1xuXG4gICAgICAgICAgICB3aW5kb3cuYXhpb3Moe1xuICAgICAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICAgICAgICAgIHVybDogd2luZG93LkxhcmF2ZWwuYmFzZVVybCArIHVybCxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIF90b2tlbjogd2luZG93LkxhcmF2ZWwuY3NyZlRva2VuLFxuICAgICAgICAgICAgICAgICAgICBub19jYWNoZTogX3RoaXMubm9fY2FjaGVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNhbmNlbFRva2VuOiBuZXcgd2luZG93LmF4aW9zLkNhbmNlbFRva2VuKGZ1bmN0aW9uIGV4ZWN1dG9yKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYXBpX2NhbmNlbF90b2tlbiA9IGM7XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnUmVxdWVzdCB0byBBUEkgZXhlY3V0ZWQnKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVzcG9uc2VDYWxsYmFjayhyZXNwb25zZS5kYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYXBpX2RvbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmF4aW9zLmlzQ2FuY2VsKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlcXVlc3QgdG8gQVBJIGNhbmNlbGVkLiBObyBtb3JlIG5lY2Vzc2FyeScsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuYXBpX2Vycm9ycyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5maW5hbGx5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmluYWxseUNhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgfSxcblxuICAgICAgICByZXNwb25zZUNhbGxiYWNrKHJlc3BvbnNlKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIHRoaXMuYXBpX2RhdGFbdGhpcy50aGVtZV0gPSB0aGlzLmFwaV9kYXRhW3RoaXMudGhlbWVdIHx8IFtdO1xuICAgICAgICAgICAgdGhpcy5hcGlfZGF0YVt0aGlzLnRoZW1lXVt0aGlzLmxldmVsXSA9IHRoaXMuYXBpX2RhdGFbdGhpcy50aGVtZV1bdGhpcy5sZXZlbF0gfHwgW107XG4gICAgICAgICAgICBpZih0aGlzLmxldmVsID09PSAncmVnaW9uYWwnKXtcbiAgICAgICAgICAgICAgICB0aGlzLmFwaV9kYXRhW3RoaXMudGhlbWVdW3RoaXMubGV2ZWxdID0gcmVzcG9uc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBpX2RhdGFbdGhpcy50aGVtZV1bdGhpcy5sZXZlbF1bdGhpcy5zaXRlXSA9IHRoaXMuYXBpX2RhdGFbdGhpcy50aGVtZV1bdGhpcy5sZXZlbF1bdGhpcy5zaXRlXSB8fCBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwaV9kYXRhW3RoaXMudGhlbWVdW3RoaXMubGV2ZWxdW3RoaXMuc2l0ZV0gPSByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2FyZF9oYXNfZGF0YSA9IHRydWU7XG4gICAgICAgIH0sXG4gICAgICAgIGZpbmFsbHlDYWxsYmFjaygpe1xuICAgICAgICAgICAgdGhpcy5hcGlfbG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgLy8gYXMgZm9yIHdpbmRvdy5BbmFseXRpY2FsUGxhdGZvcm1cbiAgICAgICAgc2hvd0NhcmRCdXR0b24oYnV0dG9uKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZF9jYXJkX2J1dHRvbiAhPT0gYnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jYXJkX2J1dHRvbiA9IGJ1dHRvbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZF9jYXJkX2J1dHRvbiA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q2FjaGVkRGF0YSgpIHtcbiAgICAgICAgICAgIGlmKHRoaXMubGV2ZWwhPT0nbG9jYWwnKXtcbiAgICAgICAgICAgICAgICBpZih0aGlzLmxldmVsPT09J3JlZ2lvbmFsJyl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFwaV9kYXRhW3RoaXMudGhlbWVdW3RoaXMubGV2ZWxdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZih0aGlzLnNpdGUhPT1udWxsXG4gICAgICAgICAgICAgICAgICAgICYmIHRoaXMuYXBpX2RhdGFbdGhpcy50aGVtZV1bdGhpcy5sZXZlbF0gIT09IG51bGxcbiAgICAgICAgICAgICAgICAgICAgJiYgdGhpcy5hcGlfZGF0YVt0aGlzLnRoZW1lXVt0aGlzLmxldmVsXS5oYXNPd25Qcm9wZXJ0eSh0aGlzLnNpdGUpXG4gICAgICAgICAgICAgICAgKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBpX2RhdGFbdGhpcy50aGVtZV1bdGhpcy5sZXZlbF1bdGhpcy5zaXRlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSxcblxuICAgICAgICBnZXREYXRhQXR0cmlidXRlKGF0dHJpYnV0ZV9wYXRoKXtcbiAgICAgICAgICAgIGxldCBkYXRhID0gdGhpcy5nZXRDYWNoZWREYXRhKCk7XG4gICAgICAgICAgICBpZihkYXRhIT09bnVsbCl7XG4gICAgICAgICAgICAgICAgLy8gcmV0dXJuIGRhdGFbYXR0cmlidXRlX3BhdGhdO1xuICAgICAgICAgICAgICAgIGxldCBkZWVwRmluZCA9IGZ1bmN0aW9uKGRhdGEsIGF0dHJpYnV0ZV9wYXRoKXtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGhzID0gYXR0cmlidXRlX3BhdGguc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSBkYXRhO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpPTA7IGk8cGF0aHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY3VycmVudC5oYXNPd25Qcm9wZXJ0eShwYXRoc1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnRbcGF0aHNbaV1dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlZXBGaW5kKGRhdGEsIGF0dHJpYnV0ZV9wYXRoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0sXG5cbiAgICB9XG5cbn0pO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/demo_card.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/layers.atlas.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/layers.atlas.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  g_titreminier: {\n    id: 'g_titreminier',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://ies-ows.jrc.ec.europa.eu/ofac/atlas.php?', 'g_titreminier'),\n    label: 'Concession minière'\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L2xheWVycy5hdGxhcy5qcz9hZDQxIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJnX3RpdHJlbWluaWVyIiwiaWQiLCJ0eXBlIiwic291cmNlIiwid2luZG93IiwiV2ViTWFwcGluZyIsIk1hcGJveCIsIm1hcGJveF93bXNfc291cmNlIiwibGFiZWwiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFFYkMsZUFBYSxFQUFFO0FBQ1hDLE1BQUUsRUFBRSxlQURPO0FBRVhDLFFBQUksRUFBRSxRQUZLO0FBR1hDLFVBQU0sRUFBRUMsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsaUJBQXpCLENBQTJDLGtEQUEzQyxFQUErRixlQUEvRixDQUhHO0FBSVhDLFNBQUssRUFBRTtBQUpJO0FBRkYsQ0FBakIiLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L2xheWVycy5hdGxhcy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgZ190aXRyZW1pbmllcjoge1xuICAgICAgICBpZDogJ2dfdGl0cmVtaW5pZXInLFxuICAgICAgICB0eXBlOiAncmFzdGVyJyxcbiAgICAgICAgc291cmNlOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gubWFwYm94X3dtc19zb3VyY2UoJ2h0dHBzOi8vaWVzLW93cy5qcmMuZWMuZXVyb3BhLmV1L29mYWMvYXRsYXMucGhwPycsICdnX3RpdHJlbWluaWVyJyksXG4gICAgICAgIGxhYmVsOiAnQ29uY2Vzc2lvbiBtaW5pw6hyZSdcbiAgICB9XG5cblxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/layers.atlas.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/layers.js":
/*!******************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/layers.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  // ##########  Rasters  ##########\n  comifac: window.WebMapping.Mapbox.wms('comifac', Locale.getLabel('mapping.layers.comifac'), true, {\n    attribution: '<div style=\"width: 800px;\">' + '<b>Image source de base :</b> Verhegghen, A., Mayaux, P., de Wasseige, C., and Defourny, P.: ' + 'Mapping Congo Basin vegetation types from 300 m and 1 km multi-sensor time series for carbon stocks' + ' and forest areas estimation, Biogeosciences, 9, 5061-5079, doi:10.5194/bg-9-5061-2012, 2012. ' + '<a target=\"_blank\" href=\"https://www.biogeosciences.net/9/5061/2012/bg-9-5061-2012.html\">biogeosciences.net</a>' + '<br/><b>Données sources ajoutées :</b> SRTM de la Nasa, OSM et OFAC' + '<br/><b>Traitée :</b> Mai 2015, <a target=\"_blank\" href=\"/docs/atlas/mapsteps.pdf\">Etapes de réalisation</a></div>'\n  }),\n  spotvgt: window.WebMapping.Mapbox.wms('spotvgt', Locale.getLabel('mapping.layers.spotvgt'), true),\n  modis: window.WebMapping.Mapbox.wms('modis', Locale.getLabel('mapping.layers.modis'), true),\n  srtm: window.WebMapping.Mapbox.wms('srtm', Locale.getLabel('mapping.layers.srtm'), true),\n  glc2000: window.WebMapping.Mapbox.wms('glc2000', Locale.getLabel('mapping.layers.glc2000'), true),\n  congo_basin_vegetation_map: window.WebMapping.Mapbox.wms('congo_basin_vegetation_map', Locale.getLabel('mapping.layers.congo_basin_vegetation_map'), true),\n  total_carbon: window.WebMapping.Mapbox.wms('total_carbon', Locale.getLabel('mapping.layers.total_carbon'), true),\n  landscapes_forest_loss_masked: window.WebMapping.Mapbox.wms('landscapes_forest_loss_masked', Locale.getLabel('mapping.layers.landscapes_forest_loss_masked'), false, {\n    \"abstract\": 'From the <a target=\"_blank\" href=\"https://earthenginepartners.appspot.com/science-2013-global-forest/download_v1.7.html\">' + 'Lossyear Hansen map</a> masked by the forest presence in 2000'\n  }),\n  landscapes_forest_mask: window.WebMapping.Mapbox.wms('landscapes_forest_mask', Locale.getLabel('mapping.layers.landscapes_forest_mask'), false, {\n    \"abstract\": encodeURI('Computed with the Forest 2000 Hansen map, Forest cover more than 30% was retain as forest threshold'),\n    legend: [{\n      'color': '#5BCD59',\n      'label': 'Forest'\n    }]\n  }),\n  landscapes_lc300_1995_2015: window.WebMapping.Mapbox.wms('landscapes_lc300_1995_2015', Locale.getLabel('mapping.layers.landscapes_lc300_1995_2015'), false, {\n    \"abstract\": 'Source: ESA-CCI, <a target=\"_blank\" href=\"http://www.esa-landcover-cci.org/\">http://www.esa-landcover-cci.org/</a>',\n    legend: [{\n      'color': '#0e7a04',\n      'label': 'Cultivated to Natural areas'\n    }, {\n      'color': '#20b4a5',\n      'label': 'Cultivated areas to Water'\n    }, {\n      'color': '#eb6d82',\n      'label': 'Mosaic Nat/Cult to Cultivated areas'\n    }, {\n      'color': '#3db611',\n      'label': 'Mosaic Nat/Cult to Natural areas'\n    }, {\n      'color': '#1aaeed',\n      'label': 'Mosaic Nat/Cult areas to Water'\n    }, {\n      'color': '#e6091b',\n      'label': 'Natural to Cultivated areas'\n    }, {\n      'color': '#ef7707',\n      'label': 'Natural to Mosaic Nat/Cult areas'\n    }, {\n      'color': '#3c75c9',\n      'label': 'Natural areas to Water'\n    }, {\n      'color': '#fbb451',\n      'label': 'Water/Snow to Cultivated areas'\n    }, {\n      'color': '#dfef61',\n      'label': 'Water/Snow to Mosaic Nat/Cult areas'\n    }, {\n      'color': '#00cd7e',\n      'label': 'Water/Snow to Natural areas'\n    }, {\n      'color': '#af8354',\n      'label': 'Cultivated to Mosaic Nat/Cult areas'\n    }]\n  }),\n  landscapes_lc300_2015_2018: window.WebMapping.Mapbox.wms('landscapes_lc300_2015_2018', Locale.getLabel('mapping.layers.landscapes_lc300_2015_2018'), false, {\n    \"abstract\": 'Source: ESA-CCI, <a target=\"_blank\" href=\"http://www.esa-landcover-cci.org/\">http://www.esa-landcover-cci.org/</a>',\n    legend: [{\n      'color': '#0e7a04',\n      'label': 'Cultivated to Natural areas'\n    }, {\n      'color': '#20b4a5',\n      'label': 'Cultivated areas to Water'\n    }, {\n      'color': '#eb6d82',\n      'label': 'Mosaic Nat/Cult to Cultivated areas'\n    }, {\n      'color': '#3db611',\n      'label': 'Mosaic Nat/Cult to Natural areas'\n    }, {\n      'color': '#1aaeed',\n      'label': 'Mosaic Nat/Cult areas to Water'\n    }, {\n      'color': '#e6091b',\n      'label': 'Natural to Cultivated areas'\n    }, {\n      'color': '#ef7707',\n      'label': 'Natural to Mosaic Nat/Cult areas'\n    }, {\n      'color': '#3c75c9',\n      'label': 'Natural areas to Water'\n    }, {\n      'color': '#fbb451',\n      'label': 'Water/Snow to Cultivated areas'\n    }, {\n      'color': '#dfef61',\n      'label': 'Water/Snow to Mosaic Nat/Cult areas'\n    }, {\n      'color': '#00cd7e',\n      'label': 'Water/Snow to Natural areas'\n    }, {\n      'color': '#af8354',\n      'label': 'Cultivated to Mosaic Nat/Cult areas'\n    }]\n  }),\n  landscapes_above_ground_carbon: window.WebMapping.Mapbox.wms('landscapes_above_ground_carbon', Locale.getLabel('mapping.layers.landscapes_above_ground_carbon'), false, {\n    \"abstract\": 'Above Ground Carbon * 0.5 (conversion factor (Biomass-> Carbon)). Water have been converted in \"NoData\". <br />' + 'Santoro, M., Cartus, O., Mermoz, S., Bouvet, A., Le Toan, T., Carvalhais, N., Rozendaal, D., ' + 'Herold, M., Avitabile, V., Quegan, S., Carreiras, J., Rauste, Y., Balzter, H., Schmullius, C., Seifert, F.M., 2018, ' + '<b>GlobBiomass global above-ground biomass and growing stock volume datasets</b>, available on-line ' + '<a target=\"_blank\" href=\"https://globbiomass.org/products/global-mapping\">here</a>'\n  }),\n  landscapes_below_ground_carbon: window.WebMapping.Mapbox.wms('landscapes_below_ground_carbon', Locale.getLabel('mapping.layers.landscapes_below_ground_carbon'), false, {\n    \"abstract\": 'Above Ground Carbon map * R (Root factor (Stem Carbon -> Root Carbon)). The R factor defined ' + 'by the <a target=\"_blank\" href=\"https://www.ipcc-nggip.iges.or.jp/public/2019rf/pdf/4_Volume4/19R_V4_Ch04_Forest%20Land.pdf\">' + '2019 Refinement to the 2006 IPCC Guidelines for National Greenhouse Gas Inventories</a>.'\n  }),\n  landscapes_soil_organic_carbon: window.WebMapping.Mapbox.wms('landscapes_soil_organic_carbon', Locale.getLabel('mapping.layers.landscapes_soil_organic_carbon'), false, {\n    \"abstract\": '<b>Global Soil Organic Carbon Map (GSOCmap)</b> from FAO available <a target=\"_blank\" ' + 'href=\"http://54.229.242.119/GSOCmap/\">here</a>'\n  }),\n  landscapes_total_carbon: window.WebMapping.Mapbox.wms('landscapes_total_carbon', Locale.getLabel('mapping.layers.landscapes_total_carbon'), false, {\n    \"abstract\": 'Addition of the <b>Above Ground Carbon</b>, <b>Below Ground Carbon</b> and <b>Soil Organic Carbon maps</b>'\n  }),\n  landscapes_water_transitions: window.WebMapping.Mapbox.wms('landscapes_water_transitions', Locale.getLabel('mapping.layers.landscapes_water_transitions'), false, {\n    \"abstract\": encodeURI('Jean-Francois Pekel, Andrew Cottam, Noel Gorelick, Alan S. Belward, <b>High-resolution ' + 'mapping of global surface water and its long-term changes.</b> Nature 540, 418-422 (2016). (doi:10.1038/nature20584)' + '<br />Accessed through <a href=\"https://global-surface-water.appspot.com/\" target=\"_blank\">Global Surface Water Explorer</a>' + '<br />Source: EC JRC/Google'),\n    legend: [{\n      'color': '#0000dd',\n      'label': 'Permanent'\n    }, {\n      'color': '#22b14c',\n      'label': 'New Permanent'\n    }, {\n      'color': '#93073e',\n      'label': 'Lost Permanent'\n    }, {\n      'color': '#99d9ea',\n      'label': 'Seasonal'\n    }, {\n      'color': '#b5e61d',\n      'label': 'New Seasonal'\n    }, {\n      'color': '#ff8b37',\n      'label': 'Lost Seasonal'\n    }, {\n      'color': '#ffdd66',\n      'label': 'Seasonal to Permanent'\n    }, {\n      'color': '#ebb4bb',\n      'label': 'Permanent to Seasonal'\n    }, {\n      'color': '#7f7f7f',\n      'label': 'Ephemeral Permanent'\n    }, {\n      'color': '#acacac',\n      'label': 'Ephemeral Seasonal'\n    }]\n  }),\n  // ##########  DOPA Resources  ##########\n  land_cover: {\n    id: 'land_cover',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'land_cover_copernicus_2018'),\n    label: 'Couverture du Sol',\n    \"abstract\": '&copy; Services DOPA'\n  },\n  land_cover_change: {\n    id: 'land_cover_change',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'LCC_1995_2015'),\n    label: 'Changement d\\'occupation du sol',\n    \"abstract\": '&copy; Services DOPA'\n  },\n  land_fragmentation: {\n    id: 'land_fragmentation',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'land_fragmentation'),\n    label: 'Fragmentation des terres',\n    \"abstract\": '&copy; Services DOPA'\n  },\n  land_degradation: {\n    id: 'land_degradation',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'LPD'),\n    label: 'Dégradation des terres',\n    \"abstract\": '&copy; Services DOPA'\n  },\n  soil_organic_carbon: {\n    id: 'soil_organic_carbon',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'soil_organic_carbon'),\n    label: 'Carbone organique du sol',\n    \"abstract\": '&copy; Services DOPA'\n  },\n  above_ground_carbon: {\n    id: 'above_ground_carbon',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'above_ground_carbon'),\n    label: 'Carbon au-dessous du sol',\n    \"abstract\": '&copy; Services DOPA'\n  },\n  // ##########  Other External Resources  ##########\n  water_transitions: {\n    id: \"water_transitions\",\n    type: \"raster\",\n    source: {\n      \"type\": \"raster\",\n      \"tiles\": [\"https://storage.googleapis.com/global-surface-water/tiles2019/transitions/{z}/{x}/{y}.png\"],\n      \"attribution\": 'Source: EC JRC/Google'\n    },\n    label: Locale.getLabel('mapping.layers.water_transitions'),\n    \"abstract\": encodeURI('Jean-Francois Pekel, Andrew Cottam, Noel Gorelick, Alan S. Belward, <b>High-resolution ' + 'mapping of global surface water and its long-term changes.</b> Nature 540, 418-422 (2016). (doi:10.1038/nature20584)' + '<br />Accessed through <a href=\"https://global-surface-water.appspot.com/\" target=\"_blank\">Global Surface Water Explorer</a>' + '<br />Source: EC JRC/Google')\n  },\n  tree_cover: {\n    id: 'tree_cover',\n    type: 'raster',\n    source: {\n      \"type\": \"raster\",\n      \"tiles\": [\"https://storage.googleapis.com/earthenginepartners-hansen/tiles/gfc_v1.4/tree_alpha/{z}/{x}/{y}.png\"],\n      //\"tiles\": [\"https://storage.googleapis.com/wri-public/treecover/2010/{z}/{x}/{y}.png\"],\n      \"attribution\": \"Hansen/UMD/Google/USGS/NASA\"\n    },\n    label: 'Tree Cover 2000-2010',\n    \"abstract\": encodeURI('Hansen, M. C., P. V. Potapov, R. Moore, M. Hancher, S. A. Turubanova, A. Tyukavina, D. Thau, S. V. Stehman, S. J. Goetz, ' + 'T. R. Loveland, A. Kommareddy, A. Egorov, L. Chini, C. O. Justice, and J. R. G. Townshend. 2013. <b>“High-Resolution Global Maps of 21st-Century Forest Cover Change.”</b> ' + 'Science 342 (15 November): 850–53. <br />Data available on-line from: <a href=\"https://glad.umd.edu/dataset/global-2010-tree-cover-30-m\" target=\"_blank\">https://glad.umd.edu/dataset/global-2010-tree-cover-30-m</a>. ' + '<br />Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  },\n  forest_gain: {\n    id: 'forest_gain',\n    type: 'raster',\n    source: {\n      \"type\": \"raster\",\n      \"tiles\": [\"https://storage.googleapis.com/earthenginepartners-hansen/tiles/gfc_v1.4/gain_alpha/{z}/{x}/{y}.png\"],\n      \"attribution\": \"Hansen/UMD/Google/USGS/NASA\"\n    },\n    label: 'Forest cover gain 2000–2012',\n    \"abstract\": encodeURI('Hansen, M. C., P. V. Potapov, R. Moore, M. Hancher, S. A. Turubanova, A. Tyukavina, D. Thau, S. V. Stehman, S. J. Goetz, ' + 'T. R. Loveland, A. Kommareddy, A. Egorov, L. Chini, C. O. Justice, and J. R. G. Townshend. 2013. <b>“High-Resolution Global Maps of 21st-Century Forest Cover Change.”</b> ' + 'Science 342 (15 November): 850–53. <br />Data available on-line from: <a href=\"https://glad.umd.edu/dataset/global-2010-tree-cover-30-m\" target=\"_blank\">https://glad.umd.edu/dataset/global-2010-tree-cover-30-m</a>. ' + '<br />Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  },\n  forest_loss: {\n    id: 'forest_loss',\n    type: 'raster',\n    source: {\n      \"type\": \"raster\",\n      \"tiles\": [\"https://storage.googleapis.com/earthenginepartners-hansen/tiles/gfc_v1.7/loss_alpha/{z}/{x}/{y}.png\"],\n      \"attribution\": \"Hansen/UMD/Google/USGS/NASA\"\n    },\n    label: 'Forest cover loss 2000–2018',\n    \"abstract\": encodeURI('Hansen, M. C., P. V. Potapov, R. Moore, M. Hancher, S. A. Turubanova, A. Tyukavina, D. Thau, S. V. Stehman, S. J. Goetz, ' + 'T. R. Loveland, A. Kommareddy, A. Egorov, L. Chini, C. O. Justice, and J. R. G. Townshend. 2013. <b>“High-Resolution Global Maps of 21st-Century Forest Cover Change.”</b> ' + 'Science 342 (15 November): 850–53. <br />Data available on-line from: <a href=\"https://glad.umd.edu/dataset/global-2010-tree-cover-30-m\" target=\"_blank\">https://glad.umd.edu/dataset/global-2010-tree-cover-30-m</a>. ' + '<br />Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  },\n  intact_forest: {\n    id: \"intact_forest\",\n    type: \"raster\",\n    source: {\n      \"type\": \"raster\",\n      \"tiles\": [\"https://storage.googleapis.com/earthenginepartners-hansen/tiles/intact_forest_2016/{z}/{x}/{y}.png\"],\n      \"attribution\": 'Map tiles by <a target=\"_top\" rel=\"noopener\" href=\"https://stamen.com\">Stamen Design</a>, under <a target=\"_top\" rel=\"noopener\" href=\"https://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a target=\"_top\" rel=\"noopener\" href=\"https://openstreetmap.org\">OpenStreetMap</a>, under <a target=\"_top\" rel=\"noopener\" href=\"https://creativecommons.org/licenses/by-sa/3.0\">CC BY SA</a>'\n    },\n    label: 'Intact Forest Landscapes (IFL 2000-2016)',\n    \"abstract\": encodeURI('Greenpeace, University of Maryland, World Resources Institute and Transparent World. “Intact Forest Landscapes. 2000/2013/2016” ' + 'Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  },\n  // ##########  Overlays  ##########\n  comifac_mask: window.WebMapping.Mapbox.wms('comifac_mask', null, true),\n  comifac_eez: window.WebMapping.Mapbox.mapbox_vector_layer('comifac_eez', null, 'fill', {\n    'fill-color': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 'rgba(255, 255, 255, 0.3)', 'rgba(255, 255, 255, 0)'],\n    'fill-outline-color': 'rgba(60, 150, 255, 0.8)'\n  }),\n  countries: window.WebMapping.Mapbox.mapbox_vector_layer('countries', null, 'fill', {\n    'fill-color': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 'rgba(255, 255, 255, 0.3)', 'rgba(255, 255, 255, 0)'],\n    'fill-outline-color': 'rgba(0, 50, 0, 0.8)'\n  }, 'countries'),\n  landscapes: window.WebMapping.Mapbox.mapbox_vector_layer('landscapes', Locale.getLabel('mapping.platform.sites.landscapes', 2), 'fill', {\n    'fill-color': 'rgb(255, 255, 0)',\n    'fill-opacity': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 0.8, 0.5]\n  }),\n  klc: window.WebMapping.Mapbox.mapbox_vector_layer('klc', Locale.getLabel('mapping.platform.sites.klc', 2), 'fill', {\n    'fill-color': 'rgb(255, 155, 0)',\n    'fill-opacity': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 0.8, 0.5]\n  }, null, '2021-04'),\n  concessions: window.WebMapping.Mapbox.mapbox_vector_layer('concessions', Locale.getLabel('mapping.platform.sites.concessions', 2), 'fill', {\n    'fill-color': 'rgb(163, 113, 66)',\n    'fill-opacity': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 0.8, 0.5]\n  }),\n  protected_areas: window.WebMapping.Mapbox.mapbox_vector_layer('protected_areas', Locale.getLabel('mapping.platform.sites.protected_areas', 2), 'fill', {\n    'fill-color': 'rgb(0, 115, 40)',\n    'fill-opacity': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 0.8, 0.5]\n  }, 'protected_areas', '2021-05-05')\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L2xheWVycy5qcz82ZTYwIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb21pZmFjIiwid2luZG93IiwiV2ViTWFwcGluZyIsIk1hcGJveCIsIndtcyIsIkxvY2FsZSIsImdldExhYmVsIiwiYXR0cmlidXRpb24iLCJzcG90dmd0IiwibW9kaXMiLCJzcnRtIiwiZ2xjMjAwMCIsImNvbmdvX2Jhc2luX3ZlZ2V0YXRpb25fbWFwIiwidG90YWxfY2FyYm9uIiwibGFuZHNjYXBlc19mb3Jlc3RfbG9zc19tYXNrZWQiLCJsYW5kc2NhcGVzX2ZvcmVzdF9tYXNrIiwiZW5jb2RlVVJJIiwibGVnZW5kIiwibGFuZHNjYXBlc19sYzMwMF8xOTk1XzIwMTUiLCJsYW5kc2NhcGVzX2xjMzAwXzIwMTVfMjAxOCIsImxhbmRzY2FwZXNfYWJvdmVfZ3JvdW5kX2NhcmJvbiIsImxhbmRzY2FwZXNfYmVsb3dfZ3JvdW5kX2NhcmJvbiIsImxhbmRzY2FwZXNfc29pbF9vcmdhbmljX2NhcmJvbiIsImxhbmRzY2FwZXNfdG90YWxfY2FyYm9uIiwibGFuZHNjYXBlc193YXRlcl90cmFuc2l0aW9ucyIsImxhbmRfY292ZXIiLCJpZCIsInR5cGUiLCJzb3VyY2UiLCJtYXBib3hfd21zX3NvdXJjZSIsImxhYmVsIiwibGFuZF9jb3Zlcl9jaGFuZ2UiLCJsYW5kX2ZyYWdtZW50YXRpb24iLCJsYW5kX2RlZ3JhZGF0aW9uIiwic29pbF9vcmdhbmljX2NhcmJvbiIsImFib3ZlX2dyb3VuZF9jYXJib24iLCJ3YXRlcl90cmFuc2l0aW9ucyIsInRyZWVfY292ZXIiLCJmb3Jlc3RfZ2FpbiIsImZvcmVzdF9sb3NzIiwiaW50YWN0X2ZvcmVzdCIsImNvbWlmYWNfbWFzayIsImNvbWlmYWNfZWV6IiwibWFwYm94X3ZlY3Rvcl9sYXllciIsImNvdW50cmllcyIsImxhbmRzY2FwZXMiLCJrbGMiLCJjb25jZXNzaW9ucyIsInByb3RlY3RlZF9hcmVhcyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUViO0FBRUFDLFNBQU8sRUFBR0MsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsR0FBekIsQ0FBNkIsU0FBN0IsRUFBd0NDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQix3QkFBaEIsQ0FBeEMsRUFBa0YsSUFBbEYsRUFBd0Y7QUFDOUZDLGVBQVcsRUFBRSxnQ0FDVCwrRkFEUyxHQUVULHFHQUZTLEdBR1QsZ0dBSFMsR0FJVCxpSEFKUyxHQUtULHFFQUxTLEdBTVQ7QUFQMEYsR0FBeEYsQ0FKRztBQWFiQyxTQUFPLEVBQUdQLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLEdBQXpCLENBQTZCLFNBQTdCLEVBQXdDQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0Isd0JBQWhCLENBQXhDLEVBQW1GLElBQW5GLENBYkc7QUFjYkcsT0FBSyxFQUFHUixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCQyxHQUF6QixDQUE2QixPQUE3QixFQUFzQ0MsTUFBTSxDQUFDQyxRQUFQLENBQWdCLHNCQUFoQixDQUF0QyxFQUErRSxJQUEvRSxDQWRLO0FBZWJJLE1BQUksRUFBR1QsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsR0FBekIsQ0FBNkIsTUFBN0IsRUFBcUNDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQixxQkFBaEIsQ0FBckMsRUFBNkUsSUFBN0UsQ0FmTTtBQWdCYkssU0FBTyxFQUFHVixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCQyxHQUF6QixDQUE2QixTQUE3QixFQUF3Q0MsTUFBTSxDQUFDQyxRQUFQLENBQWdCLHdCQUFoQixDQUF4QyxFQUFtRixJQUFuRixDQWhCRztBQWlCYk0sNEJBQTBCLEVBQUdYLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLEdBQXpCLENBQTZCLDRCQUE3QixFQUEyREMsTUFBTSxDQUFDQyxRQUFQLENBQWdCLDJDQUFoQixDQUEzRCxFQUF5SCxJQUF6SCxDQWpCaEI7QUFrQmJPLGNBQVksRUFBR1osTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsR0FBekIsQ0FBNkIsY0FBN0IsRUFBNkNDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQiw2QkFBaEIsQ0FBN0MsRUFBNkYsSUFBN0YsQ0FsQkY7QUFvQmJRLCtCQUE2QixFQUFHYixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCQyxHQUF6QixDQUE2QiwrQkFBN0IsRUFDNUJDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQiw4Q0FBaEIsQ0FENEIsRUFDcUMsS0FEckMsRUFDNEM7QUFDcEUsZ0JBQVUsOEhBQ047QUFGZ0UsR0FENUMsQ0FwQm5CO0FBeUJiUyx3QkFBc0IsRUFBR2QsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsR0FBekIsQ0FBNkIsd0JBQTdCLEVBQ3JCQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0IsdUNBQWhCLENBRHFCLEVBQ3FDLEtBRHJDLEVBQzRDO0FBQzdELGdCQUFVVSxTQUFTLENBQUMscUdBQUQsQ0FEMEM7QUFFN0RDLFVBQU0sRUFBRSxDQUNKO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FESTtBQUZxRCxHQUQ1QyxDQXpCWjtBQWdDYkMsNEJBQTBCLEVBQUdqQixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCQyxHQUF6QixDQUE2Qiw0QkFBN0IsRUFDekJDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQiwyQ0FBaEIsQ0FEeUIsRUFDcUMsS0FEckMsRUFDNEM7QUFDakUsZ0JBQVUsb0hBRHVEO0FBRWpFVyxVQUFNLEVBQUMsQ0FDSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBREcsRUFFSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBRkcsRUFHSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBSEcsRUFJSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBSkcsRUFLSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBTEcsRUFNSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBTkcsRUFPSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBUEcsRUFRSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBUkcsRUFTSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBVEcsRUFVSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBVkcsRUFXSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBWEcsRUFZSDtBQUFDLGVBQVMsU0FBVjtBQUFxQixlQUFTO0FBQTlCLEtBWkc7QUFGMEQsR0FENUMsQ0FoQ2hCO0FBa0RiRSw0QkFBMEIsRUFBR2xCLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLEdBQXpCLENBQTZCLDRCQUE3QixFQUN6QkMsTUFBTSxDQUFDQyxRQUFQLENBQWdCLDJDQUFoQixDQUR5QixFQUNxQyxLQURyQyxFQUM0QztBQUNqRSxnQkFBVSxvSEFEdUQ7QUFFakVXLFVBQU0sRUFBQyxDQUNIO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FERyxFQUVIO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FGRyxFQUdIO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FIRyxFQUlIO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FKRyxFQUtIO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FMRyxFQU1IO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FORyxFQU9IO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FQRyxFQVFIO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FSRyxFQVNIO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FURyxFQVVIO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FWRyxFQVdIO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FYRyxFQVlIO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FaRztBQUYwRCxHQUQ1QyxDQWxEaEI7QUFvRWJHLGdDQUE4QixFQUFHbkIsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsR0FBekIsQ0FBNkIsZ0NBQTdCLEVBQzdCQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0IsK0NBQWhCLENBRDZCLEVBQ3FDLEtBRHJDLEVBQzJDO0FBQ3hFLGdCQUFVLG9IQUNOLCtGQURNLEdBRU4sc0hBRk0sR0FHTixzR0FITSxHQUlOO0FBTG9FLEdBRDNDLENBcEVwQjtBQTRFYmUsZ0NBQThCLEVBQUdwQixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCQyxHQUF6QixDQUE2QixnQ0FBN0IsRUFDN0JDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQiwrQ0FBaEIsQ0FENkIsRUFDcUMsS0FEckMsRUFDNEM7QUFDckUsZ0JBQVUsa0dBQ04sK0hBRE0sR0FFTjtBQUhpRSxHQUQ1QyxDQTVFcEI7QUFrRmJnQixnQ0FBOEIsRUFBR3JCLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLEdBQXpCLENBQTZCLGdDQUE3QixFQUM3QkMsTUFBTSxDQUFDQyxRQUFQLENBQWdCLCtDQUFoQixDQUQ2QixFQUNxQyxLQURyQyxFQUMyQztBQUNwRSxnQkFBVSwyRkFDTjtBQUZnRSxHQUQzQyxDQWxGcEI7QUF1RmJpQix5QkFBdUIsRUFBR3RCLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLEdBQXpCLENBQTZCLHlCQUE3QixFQUN0QkMsTUFBTSxDQUFDQyxRQUFQLENBQWdCLHdDQUFoQixDQURzQixFQUNxQyxLQURyQyxFQUM0QztBQUM5RCxnQkFBVTtBQURvRCxHQUQ1QyxDQXZGYjtBQTJGYmtCLDhCQUE0QixFQUFFdkIsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsR0FBekIsQ0FBNkIsOEJBQTdCLEVBQzFCQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0IsNkNBQWhCLENBRDBCLEVBQ3NDLEtBRHRDLEVBQzZDO0FBQ25FLGdCQUFVVSxTQUFTLENBQUMsNEZBQ2hCLHNIQURnQixHQUVoQiw4SEFGZ0IsR0FHaEIsNkJBSGUsQ0FEZ0Q7QUFLbkVDLFVBQU0sRUFBRSxDQUNKO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FESSxFQUVKO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FGSSxFQUdKO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FISSxFQUlKO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FKSSxFQUtKO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FMSSxFQU1KO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FOSSxFQU9KO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FQSSxFQVFKO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FSSSxFQVNKO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FUSSxFQVVKO0FBQUMsZUFBUyxTQUFWO0FBQXFCLGVBQVM7QUFBOUIsS0FWSTtBQUwyRCxHQUQ3QyxDQTNGakI7QUErR2I7QUFFQVEsWUFBVSxFQUFDO0FBQ1BDLE1BQUUsRUFBRSxZQURHO0FBRVBDLFFBQUksRUFBRSxRQUZDO0FBR1BDLFVBQU0sRUFBRTNCLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUIwQixpQkFBekIsQ0FBMkMsb0VBQTNDLEVBQWlILDRCQUFqSCxDQUhEO0FBSVBDLFNBQUssRUFBRSxtQkFKQTtBQUtQLGdCQUFVO0FBTEgsR0FqSEU7QUF3SGJDLG1CQUFpQixFQUFDO0FBQ2RMLE1BQUUsRUFBRSxtQkFEVTtBQUVkQyxRQUFJLEVBQUUsUUFGUTtBQUdkQyxVQUFNLEVBQUUzQixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCMEIsaUJBQXpCLENBQTJDLG9FQUEzQyxFQUFpSCxlQUFqSCxDQUhNO0FBSWRDLFNBQUssRUFBRSxpQ0FKTztBQUtkLGdCQUFVO0FBTEksR0F4SEw7QUErSGJFLG9CQUFrQixFQUFFO0FBQ2hCTixNQUFFLEVBQUUsb0JBRFk7QUFFaEJDLFFBQUksRUFBRSxRQUZVO0FBR2hCQyxVQUFNLEVBQUUzQixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCMEIsaUJBQXpCLENBQTJDLG9FQUEzQyxFQUFpSCxvQkFBakgsQ0FIUTtBQUloQkMsU0FBSyxFQUFFLDBCQUpTO0FBS2hCLGdCQUFVO0FBTE0sR0EvSFA7QUFzSWJHLGtCQUFnQixFQUFFO0FBQ2RQLE1BQUUsRUFBRSxrQkFEVTtBQUVkQyxRQUFJLEVBQUUsUUFGUTtBQUdkQyxVQUFNLEVBQUUzQixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCMEIsaUJBQXpCLENBQTJDLG9FQUEzQyxFQUFpSCxLQUFqSCxDQUhNO0FBSWRDLFNBQUssRUFBRSx3QkFKTztBQUtkLGdCQUFVO0FBTEksR0F0SUw7QUE2SWJJLHFCQUFtQixFQUFFO0FBQ2pCUixNQUFFLEVBQUUscUJBRGE7QUFFakJDLFFBQUksRUFBRSxRQUZXO0FBR2pCQyxVQUFNLEVBQUUzQixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCMEIsaUJBQXpCLENBQTJDLG9FQUEzQyxFQUFpSCxxQkFBakgsQ0FIUztBQUlqQkMsU0FBSyxFQUFFLDBCQUpVO0FBS2pCLGdCQUFVO0FBTE8sR0E3SVI7QUFvSmJLLHFCQUFtQixFQUFFO0FBQ2pCVCxNQUFFLEVBQUUscUJBRGE7QUFFakJDLFFBQUksRUFBRSxRQUZXO0FBR2pCQyxVQUFNLEVBQUUzQixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCMEIsaUJBQXpCLENBQTJDLG9FQUEzQyxFQUFpSCxxQkFBakgsQ0FIUztBQUlqQkMsU0FBSyxFQUFFLDBCQUpVO0FBS2pCLGdCQUFVO0FBTE8sR0FwSlI7QUE0SmI7QUFFQU0sbUJBQWlCLEVBQUU7QUFDZlYsTUFBRSxFQUFFLG1CQURXO0FBRWZDLFFBQUksRUFBRSxRQUZTO0FBR2ZDLFVBQU0sRUFBRTtBQUNKLGNBQVEsUUFESjtBQUVKLGVBQVMsQ0FBQywyRkFBRCxDQUZMO0FBR0oscUJBQWU7QUFIWCxLQUhPO0FBUWZFLFNBQUssRUFBR3pCLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQixrQ0FBaEIsQ0FSTztBQVNmLGdCQUFVVSxTQUFTLENBQUMsNEZBQ2hCLHNIQURnQixHQUVoQiw4SEFGZ0IsR0FHaEIsNkJBSGU7QUFUSixHQTlKTjtBQTRLYnFCLFlBQVUsRUFBRTtBQUNSWCxNQUFFLEVBQUUsWUFESTtBQUVSQyxRQUFJLEVBQUUsUUFGRTtBQUdSQyxVQUFNLEVBQUM7QUFDSCxjQUFRLFFBREw7QUFFSCxlQUFTLENBQUMscUdBQUQsQ0FGTjtBQUdIO0FBQ0EscUJBQWU7QUFKWixLQUhDO0FBU1JFLFNBQUssRUFBRSxzQkFUQztBQVVSLGdCQUFVZCxTQUFTLENBQUMsOEhBQ2hCLDZLQURnQixHQUVoQix5TkFGZ0IsR0FHaEIsNEdBSGU7QUFWWCxHQTVLQztBQTJMYnNCLGFBQVcsRUFBRTtBQUNUWixNQUFFLEVBQUUsYUFESztBQUVUQyxRQUFJLEVBQUUsUUFGRztBQUdUQyxVQUFNLEVBQUM7QUFDSCxjQUFRLFFBREw7QUFFSCxlQUFTLENBQUMscUdBQUQsQ0FGTjtBQUdILHFCQUFlO0FBSFosS0FIRTtBQVFURSxTQUFLLEVBQUUsNkJBUkU7QUFTVCxnQkFBVWQsU0FBUyxDQUFDLDhIQUNoQiw2S0FEZ0IsR0FFaEIseU5BRmdCLEdBR2hCLDRHQUhlO0FBVFYsR0EzTEE7QUF5TWJ1QixhQUFXLEVBQUU7QUFDVGIsTUFBRSxFQUFFLGFBREs7QUFFVEMsUUFBSSxFQUFFLFFBRkc7QUFHVEMsVUFBTSxFQUFDO0FBQ0gsY0FBUSxRQURMO0FBRUgsZUFBUyxDQUFDLHFHQUFELENBRk47QUFHSCxxQkFBZTtBQUhaLEtBSEU7QUFRVEUsU0FBSyxFQUFFLDZCQVJFO0FBU1QsZ0JBQVVkLFNBQVMsQ0FBQyw4SEFDaEIsNktBRGdCLEdBRWhCLHlOQUZnQixHQUdoQiw0R0FIZTtBQVRWLEdBek1BO0FBdU5id0IsZUFBYSxFQUFFO0FBQ1hkLE1BQUUsRUFBRSxlQURPO0FBRVhDLFFBQUksRUFBRSxRQUZLO0FBR1hDLFVBQU0sRUFBRTtBQUNKLGNBQVEsUUFESjtBQUVKLGVBQVMsQ0FBQyxvR0FBRCxDQUZMO0FBR0oscUJBQWU7QUFIWCxLQUhHO0FBUVhFLFNBQUssRUFBRSwwQ0FSSTtBQVNYLGdCQUFVZCxTQUFTLENBQUMscUlBQ2hCLHNHQURlO0FBVFIsR0F2TkY7QUFvT2I7QUFDQXlCLGNBQVksRUFBR3hDLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLEdBQXpCLENBQTZCLGNBQTdCLEVBQTZDLElBQTdDLEVBQW1ELElBQW5ELENBck9GO0FBdU9ic0MsYUFBVyxFQUFFekMsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QndDLG1CQUF6QixDQUE2QyxhQUE3QyxFQUE0RCxJQUE1RCxFQUFrRSxNQUFsRSxFQUEwRTtBQUNuRixrQkFDSSxDQUFDLE1BQUQsRUFDSSxDQUFDLFNBQUQsRUFBWSxDQUFDLGVBQUQsRUFBa0IsT0FBbEIsQ0FBWixFQUF3QyxLQUF4QyxDQURKLEVBQ29ELDBCQURwRCxFQUVJLHdCQUZKLENBRitFO0FBTW5GLDBCQUFzQjtBQU42RCxHQUExRSxDQXZPQTtBQWdQYkMsV0FBUyxFQUFFM0MsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QndDLG1CQUF6QixDQUE2QyxXQUE3QyxFQUEwRCxJQUExRCxFQUFnRSxNQUFoRSxFQUF3RTtBQUMvRSxrQkFDSSxDQUFDLE1BQUQsRUFDSSxDQUFDLFNBQUQsRUFBWSxDQUFDLGVBQUQsRUFBa0IsT0FBbEIsQ0FBWixFQUF3QyxLQUF4QyxDQURKLEVBQ29ELDBCQURwRCxFQUVJLHdCQUZKLENBRjJFO0FBTS9FLDBCQUFzQjtBQU55RCxHQUF4RSxFQVFYLFdBUlcsQ0FoUEU7QUEwUGJFLFlBQVUsRUFBRTVDLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJ3QyxtQkFBekIsQ0FBNkMsWUFBN0MsRUFBMkR0QyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0IsbUNBQWhCLEVBQXFELENBQXJELENBQTNELEVBQW9ILE1BQXBILEVBQTRIO0FBQ3BJLGtCQUFjLGtCQURzSDtBQUVwSSxvQkFDSSxDQUFDLE1BQUQsRUFDSSxDQUFDLFNBQUQsRUFBWSxDQUFDLGVBQUQsRUFBa0IsT0FBbEIsQ0FBWixFQUF3QyxLQUF4QyxDQURKLEVBQ29ELEdBRHBELEVBRUksR0FGSjtBQUhnSSxHQUE1SCxDQTFQQztBQWtRYndDLEtBQUcsRUFBRTdDLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJ3QyxtQkFBekIsQ0FBNkMsS0FBN0MsRUFBb0R0QyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0IsNEJBQWhCLEVBQThDLENBQTlDLENBQXBELEVBQXNHLE1BQXRHLEVBQThHO0FBQy9HLGtCQUFjLGtCQURpRztBQUUvRyxvQkFDSSxDQUFDLE1BQUQsRUFDSSxDQUFDLFNBQUQsRUFBWSxDQUFDLGVBQUQsRUFBa0IsT0FBbEIsQ0FBWixFQUF3QyxLQUF4QyxDQURKLEVBQ29ELEdBRHBELEVBRUksR0FGSjtBQUgyRyxHQUE5RyxFQU9GLElBUEUsRUFPSSxTQVBKLENBbFFRO0FBMFFieUMsYUFBVyxFQUFFOUMsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QndDLG1CQUF6QixDQUE2QyxhQUE3QyxFQUE0RHRDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQixvQ0FBaEIsRUFBc0QsQ0FBdEQsQ0FBNUQsRUFBc0gsTUFBdEgsRUFBOEg7QUFDdkksa0JBQWMsbUJBRHlIO0FBRXZJLG9CQUNJLENBQUMsTUFBRCxFQUNJLENBQUMsU0FBRCxFQUFZLENBQUMsZUFBRCxFQUFrQixPQUFsQixDQUFaLEVBQXdDLEtBQXhDLENBREosRUFDb0QsR0FEcEQsRUFFSSxHQUZKO0FBSG1JLEdBQTlILENBMVFBO0FBa1JiMEMsaUJBQWUsRUFBRS9DLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJ3QyxtQkFBekIsQ0FBNkMsaUJBQTdDLEVBQWdFdEMsTUFBTSxDQUFDQyxRQUFQLENBQWdCLHdDQUFoQixFQUEwRCxDQUExRCxDQUFoRSxFQUE4SCxNQUE5SCxFQUFzSTtBQUNuSixrQkFBYyxpQkFEcUk7QUFFbkosb0JBQ0ksQ0FBQyxNQUFELEVBQ0ksQ0FBQyxTQUFELEVBQVksQ0FBQyxlQUFELEVBQWtCLE9BQWxCLENBQVosRUFBd0MsS0FBeEMsQ0FESixFQUNvRCxHQURwRCxFQUVJLEdBRko7QUFIK0ksR0FBdEksRUFRakIsaUJBUmlCLEVBUUUsWUFSRjtBQWxSSixDQUFqQiIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHMvanMvbWFwcGluZ19tYXBib3gvbGF5ZXJzLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICAvLyAjIyMjIyMjIyMjICBSYXN0ZXJzICAjIyMjIyMjIyMjXG5cbiAgICBjb21pZmFjOiAgd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnY29taWZhYycsIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMuY29taWZhYycpLHRydWUsIHtcbiAgICAgICAgYXR0cmlidXRpb246ICc8ZGl2IHN0eWxlPVwid2lkdGg6IDgwMHB4O1wiPicgK1xuICAgICAgICAgICAgJzxiPkltYWdlIHNvdXJjZSBkZSBiYXNlIDo8L2I+IFZlcmhlZ2doZW4sIEEuLCBNYXlhdXgsIFAuLCBkZSBXYXNzZWlnZSwgQy4sIGFuZCBEZWZvdXJueSwgUC46ICcgK1xuICAgICAgICAgICAgJ01hcHBpbmcgQ29uZ28gQmFzaW4gdmVnZXRhdGlvbiB0eXBlcyBmcm9tIDMwMCBtIGFuZCAxIGttIG11bHRpLXNlbnNvciB0aW1lIHNlcmllcyBmb3IgY2FyYm9uIHN0b2NrcycgK1xuICAgICAgICAgICAgJyBhbmQgZm9yZXN0IGFyZWFzIGVzdGltYXRpb24sIEJpb2dlb3NjaWVuY2VzLCA5LCA1MDYxLTUwNzksIGRvaToxMC41MTk0L2JnLTktNTA2MS0yMDEyLCAyMDEyLiAnICtcbiAgICAgICAgICAgICc8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly93d3cuYmlvZ2Vvc2NpZW5jZXMubmV0LzkvNTA2MS8yMDEyL2JnLTktNTA2MS0yMDEyLmh0bWxcIj5iaW9nZW9zY2llbmNlcy5uZXQ8L2E+JytcbiAgICAgICAgICAgICc8YnIvPjxiPkRvbm7DqWVzIHNvdXJjZXMgYWpvdXTDqWVzIDo8L2I+IFNSVE0gZGUgbGEgTmFzYSwgT1NNIGV0IE9GQUMnK1xuICAgICAgICAgICAgJzxici8+PGI+VHJhaXTDqWUgOjwvYj4gTWFpIDIwMTUsIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCIvZG9jcy9hdGxhcy9tYXBzdGVwcy5wZGZcIj5FdGFwZXMgZGUgcsOpYWxpc2F0aW9uPC9hPjwvZGl2PicsXG4gICAgfSksXG4gICAgc3BvdHZndDogIHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC53bXMoJ3Nwb3R2Z3QnLCBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcubGF5ZXJzLnNwb3R2Z3QnKSwgdHJ1ZSksXG4gICAgbW9kaXM6ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdtb2RpcycsIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubW9kaXMnKSwgdHJ1ZSksXG4gICAgc3J0bTogIHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC53bXMoJ3NydG0nLCBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcubGF5ZXJzLnNydG0nKSwgdHJ1ZSksXG4gICAgZ2xjMjAwMDogIHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC53bXMoJ2dsYzIwMDAnLCBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcubGF5ZXJzLmdsYzIwMDAnKSwgdHJ1ZSksXG4gICAgY29uZ29fYmFzaW5fdmVnZXRhdGlvbl9tYXA6ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdjb25nb19iYXNpbl92ZWdldGF0aW9uX21hcCcsIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMuY29uZ29fYmFzaW5fdmVnZXRhdGlvbl9tYXAnKSwgdHJ1ZSksXG4gICAgdG90YWxfY2FyYm9uOiAgd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygndG90YWxfY2FyYm9uJywgTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLmxheWVycy50b3RhbF9jYXJib24nKSwgdHJ1ZSksXG5cbiAgICBsYW5kc2NhcGVzX2ZvcmVzdF9sb3NzX21hc2tlZDogIHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC53bXMoJ2xhbmRzY2FwZXNfZm9yZXN0X2xvc3NfbWFza2VkJyxcbiAgICAgICAgTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLmxheWVycy5sYW5kc2NhcGVzX2ZvcmVzdF9sb3NzX21hc2tlZCcpLCBmYWxzZSwge1xuICAgICAgICAgICAgYWJzdHJhY3Q6ICdGcm9tIHRoZSA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cHM6Ly9lYXJ0aGVuZ2luZXBhcnRuZXJzLmFwcHNwb3QuY29tL3NjaWVuY2UtMjAxMy1nbG9iYWwtZm9yZXN0L2Rvd25sb2FkX3YxLjcuaHRtbFwiPicgK1xuICAgICAgICAgICAgICAgICdMb3NzeWVhciBIYW5zZW4gbWFwPC9hPiBtYXNrZWQgYnkgdGhlIGZvcmVzdCBwcmVzZW5jZSBpbiAyMDAwJ1xuICAgICAgICB9KSxcbiAgICBsYW5kc2NhcGVzX2ZvcmVzdF9tYXNrOiAgd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnbGFuZHNjYXBlc19mb3Jlc3RfbWFzaycsXG4gICAgICAgIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGFuZHNjYXBlc19mb3Jlc3RfbWFzaycpLCBmYWxzZSwge1xuICAgICAgICAgICAgYWJzdHJhY3Q6IGVuY29kZVVSSSgnQ29tcHV0ZWQgd2l0aCB0aGUgRm9yZXN0IDIwMDAgSGFuc2VuIG1hcCwgRm9yZXN0IGNvdmVyIG1vcmUgdGhhbiAzMCUgd2FzIHJldGFpbiBhcyBmb3Jlc3QgdGhyZXNob2xkJyksXG4gICAgICAgICAgICBsZWdlbmQ6IFtcbiAgICAgICAgICAgICAgICB7J2NvbG9yJzogJyM1QkNENTknLCAnbGFiZWwnOiAnRm9yZXN0J31cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSksXG4gICAgbGFuZHNjYXBlc19sYzMwMF8xOTk1XzIwMTU6ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdsYW5kc2NhcGVzX2xjMzAwXzE5OTVfMjAxNScsXG4gICAgICAgIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGFuZHNjYXBlc19sYzMwMF8xOTk1XzIwMTUnKSwgZmFsc2UsIHtcbiAgICAgICAgICAgIGFic3RyYWN0OiAnU291cmNlOiBFU0EtQ0NJLCA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL3d3dy5lc2EtbGFuZGNvdmVyLWNjaS5vcmcvXCI+aHR0cDovL3d3dy5lc2EtbGFuZGNvdmVyLWNjaS5vcmcvPC9hPicsXG4gICAgICAgICAgICBsZWdlbmQ6W1xuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnIzBlN2EwNCcsICdsYWJlbCc6ICdDdWx0aXZhdGVkIHRvIE5hdHVyYWwgYXJlYXMnfSxcbiAgICAgICAgICAgICAgICB7J2NvbG9yJzogJyMyMGI0YTUnLCAnbGFiZWwnOiAnQ3VsdGl2YXRlZCBhcmVhcyB0byBXYXRlcid9LFxuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnI2ViNmQ4MicsICdsYWJlbCc6ICdNb3NhaWMgTmF0L0N1bHQgdG8gQ3VsdGl2YXRlZCBhcmVhcyd9LFxuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnIzNkYjYxMScsICdsYWJlbCc6ICdNb3NhaWMgTmF0L0N1bHQgdG8gTmF0dXJhbCBhcmVhcyd9LFxuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnIzFhYWVlZCcsICdsYWJlbCc6ICdNb3NhaWMgTmF0L0N1bHQgYXJlYXMgdG8gV2F0ZXInfSxcbiAgICAgICAgICAgICAgICB7J2NvbG9yJzogJyNlNjA5MWInLCAnbGFiZWwnOiAnTmF0dXJhbCB0byBDdWx0aXZhdGVkIGFyZWFzJ30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjZWY3NzA3JywgJ2xhYmVsJzogJ05hdHVyYWwgdG8gTW9zYWljIE5hdC9DdWx0IGFyZWFzJ30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjM2M3NWM5JywgJ2xhYmVsJzogJ05hdHVyYWwgYXJlYXMgdG8gV2F0ZXInfSxcbiAgICAgICAgICAgICAgICB7J2NvbG9yJzogJyNmYmI0NTEnLCAnbGFiZWwnOiAnV2F0ZXIvU25vdyB0byBDdWx0aXZhdGVkIGFyZWFzJ30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjZGZlZjYxJywgJ2xhYmVsJzogJ1dhdGVyL1Nub3cgdG8gTW9zYWljIE5hdC9DdWx0IGFyZWFzJ30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjMDBjZDdlJywgJ2xhYmVsJzogJ1dhdGVyL1Nub3cgdG8gTmF0dXJhbCBhcmVhcyd9LFxuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnI2FmODM1NCcsICdsYWJlbCc6ICdDdWx0aXZhdGVkIHRvIE1vc2FpYyBOYXQvQ3VsdCBhcmVhcyd9LFxuICAgICAgICAgICAgXVxuICAgICAgICB9KSxcbiAgICBsYW5kc2NhcGVzX2xjMzAwXzIwMTVfMjAxODogIHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC53bXMoJ2xhbmRzY2FwZXNfbGMzMDBfMjAxNV8yMDE4JyxcbiAgICAgICAgTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLmxheWVycy5sYW5kc2NhcGVzX2xjMzAwXzIwMTVfMjAxOCcpLCBmYWxzZSwge1xuICAgICAgICAgICAgYWJzdHJhY3Q6ICdTb3VyY2U6IEVTQS1DQ0ksIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vd3d3LmVzYS1sYW5kY292ZXItY2NpLm9yZy9cIj5odHRwOi8vd3d3LmVzYS1sYW5kY292ZXItY2NpLm9yZy88L2E+JyxcbiAgICAgICAgICAgIGxlZ2VuZDpbXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjMGU3YTA0JywgJ2xhYmVsJzogJ0N1bHRpdmF0ZWQgdG8gTmF0dXJhbCBhcmVhcyd9LFxuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnIzIwYjRhNScsICdsYWJlbCc6ICdDdWx0aXZhdGVkIGFyZWFzIHRvIFdhdGVyJ30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjZWI2ZDgyJywgJ2xhYmVsJzogJ01vc2FpYyBOYXQvQ3VsdCB0byBDdWx0aXZhdGVkIGFyZWFzJ30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjM2RiNjExJywgJ2xhYmVsJzogJ01vc2FpYyBOYXQvQ3VsdCB0byBOYXR1cmFsIGFyZWFzJ30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjMWFhZWVkJywgJ2xhYmVsJzogJ01vc2FpYyBOYXQvQ3VsdCBhcmVhcyB0byBXYXRlcid9LFxuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnI2U2MDkxYicsICdsYWJlbCc6ICdOYXR1cmFsIHRvIEN1bHRpdmF0ZWQgYXJlYXMnfSxcbiAgICAgICAgICAgICAgICB7J2NvbG9yJzogJyNlZjc3MDcnLCAnbGFiZWwnOiAnTmF0dXJhbCB0byBNb3NhaWMgTmF0L0N1bHQgYXJlYXMnfSxcbiAgICAgICAgICAgICAgICB7J2NvbG9yJzogJyMzYzc1YzknLCAnbGFiZWwnOiAnTmF0dXJhbCBhcmVhcyB0byBXYXRlcid9LFxuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnI2ZiYjQ1MScsICdsYWJlbCc6ICdXYXRlci9Tbm93IHRvIEN1bHRpdmF0ZWQgYXJlYXMnfSxcbiAgICAgICAgICAgICAgICB7J2NvbG9yJzogJyNkZmVmNjEnLCAnbGFiZWwnOiAnV2F0ZXIvU25vdyB0byBNb3NhaWMgTmF0L0N1bHQgYXJlYXMnfSxcbiAgICAgICAgICAgICAgICB7J2NvbG9yJzogJyMwMGNkN2UnLCAnbGFiZWwnOiAnV2F0ZXIvU25vdyB0byBOYXR1cmFsIGFyZWFzJ30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjYWY4MzU0JywgJ2xhYmVsJzogJ0N1bHRpdmF0ZWQgdG8gTW9zYWljIE5hdC9DdWx0IGFyZWFzJ30sXG4gICAgICAgICAgICBdXG4gICAgICAgIH0pLFxuICAgIGxhbmRzY2FwZXNfYWJvdmVfZ3JvdW5kX2NhcmJvbjogIHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC53bXMoJ2xhbmRzY2FwZXNfYWJvdmVfZ3JvdW5kX2NhcmJvbicsXG4gICAgICAgIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGFuZHNjYXBlc19hYm92ZV9ncm91bmRfY2FyYm9uJyksIGZhbHNlLHtcbiAgICAgICAgYWJzdHJhY3Q6ICdBYm92ZSBHcm91bmQgQ2FyYm9uICogMC41IChjb252ZXJzaW9uIGZhY3RvciAoQmlvbWFzcy0+IENhcmJvbikpLiBXYXRlciBoYXZlIGJlZW4gY29udmVydGVkIGluIFwiTm9EYXRhXCIuIDxiciAvPicgK1xuICAgICAgICAgICAgJ1NhbnRvcm8sIE0uLCBDYXJ0dXMsIE8uLCBNZXJtb3osIFMuLCBCb3V2ZXQsIEEuLCBMZSBUb2FuLCBULiwgQ2FydmFsaGFpcywgTi4sIFJvemVuZGFhbCwgRC4sICcgK1xuICAgICAgICAgICAgJ0hlcm9sZCwgTS4sIEF2aXRhYmlsZSwgVi4sIFF1ZWdhbiwgUy4sIENhcnJlaXJhcywgSi4sIFJhdXN0ZSwgWS4sIEJhbHp0ZXIsIEguLCBTY2htdWxsaXVzLCBDLiwgU2VpZmVydCwgRi5NLiwgMjAxOCwgJyArXG4gICAgICAgICAgICAnPGI+R2xvYkJpb21hc3MgZ2xvYmFsIGFib3ZlLWdyb3VuZCBiaW9tYXNzIGFuZCBncm93aW5nIHN0b2NrIHZvbHVtZSBkYXRhc2V0czwvYj4sIGF2YWlsYWJsZSBvbi1saW5lICcgK1xuICAgICAgICAgICAgJzxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwczovL2dsb2JiaW9tYXNzLm9yZy9wcm9kdWN0cy9nbG9iYWwtbWFwcGluZ1wiPmhlcmU8L2E+J1xuICAgIH0pLFxuICAgIGxhbmRzY2FwZXNfYmVsb3dfZ3JvdW5kX2NhcmJvbjogIHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC53bXMoJ2xhbmRzY2FwZXNfYmVsb3dfZ3JvdW5kX2NhcmJvbicsXG4gICAgICAgIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGFuZHNjYXBlc19iZWxvd19ncm91bmRfY2FyYm9uJyksIGZhbHNlLCB7XG4gICAgICAgICAgICBhYnN0cmFjdDogJ0Fib3ZlIEdyb3VuZCBDYXJib24gbWFwICogUiAoUm9vdCBmYWN0b3IgKFN0ZW0gQ2FyYm9uIC0+IFJvb3QgQ2FyYm9uKSkuIFRoZSBSIGZhY3RvciBkZWZpbmVkICcgK1xuICAgICAgICAgICAgICAgICdieSB0aGUgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmlwY2MtbmdnaXAuaWdlcy5vci5qcC9wdWJsaWMvMjAxOXJmL3BkZi80X1ZvbHVtZTQvMTlSX1Y0X0NoMDRfRm9yZXN0JTIwTGFuZC5wZGZcIj4nICtcbiAgICAgICAgICAgICAgICAnMjAxOSBSZWZpbmVtZW50IHRvIHRoZSAyMDA2IElQQ0MgR3VpZGVsaW5lcyBmb3IgTmF0aW9uYWwgR3JlZW5ob3VzZSBHYXMgSW52ZW50b3JpZXM8L2E+LidcbiAgICAgICAgfSksXG4gICAgbGFuZHNjYXBlc19zb2lsX29yZ2FuaWNfY2FyYm9uOiAgd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnbGFuZHNjYXBlc19zb2lsX29yZ2FuaWNfY2FyYm9uJyxcbiAgICAgICAgTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLmxheWVycy5sYW5kc2NhcGVzX3NvaWxfb3JnYW5pY19jYXJib24nKSwgZmFsc2Use1xuICAgICAgICAgICAgYWJzdHJhY3Q6ICc8Yj5HbG9iYWwgU29pbCBPcmdhbmljIENhcmJvbiBNYXAgKEdTT0NtYXApPC9iPiBmcm9tIEZBTyBhdmFpbGFibGUgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgJyArXG4gICAgICAgICAgICAgICAgJ2hyZWY9XCJodHRwOi8vNTQuMjI5LjI0Mi4xMTkvR1NPQ21hcC9cIj5oZXJlPC9hPidcbiAgICAgICAgfSksXG4gICAgbGFuZHNjYXBlc190b3RhbF9jYXJib246ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdsYW5kc2NhcGVzX3RvdGFsX2NhcmJvbicsXG4gICAgICAgIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGFuZHNjYXBlc190b3RhbF9jYXJib24nKSwgZmFsc2UsIHtcbiAgICAgICAgICAgIGFic3RyYWN0OiAnQWRkaXRpb24gb2YgdGhlIDxiPkFib3ZlIEdyb3VuZCBDYXJib248L2I+LCA8Yj5CZWxvdyBHcm91bmQgQ2FyYm9uPC9iPiBhbmQgPGI+U29pbCBPcmdhbmljIENhcmJvbiBtYXBzPC9iPidcbiAgICAgICAgfSksXG4gICAgbGFuZHNjYXBlc193YXRlcl90cmFuc2l0aW9uczogd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnbGFuZHNjYXBlc193YXRlcl90cmFuc2l0aW9ucycsXG4gICAgICAgIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGFuZHNjYXBlc193YXRlcl90cmFuc2l0aW9ucycpLCBmYWxzZSwge1xuICAgICAgICAgICAgYWJzdHJhY3Q6IGVuY29kZVVSSSgnSmVhbi1GcmFuY29pcyBQZWtlbCwgQW5kcmV3IENvdHRhbSwgTm9lbCBHb3JlbGljaywgQWxhbiBTLiBCZWx3YXJkLCA8Yj5IaWdoLXJlc29sdXRpb24gJyArXG4gICAgICAgICAgICAgICAgJ21hcHBpbmcgb2YgZ2xvYmFsIHN1cmZhY2Ugd2F0ZXIgYW5kIGl0cyBsb25nLXRlcm0gY2hhbmdlcy48L2I+IE5hdHVyZSA1NDAsIDQxOC00MjIgKDIwMTYpLiAoZG9pOjEwLjEwMzgvbmF0dXJlMjA1ODQpJyArXG4gICAgICAgICAgICAgICAgJzxiciAvPkFjY2Vzc2VkIHRocm91Z2ggPGEgaHJlZj1cImh0dHBzOi8vZ2xvYmFsLXN1cmZhY2Utd2F0ZXIuYXBwc3BvdC5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+R2xvYmFsIFN1cmZhY2UgV2F0ZXIgRXhwbG9yZXI8L2E+JyArXG4gICAgICAgICAgICAgICAgJzxiciAvPlNvdXJjZTogRUMgSlJDL0dvb2dsZScpLFxuICAgICAgICAgICAgbGVnZW5kOiBbXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjMDAwMGRkJywgJ2xhYmVsJzogJ1Blcm1hbmVudCd9LFxuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnIzIyYjE0YycsICdsYWJlbCc6ICdOZXcgUGVybWFuZW50J30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjOTMwNzNlJywgJ2xhYmVsJzogJ0xvc3QgUGVybWFuZW50J30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjOTlkOWVhJywgJ2xhYmVsJzogJ1NlYXNvbmFsJ30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjYjVlNjFkJywgJ2xhYmVsJzogJ05ldyBTZWFzb25hbCd9LFxuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnI2ZmOGIzNycsICdsYWJlbCc6ICdMb3N0IFNlYXNvbmFsJ30sXG4gICAgICAgICAgICAgICAgeydjb2xvcic6ICcjZmZkZDY2JywgJ2xhYmVsJzogJ1NlYXNvbmFsIHRvIFBlcm1hbmVudCd9LFxuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnI2ViYjRiYicsICdsYWJlbCc6ICdQZXJtYW5lbnQgdG8gU2Vhc29uYWwnfSxcbiAgICAgICAgICAgICAgICB7J2NvbG9yJzogJyM3ZjdmN2YnLCAnbGFiZWwnOiAnRXBoZW1lcmFsIFBlcm1hbmVudCd9LFxuICAgICAgICAgICAgICAgIHsnY29sb3InOiAnI2FjYWNhYycsICdsYWJlbCc6ICdFcGhlbWVyYWwgU2Vhc29uYWwnfVxuICAgICAgICAgICAgXVxuICAgICAgICB9KSxcblxuICAgIC8vICMjIyMjIyMjIyMgIERPUEEgUmVzb3VyY2VzICAjIyMjIyMjIyMjXG5cbiAgICBsYW5kX2NvdmVyOntcbiAgICAgICAgaWQ6ICdsYW5kX2NvdmVyJyxcbiAgICAgICAgdHlwZTogJ3Jhc3RlcicsXG4gICAgICAgIHNvdXJjZTogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF93bXNfc291cmNlKCdodHRwczovL2dlb3NwYXRpYWwuanJjLmVjLmV1cm9wYS5ldS9nZW9zZXJ2ZXIvZG9wYV9leHBsb3Jlcl8zL3dtcz8nLCAnbGFuZF9jb3Zlcl9jb3Blcm5pY3VzXzIwMTgnKSxcbiAgICAgICAgbGFiZWw6ICdDb3V2ZXJ0dXJlIGR1IFNvbCcsXG4gICAgICAgIGFic3RyYWN0OiAnJmNvcHk7IFNlcnZpY2VzIERPUEEnXG4gICAgfSxcbiAgICBsYW5kX2NvdmVyX2NoYW5nZTp7XG4gICAgICAgIGlkOiAnbGFuZF9jb3Zlcl9jaGFuZ2UnLFxuICAgICAgICB0eXBlOiAncmFzdGVyJyxcbiAgICAgICAgc291cmNlOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gubWFwYm94X3dtc19zb3VyY2UoJ2h0dHBzOi8vZ2Vvc3BhdGlhbC5qcmMuZWMuZXVyb3BhLmV1L2dlb3NlcnZlci9kb3BhX2V4cGxvcmVyXzMvd21zPycsICdMQ0NfMTk5NV8yMDE1JyksXG4gICAgICAgIGxhYmVsOiAnQ2hhbmdlbWVudCBkXFwnb2NjdXBhdGlvbiBkdSBzb2wnLFxuICAgICAgICBhYnN0cmFjdDogJyZjb3B5OyBTZXJ2aWNlcyBET1BBJ1xuICAgIH0sXG4gICAgbGFuZF9mcmFnbWVudGF0aW9uOiB7XG4gICAgICAgIGlkOiAnbGFuZF9mcmFnbWVudGF0aW9uJyxcbiAgICAgICAgdHlwZTogJ3Jhc3RlcicsXG4gICAgICAgIHNvdXJjZTogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF93bXNfc291cmNlKCdodHRwczovL2dlb3NwYXRpYWwuanJjLmVjLmV1cm9wYS5ldS9nZW9zZXJ2ZXIvZG9wYV9leHBsb3Jlcl8zL3dtcz8nLCAnbGFuZF9mcmFnbWVudGF0aW9uJyksXG4gICAgICAgIGxhYmVsOiAnRnJhZ21lbnRhdGlvbiBkZXMgdGVycmVzJyxcbiAgICAgICAgYWJzdHJhY3Q6ICcmY29weTsgU2VydmljZXMgRE9QQSdcbiAgICB9LFxuICAgIGxhbmRfZGVncmFkYXRpb246IHtcbiAgICAgICAgaWQ6ICdsYW5kX2RlZ3JhZGF0aW9uJyxcbiAgICAgICAgdHlwZTogJ3Jhc3RlcicsXG4gICAgICAgIHNvdXJjZTogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF93bXNfc291cmNlKCdodHRwczovL2dlb3NwYXRpYWwuanJjLmVjLmV1cm9wYS5ldS9nZW9zZXJ2ZXIvZG9wYV9leHBsb3Jlcl8zL3dtcz8nLCAnTFBEJyksXG4gICAgICAgIGxhYmVsOiAnRMOpZ3JhZGF0aW9uIGRlcyB0ZXJyZXMnLFxuICAgICAgICBhYnN0cmFjdDogJyZjb3B5OyBTZXJ2aWNlcyBET1BBJ1xuICAgIH0sXG4gICAgc29pbF9vcmdhbmljX2NhcmJvbjoge1xuICAgICAgICBpZDogJ3NvaWxfb3JnYW5pY19jYXJib24nLFxuICAgICAgICB0eXBlOiAncmFzdGVyJyxcbiAgICAgICAgc291cmNlOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gubWFwYm94X3dtc19zb3VyY2UoJ2h0dHBzOi8vZ2Vvc3BhdGlhbC5qcmMuZWMuZXVyb3BhLmV1L2dlb3NlcnZlci9kb3BhX2V4cGxvcmVyXzMvd21zPycsICdzb2lsX29yZ2FuaWNfY2FyYm9uJyksXG4gICAgICAgIGxhYmVsOiAnQ2FyYm9uZSBvcmdhbmlxdWUgZHUgc29sJyxcbiAgICAgICAgYWJzdHJhY3Q6ICcmY29weTsgU2VydmljZXMgRE9QQSdcbiAgICB9LFxuICAgIGFib3ZlX2dyb3VuZF9jYXJib246IHtcbiAgICAgICAgaWQ6ICdhYm92ZV9ncm91bmRfY2FyYm9uJyxcbiAgICAgICAgdHlwZTogJ3Jhc3RlcicsXG4gICAgICAgIHNvdXJjZTogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF93bXNfc291cmNlKCdodHRwczovL2dlb3NwYXRpYWwuanJjLmVjLmV1cm9wYS5ldS9nZW9zZXJ2ZXIvZG9wYV9leHBsb3Jlcl8zL3dtcz8nLCAnYWJvdmVfZ3JvdW5kX2NhcmJvbicpLFxuICAgICAgICBsYWJlbDogJ0NhcmJvbiBhdS1kZXNzb3VzIGR1IHNvbCcsXG4gICAgICAgIGFic3RyYWN0OiAnJmNvcHk7IFNlcnZpY2VzIERPUEEnXG4gICAgfSxcblxuICAgIC8vICMjIyMjIyMjIyMgIE90aGVyIEV4dGVybmFsIFJlc291cmNlcyAgIyMjIyMjIyMjI1xuXG4gICAgd2F0ZXJfdHJhbnNpdGlvbnM6IHtcbiAgICAgICAgaWQ6IFwid2F0ZXJfdHJhbnNpdGlvbnNcIixcbiAgICAgICAgdHlwZTogXCJyYXN0ZXJcIixcbiAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJyYXN0ZXJcIixcbiAgICAgICAgICAgIFwidGlsZXNcIjogW1wiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL2dsb2JhbC1zdXJmYWNlLXdhdGVyL3RpbGVzMjAxOS90cmFuc2l0aW9ucy97en0ve3h9L3t5fS5wbmdcIl0sXG4gICAgICAgICAgICBcImF0dHJpYnV0aW9uXCI6ICdTb3VyY2U6IEVDIEpSQy9Hb29nbGUnXG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsOiAgTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLmxheWVycy53YXRlcl90cmFuc2l0aW9ucycpLFxuICAgICAgICBhYnN0cmFjdDogZW5jb2RlVVJJKCdKZWFuLUZyYW5jb2lzIFBla2VsLCBBbmRyZXcgQ290dGFtLCBOb2VsIEdvcmVsaWNrLCBBbGFuIFMuIEJlbHdhcmQsIDxiPkhpZ2gtcmVzb2x1dGlvbiAnICtcbiAgICAgICAgICAgICdtYXBwaW5nIG9mIGdsb2JhbCBzdXJmYWNlIHdhdGVyIGFuZCBpdHMgbG9uZy10ZXJtIGNoYW5nZXMuPC9iPiBOYXR1cmUgNTQwLCA0MTgtNDIyICgyMDE2KS4gKGRvaToxMC4xMDM4L25hdHVyZTIwNTg0KScgK1xuICAgICAgICAgICAgJzxiciAvPkFjY2Vzc2VkIHRocm91Z2ggPGEgaHJlZj1cImh0dHBzOi8vZ2xvYmFsLXN1cmZhY2Utd2F0ZXIuYXBwc3BvdC5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+R2xvYmFsIFN1cmZhY2UgV2F0ZXIgRXhwbG9yZXI8L2E+JyArXG4gICAgICAgICAgICAnPGJyIC8+U291cmNlOiBFQyBKUkMvR29vZ2xlJylcbiAgICB9LFxuICAgIHRyZWVfY292ZXI6IHtcbiAgICAgICAgaWQ6ICd0cmVlX2NvdmVyJyxcbiAgICAgICAgdHlwZTogJ3Jhc3RlcicsXG4gICAgICAgIHNvdXJjZTp7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJyYXN0ZXJcIixcbiAgICAgICAgICAgIFwidGlsZXNcIjogW1wiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL2VhcnRoZW5naW5lcGFydG5lcnMtaGFuc2VuL3RpbGVzL2dmY192MS40L3RyZWVfYWxwaGEve3p9L3t4fS97eX0ucG5nXCJdLFxuICAgICAgICAgICAgLy9cInRpbGVzXCI6IFtcImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS93cmktcHVibGljL3RyZWVjb3Zlci8yMDEwL3t6fS97eH0ve3l9LnBuZ1wiXSxcbiAgICAgICAgICAgIFwiYXR0cmlidXRpb25cIjogXCJIYW5zZW4vVU1EL0dvb2dsZS9VU0dTL05BU0FcIlxuICAgICAgICB9LFxuICAgICAgICBsYWJlbDogJ1RyZWUgQ292ZXIgMjAwMC0yMDEwJyxcbiAgICAgICAgYWJzdHJhY3Q6IGVuY29kZVVSSSgnSGFuc2VuLCBNLiBDLiwgUC4gVi4gUG90YXBvdiwgUi4gTW9vcmUsIE0uIEhhbmNoZXIsIFMuIEEuIFR1cnViYW5vdmEsIEEuIFR5dWthdmluYSwgRC4gVGhhdSwgUy4gVi4gU3RlaG1hbiwgUy4gSi4gR29ldHosICcgK1xuICAgICAgICAgICAgJ1QuIFIuIExvdmVsYW5kLCBBLiBLb21tYXJlZGR5LCBBLiBFZ29yb3YsIEwuIENoaW5pLCBDLiBPLiBKdXN0aWNlLCBhbmQgSi4gUi4gRy4gVG93bnNoZW5kLiAyMDEzLiA8Yj7igJxIaWdoLVJlc29sdXRpb24gR2xvYmFsIE1hcHMgb2YgMjFzdC1DZW50dXJ5IEZvcmVzdCBDb3ZlciBDaGFuZ2Uu4oCdPC9iPiAnICtcbiAgICAgICAgICAgICdTY2llbmNlIDM0MiAoMTUgTm92ZW1iZXIpOiA4NTDigJM1My4gPGJyIC8+RGF0YSBhdmFpbGFibGUgb24tbGluZSBmcm9tOiA8YSBocmVmPVwiaHR0cHM6Ly9nbGFkLnVtZC5lZHUvZGF0YXNldC9nbG9iYWwtMjAxMC10cmVlLWNvdmVyLTMwLW1cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2dsYWQudW1kLmVkdS9kYXRhc2V0L2dsb2JhbC0yMDEwLXRyZWUtY292ZXItMzAtbTwvYT4uICcgK1xuICAgICAgICAgICAgJzxiciAvPkFjY2Vzc2VkIHRocm91Z2ggPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmdsb2JhbGZvcmVzdHdhdGNoLm9yZ1wiIHRhcmdldD1cIl9ibGFua1wiPkdsb2JhbCBGb3Jlc3QgV2F0Y2g8L2E+JylcbiAgICB9LFxuICAgIGZvcmVzdF9nYWluOiB7XG4gICAgICAgIGlkOiAnZm9yZXN0X2dhaW4nLFxuICAgICAgICB0eXBlOiAncmFzdGVyJyxcbiAgICAgICAgc291cmNlOntcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInJhc3RlclwiLFxuICAgICAgICAgICAgXCJ0aWxlc1wiOiBbXCJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vZWFydGhlbmdpbmVwYXJ0bmVycy1oYW5zZW4vdGlsZXMvZ2ZjX3YxLjQvZ2Fpbl9hbHBoYS97en0ve3h9L3t5fS5wbmdcIl0sXG4gICAgICAgICAgICBcImF0dHJpYnV0aW9uXCI6IFwiSGFuc2VuL1VNRC9Hb29nbGUvVVNHUy9OQVNBXCJcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6ICdGb3Jlc3QgY292ZXIgZ2FpbiAyMDAw4oCTMjAxMicsXG4gICAgICAgIGFic3RyYWN0OiBlbmNvZGVVUkkoJ0hhbnNlbiwgTS4gQy4sIFAuIFYuIFBvdGFwb3YsIFIuIE1vb3JlLCBNLiBIYW5jaGVyLCBTLiBBLiBUdXJ1YmFub3ZhLCBBLiBUeXVrYXZpbmEsIEQuIFRoYXUsIFMuIFYuIFN0ZWhtYW4sIFMuIEouIEdvZXR6LCAnICtcbiAgICAgICAgICAgICdULiBSLiBMb3ZlbGFuZCwgQS4gS29tbWFyZWRkeSwgQS4gRWdvcm92LCBMLiBDaGluaSwgQy4gTy4gSnVzdGljZSwgYW5kIEouIFIuIEcuIFRvd25zaGVuZC4gMjAxMy4gPGI+4oCcSGlnaC1SZXNvbHV0aW9uIEdsb2JhbCBNYXBzIG9mIDIxc3QtQ2VudHVyeSBGb3Jlc3QgQ292ZXIgQ2hhbmdlLuKAnTwvYj4gJyArXG4gICAgICAgICAgICAnU2NpZW5jZSAzNDIgKDE1IE5vdmVtYmVyKTogODUw4oCTNTMuIDxiciAvPkRhdGEgYXZhaWxhYmxlIG9uLWxpbmUgZnJvbTogPGEgaHJlZj1cImh0dHBzOi8vZ2xhZC51bWQuZWR1L2RhdGFzZXQvZ2xvYmFsLTIwMTAtdHJlZS1jb3Zlci0zMC1tXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9nbGFkLnVtZC5lZHUvZGF0YXNldC9nbG9iYWwtMjAxMC10cmVlLWNvdmVyLTMwLW08L2E+LiAnICtcbiAgICAgICAgICAgICc8YnIgLz5BY2Nlc3NlZCB0aHJvdWdoIDxhIGhyZWY9XCJodHRwczovL3d3dy5nbG9iYWxmb3Jlc3R3YXRjaC5vcmdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5HbG9iYWwgRm9yZXN0IFdhdGNoPC9hPicpXG4gICAgfSxcbiAgICBmb3Jlc3RfbG9zczoge1xuICAgICAgICBpZDogJ2ZvcmVzdF9sb3NzJyxcbiAgICAgICAgdHlwZTogJ3Jhc3RlcicsXG4gICAgICAgIHNvdXJjZTp7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJyYXN0ZXJcIixcbiAgICAgICAgICAgIFwidGlsZXNcIjogW1wiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL2VhcnRoZW5naW5lcGFydG5lcnMtaGFuc2VuL3RpbGVzL2dmY192MS43L2xvc3NfYWxwaGEve3p9L3t4fS97eX0ucG5nXCJdLFxuICAgICAgICAgICAgXCJhdHRyaWJ1dGlvblwiOiBcIkhhbnNlbi9VTUQvR29vZ2xlL1VTR1MvTkFTQVwiXG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsOiAnRm9yZXN0IGNvdmVyIGxvc3MgMjAwMOKAkzIwMTgnLFxuICAgICAgICBhYnN0cmFjdDogZW5jb2RlVVJJKCdIYW5zZW4sIE0uIEMuLCBQLiBWLiBQb3RhcG92LCBSLiBNb29yZSwgTS4gSGFuY2hlciwgUy4gQS4gVHVydWJhbm92YSwgQS4gVHl1a2F2aW5hLCBELiBUaGF1LCBTLiBWLiBTdGVobWFuLCBTLiBKLiBHb2V0eiwgJyArXG4gICAgICAgICAgICAnVC4gUi4gTG92ZWxhbmQsIEEuIEtvbW1hcmVkZHksIEEuIEVnb3JvdiwgTC4gQ2hpbmksIEMuIE8uIEp1c3RpY2UsIGFuZCBKLiBSLiBHLiBUb3duc2hlbmQuIDIwMTMuIDxiPuKAnEhpZ2gtUmVzb2x1dGlvbiBHbG9iYWwgTWFwcyBvZiAyMXN0LUNlbnR1cnkgRm9yZXN0IENvdmVyIENoYW5nZS7igJ08L2I+ICcgK1xuICAgICAgICAgICAgJ1NjaWVuY2UgMzQyICgxNSBOb3ZlbWJlcik6IDg1MOKAkzUzLiA8YnIgLz5EYXRhIGF2YWlsYWJsZSBvbi1saW5lIGZyb206IDxhIGhyZWY9XCJodHRwczovL2dsYWQudW1kLmVkdS9kYXRhc2V0L2dsb2JhbC0yMDEwLXRyZWUtY292ZXItMzAtbVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vZ2xhZC51bWQuZWR1L2RhdGFzZXQvZ2xvYmFsLTIwMTAtdHJlZS1jb3Zlci0zMC1tPC9hPi4gJyArXG4gICAgICAgICAgICAnPGJyIC8+QWNjZXNzZWQgdGhyb3VnaCA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZ2xvYmFsZm9yZXN0d2F0Y2gub3JnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+R2xvYmFsIEZvcmVzdCBXYXRjaDwvYT4nKVxuICAgIH0sXG4gICAgaW50YWN0X2ZvcmVzdDoge1xuICAgICAgICBpZDogXCJpbnRhY3RfZm9yZXN0XCIsXG4gICAgICAgIHR5cGU6IFwicmFzdGVyXCIsXG4gICAgICAgIHNvdXJjZToge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmFzdGVyXCIsXG4gICAgICAgICAgICBcInRpbGVzXCI6IFtcImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9lYXJ0aGVuZ2luZXBhcnRuZXJzLWhhbnNlbi90aWxlcy9pbnRhY3RfZm9yZXN0XzIwMTYve3p9L3t4fS97eX0ucG5nXCJdLFxuICAgICAgICAgICAgXCJhdHRyaWJ1dGlvblwiOiAnTWFwIHRpbGVzIGJ5IDxhIHRhcmdldD1cIl90b3BcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwczovL3N0YW1lbi5jb21cIj5TdGFtZW4gRGVzaWduPC9hPiwgdW5kZXIgPGEgdGFyZ2V0PVwiX3RvcFwiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHBzOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS8zLjBcIj5DQyBCWSAzLjA8L2E+LiBEYXRhIGJ5IDxhIHRhcmdldD1cIl90b3BcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwczovL29wZW5zdHJlZXRtYXAub3JnXCI+T3BlblN0cmVldE1hcDwvYT4sIHVuZGVyIDxhIHRhcmdldD1cIl90b3BcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwczovL2NyZWF0aXZlY29tbW9ucy5vcmcvbGljZW5zZXMvYnktc2EvMy4wXCI+Q0MgQlkgU0E8L2E+J1xuICAgICAgICB9LFxuICAgICAgICBsYWJlbDogJ0ludGFjdCBGb3Jlc3QgTGFuZHNjYXBlcyAoSUZMIDIwMDAtMjAxNiknLFxuICAgICAgICBhYnN0cmFjdDogZW5jb2RlVVJJKCdHcmVlbnBlYWNlLCBVbml2ZXJzaXR5IG9mIE1hcnlsYW5kLCBXb3JsZCBSZXNvdXJjZXMgSW5zdGl0dXRlIGFuZCBUcmFuc3BhcmVudCBXb3JsZC4g4oCcSW50YWN0IEZvcmVzdCBMYW5kc2NhcGVzLiAyMDAwLzIwMTMvMjAxNuKAnSAnICtcbiAgICAgICAgICAgICdBY2Nlc3NlZCB0aHJvdWdoIDxhIGhyZWY9XCJodHRwczovL3d3dy5nbG9iYWxmb3Jlc3R3YXRjaC5vcmdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5HbG9iYWwgRm9yZXN0IFdhdGNoPC9hPicpXG4gICAgfSxcblxuICAgIC8vICMjIyMjIyMjIyMgIE92ZXJsYXlzICAjIyMjIyMjIyMjXG4gICAgY29taWZhY19tYXNrOiAgd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnY29taWZhY19tYXNrJywgbnVsbCwgdHJ1ZSksXG5cbiAgICBjb21pZmFjX2Vlejogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF92ZWN0b3JfbGF5ZXIoJ2NvbWlmYWNfZWV6JywgbnVsbCwgJ2ZpbGwnLCB7XG4gICAgICAgICdmaWxsLWNvbG9yJzpcbiAgICAgICAgICAgIFtcImNhc2VcIixcbiAgICAgICAgICAgICAgICBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJob3ZlclwiXSwgZmFsc2VdLCAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICAgICAgICAgICAgICAncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAnZmlsbC1vdXRsaW5lLWNvbG9yJzogJ3JnYmEoNjAsIDE1MCwgMjU1LCAwLjgpJ1xuICAgIH0pLFxuXG4gICAgY291bnRyaWVzOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gubWFwYm94X3ZlY3Rvcl9sYXllcignY291bnRyaWVzJywgbnVsbCwgJ2ZpbGwnLCB7XG4gICAgICAgICdmaWxsLWNvbG9yJzpcbiAgICAgICAgICAgIFtcImNhc2VcIixcbiAgICAgICAgICAgICAgICBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJob3ZlclwiXSwgZmFsc2VdLCAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpJyxcbiAgICAgICAgICAgICAgICAncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScsXG4gICAgICAgICAgICBdLFxuICAgICAgICAnZmlsbC1vdXRsaW5lLWNvbG9yJzogJ3JnYmEoMCwgNTAsIDAsIDAuOCknXG4gICAgfSxcbiAgICAnY291bnRyaWVzJyksXG5cbiAgICBsYW5kc2NhcGVzOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gubWFwYm94X3ZlY3Rvcl9sYXllcignbGFuZHNjYXBlcycsIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5wbGF0Zm9ybS5zaXRlcy5sYW5kc2NhcGVzJywgMiksICdmaWxsJywge1xuICAgICAgICAnZmlsbC1jb2xvcic6ICdyZ2IoMjU1LCAyNTUsIDApJyxcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6XG4gICAgICAgICAgICBbXCJjYXNlXCIsXG4gICAgICAgICAgICAgICAgW1wiYm9vbGVhblwiLCBbXCJmZWF0dXJlLXN0YXRlXCIsIFwiaG92ZXJcIl0sIGZhbHNlXSwgMC44LFxuICAgICAgICAgICAgICAgIDAuNVxuICAgICAgICAgICAgXVxuICAgIH0pLFxuICAgIGtsYzogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF92ZWN0b3JfbGF5ZXIoJ2tsYycsIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5wbGF0Zm9ybS5zaXRlcy5rbGMnLCAyKSwgJ2ZpbGwnLCB7XG4gICAgICAgICdmaWxsLWNvbG9yJzogJ3JnYigyNTUsIDE1NSwgMCknLFxuICAgICAgICAnZmlsbC1vcGFjaXR5JzpcbiAgICAgICAgICAgIFtcImNhc2VcIixcbiAgICAgICAgICAgICAgICBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJob3ZlclwiXSwgZmFsc2VdLCAwLjgsXG4gICAgICAgICAgICAgICAgMC41XG4gICAgICAgICAgICBdXG4gICAgfSwgbnVsbCwgJzIwMjEtMDQnKSxcbiAgICBjb25jZXNzaW9uczogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF92ZWN0b3JfbGF5ZXIoJ2NvbmNlc3Npb25zJywgTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLnBsYXRmb3JtLnNpdGVzLmNvbmNlc3Npb25zJywgMiksICdmaWxsJywge1xuICAgICAgICAnZmlsbC1jb2xvcic6ICdyZ2IoMTYzLCAxMTMsIDY2KScsXG4gICAgICAgICdmaWxsLW9wYWNpdHknOlxuICAgICAgICAgICAgW1wiY2FzZVwiLFxuICAgICAgICAgICAgICAgIFtcImJvb2xlYW5cIiwgW1wiZmVhdHVyZS1zdGF0ZVwiLCBcImhvdmVyXCJdLCBmYWxzZV0sIDAuOCxcbiAgICAgICAgICAgICAgICAwLjVcbiAgICAgICAgICAgIF1cbiAgICB9KSxcbiAgICBwcm90ZWN0ZWRfYXJlYXM6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5tYXBib3hfdmVjdG9yX2xheWVyKCdwcm90ZWN0ZWRfYXJlYXMnLCBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcucGxhdGZvcm0uc2l0ZXMucHJvdGVjdGVkX2FyZWFzJywgMiksICdmaWxsJywge1xuICAgICAgICAnZmlsbC1jb2xvcic6ICdyZ2IoMCwgMTE1LCA0MCknLFxuICAgICAgICAnZmlsbC1vcGFjaXR5JzpcbiAgICAgICAgICAgIFtcImNhc2VcIixcbiAgICAgICAgICAgICAgICBbXCJib29sZWFuXCIsIFtcImZlYXR1cmUtc3RhdGVcIiwgXCJob3ZlclwiXSwgZmFsc2VdLCAwLjgsXG4gICAgICAgICAgICAgICAgMC41XG4gICAgICAgICAgICBdXG4gICAgfSxcbiAgICAncHJvdGVjdGVkX2FyZWFzJywgJzIwMjEtMDUtMDUnKVxuXG5cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/layers.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/mixins/api.mixin.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/mixins/api.mixin.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      api_cancel_token: null,\n      api_loading: false,\n      card_has_data: false,\n      api_data: {\n        forest_management: {\n          regional: null,\n          national: null,\n          concessions: null\n        },\n        biodiversity: {\n          regional: null,\n          national: null,\n          klc: null,\n          protected_areas: null\n        },\n        convergence_plan: {\n          regional: null\n        },\n        land_use: {\n          regional: null,\n          national: null\n        }\n      }\n    };\n  },\n  methods: {\n    // ##############################################\n    // ##########  Retrieve DATA from APIs ##########\n    // ##############################################\n    getCachedData: function getCachedData() {\n      if (this.level !== 'local') {\n        if (this.level === 'regional') {\n          return this.api_data[this.theme][this.level];\n        } else if (this.site !== null && this.api_data[this.theme][this.level] !== null && this.api_data[this.theme][this.level].hasOwnProperty(this.site)) {\n          return this.api_data[this.theme][this.level][this.site];\n        }\n      }\n\n      return null;\n    },\n    getDataAttribute: function getDataAttribute(attribute_path) {\n      var data = this.getCachedData();\n\n      if (data !== null) {\n        // return data[attribute_path];\n        var deepFind = function deepFind(data, attribute_path) {\n          var paths = attribute_path.split('.');\n          var current = data;\n\n          for (var i = 0; i < paths.length; ++i) {\n            if (!current.hasOwnProperty(paths[i])) {\n              return null;\n            } else {\n              current = current[paths[i]];\n            }\n          }\n\n          return current;\n        };\n\n        return deepFind(data, attribute_path);\n      }\n\n      return null;\n    },\n    getAPI: function getAPI(site) {\n      var _this = this;\n\n      this.site = site || null;\n      this.api_loading = true;\n      this.card_has_data = false;\n      this.selected_card = this.theme + '_' + this.level; // set API url\n\n      var url = this.level === 'regional' ? 'api/analysis/' + this.theme + '/' + this.level : 'api/analysis/' + this.theme + '/' + this.level + '/' + site; // set API responseCallback\n\n      var responseCallback = function responseCallback(response) {\n        // store response in api_data\n        if (_this.level === 'regional') {\n          _this.api_data[_this.theme][_this.level] = response;\n        } else {\n          _this.api_data[_this.theme][_this.level] = _this.api_data[_this.theme][_this.level] || {};\n          _this.api_data[_this.theme][_this.level][site] = response;\n        } // set related cards + button\n\n\n        Vue.nextTick(function () {\n          _this.selected_card = _this.theme + '_' + _this.level;\n          _this.card_has_data = true;\n          Vue.nextTick(function () {\n            var first_button = document.querySelectorAll('.card-api.card-' + _this.theme + '_' + _this.level + ' .selection:first-of-type')[0];\n\n            if (first_button) {\n              _this.selected_card_button = first_button.getAttribute('data-card-key');\n            }\n          });\n        });\n      };\n\n      this.__retrieveAPI(url, responseCallback);\n    },\n    __retrieveAPI: function __retrieveAPI(url, responseCallback) {\n      var _this = this; // Cancel previous API request if still running\n\n\n      if (this.api_cancel_token !== null) {\n        this.api_cancel_token();\n      } // Check and retrieve cached data (if any)\n\n\n      var cached = this.getCachedData();\n\n      if (cached !== null) {\n        console.log('Request to API not executed. Data retrieved from cache.');\n        responseCallback(JSON.parse(JSON.stringify(cached)));\n        this.finallyCallback();\n        return;\n      }\n\n      window.axios({\n        method: 'post',\n        url: window.Laravel.baseUrl + url,\n        data: {\n          _token: _this.csrf\n        },\n        cancelToken: new window.axios.CancelToken(function executor(c) {\n          _this.api_cancel_token = c;\n        })\n      }).then(function (response) {\n        console.log('Request to API executed');\n        responseCallback(response.data);\n      })[\"catch\"](function (error) {\n        if (window.axios.isCancel(error)) {\n          console.log('Request to API canceled. No more necessary', error.message);\n        } else {\n          console.log(error);\n        }\n      })[\"finally\"](function () {\n        _this.finallyCallback();\n      });\n    },\n    finallyCallback: function finallyCallback() {\n      this.api_cancel_token = null;\n      this.api_loading = false;\n      this.removeLayerPopup();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/mixins/api.mixin.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/mixins/layers/interactivity.mixin.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/mixins/layers/interactivity.mixin.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      hover_feature: [],\n      popup: null,\n      popup_features: [],\n      click_coords: null\n    };\n  },\n  methods: {\n    // #######################################################\n    // ######  Manage dynamic layers' interactivity  #########\n    // #######################################################\n    refreshInteractiveLayers: function refreshInteractiveLayers() {\n      // countries\n      this.showPopup('countries');\n      this.mouseOver('countries');\n      this.hoverOnRelatedLayer('countries', 'comifac_eez', 'iso3', 'ISO_Ter1');\n      this.setMask('countries', this.level === 'national' && this.site !== null, 'iso3', this.site); // eez\n\n      this.mouseOver('comifac_eez');\n      this.hoverOnRelatedLayer('comifac_eez', 'countries', 'ISO_Ter1', 'iso3');\n      this.setMask('comifac_eez', this.level === 'national' && this.site !== null, 'ISO_Ter1', this.site); // landscapes\n\n      this.showPopup('landscapes');\n      this.mouseOver('landscapes'); // landscapes klc\n\n      this.showPopup('klc');\n      this.mouseOver('klc'); // protected_areas\n\n      this.showPopup('protected_areas');\n      this.mouseOver('protected_areas');\n      this.setHighlight('protected_areas', this.level === 'national' && this.site !== null, 'country', this.site); // concessions\n\n      this.showPopup('concessions');\n      this.mouseOver('concessions');\n      this.setHighlight('concessions', this.level === 'national' && this.site !== null, 'country', this.site);\n    },\n    // ########  Highlight filtered features  ######\n    setHighlight: function setHighlight(layer_id, condition, filter_attribute, filter_value) {\n      if (this.layerIsOnMap(layer_id)) {\n        if (condition) {\n          this.addGrayedLayer(layer_id);\n          this.map.setFilter(layer_id, ['==', filter_attribute, filter_value]);\n          this.map.setFilter(this.__grayedLayerId(layer_id), ['!=', filter_attribute, filter_value]);\n        } else {\n          this.removeGrayedLayer(layer_id);\n          this.map.setFilter(layer_id, true);\n        }\n      } else {\n        this.removeGrayedLayer(layer_id);\n      }\n    },\n    __grayedLayerId: function __grayedLayerId(layer_id) {\n      return layer_id + '_grayed';\n    },\n    addGrayedLayer: function addGrayedLayer(layer_id) {\n      if (!this.layerIsOnMap(this.__grayedLayerId(layer_id))) {\n        this.map.addLayer({\n          'id': this.__grayedLayerId(layer_id),\n          'type': 'fill',\n          'source': layer_id,\n          'source-layer': layer_id,\n          'paint': {\n            \"fill-color\": 'rgba(180, 180, 180, 0.5)'\n          }\n        });\n      }\n    },\n    removeGrayedLayer: function removeGrayedLayer(layer_id) {\n      if (this.layerIsOnMap(this.__grayedLayerId(layer_id))) {\n        this.map.removeLayer(this.__grayedLayerId(layer_id));\n      }\n    },\n    // ########  Mask unwanted features  ######\n    setMask: function setMask(layer_id, condition, filter_attribute, filter_value) {\n      if (this.layerIsOnMap(layer_id)) {\n        if (filter_value !== null && condition) {\n          this.addMaskedLayer(layer_id);\n          this.map.setFilter(this.__maskedLayerId(layer_id), ['!=', filter_attribute, filter_value]);\n        } else {\n          this.removeMaskedLayer(layer_id);\n        }\n      } else {\n        this.removeMaskedLayer(layer_id);\n      }\n    },\n    __maskedLayerId: function __maskedLayerId(layer_id) {\n      return layer_id + '_masked';\n    },\n    addMaskedLayer: function addMaskedLayer(layer_id) {\n      if (!this.layerIsOnMap(this.__maskedLayerId(layer_id))) {\n        this.map.addLayer({\n          'id': this.__maskedLayerId(layer_id),\n          'type': 'fill',\n          'source': layer_id,\n          'source-layer': layer_id,\n          'paint': {\n            \"fill-color\": 'rgba(0, 0, 0, 0.5)',\n            \"fill-outline-color\": 'rgba(0, 0, 0, 0.5)'\n          }\n        });\n      }\n    },\n    removeMaskedLayer: function removeMaskedLayer(layer_id) {\n      if (this.layerIsOnMap(this.__maskedLayerId(layer_id))) {\n        this.map.removeLayer(this.__maskedLayerId(layer_id));\n      }\n    },\n    // ########  Highlight on mouse hover  ######\n    mouseOver: function mouseOver(layer_id) {\n      var _this = this;\n\n      if (_this.layerIsOnMap(layer_id)) {\n        _this.hover_feature[layer_id] = _this.hover_feature[layer_id] || [];\n        this.map.on('mousemove', layer_id, function (evt) {\n          if (!_this.hover_feature[layer_id].includes(evt.features[0].id)) {\n            _this.hover_feature[layer_id].forEach(function (feature_id) {\n              _this._featureHoverOff(layer_id, feature_id);\n            });\n\n            _this._featureHoverOn(layer_id, evt.features[0].id);\n          }\n        });\n        this.map.on('mouseleave', layer_id, function () {\n          _this.hover_feature[layer_id].forEach(function (feature_id) {\n            _this._featureHoverOff(layer_id, feature_id);\n          });\n        });\n      }\n    },\n    __setFeatureHover: function __setFeatureHover(feature_id, layer_id, hover) {\n      this.map.setFeatureState({\n        source: layer_id,\n        sourceLayer: layer_id,\n        id: feature_id\n      }, {\n        hover: hover\n      });\n    },\n    _featureHoverOn: function _featureHoverOn(layer_id, feature_id) {\n      this.hover_feature[layer_id].push(feature_id);\n\n      this.__setFeatureHover(feature_id, layer_id, true);\n\n      this.map.getCanvas().style.cursor = 'pointer';\n    },\n    _featureHoverOff: function _featureHoverOff(layer_id, feature_id) {\n      if (this.hover_feature[layer_id].includes(feature_id)) {\n        this.__setFeatureHover(feature_id, layer_id, false);\n\n        this.map.getCanvas().style.cursor = '';\n        this.hover_feature[layer_id].splice(this.hover_feature[layer_id].indexOf(feature_id), 1);\n      }\n    },\n    hoverOnRelatedLayer: function hoverOnRelatedLayer(hover_layer_id, related_layer_id, hover_layer_filter_attribute, related_layer_filter_attribute) {\n      var _this = this;\n\n      if (_this.layerIsOnMap(hover_layer_id) && _this.layerIsOnMap(related_layer_id)) {\n        _this.hover_feature[hover_layer_id] = _this.hover_feature[hover_layer_id] || [];\n        _this.hover_feature[related_layer_id] = _this.hover_feature[related_layer_id] || [];\n        this.map.on('mousemove', hover_layer_id, function (evt) {\n          var related_features_ids = _this.map.querySourceFeatures(related_layer_id, {\n            sourceLayer: related_layer_id,\n            filter: ['==', related_layer_filter_attribute, evt.features[0].properties[hover_layer_filter_attribute]]\n          }).map(function (_ref) {\n            var id = _ref.id;\n            return id;\n          });\n\n          _this.hover_feature[related_layer_id].forEach(function (feature_id) {\n            if (!related_features_ids.includes(feature_id)) {\n              _this._featureHoverOff(related_layer_id, feature_id);\n            }\n          });\n\n          related_features_ids.forEach(function (feature_id) {\n            if (!_this.hover_feature[related_layer_id].includes(feature_id)) {\n              _this._featureHoverOn(related_layer_id, feature_id);\n            }\n          });\n        });\n        this.map.on('mouseleave', hover_layer_id, function () {\n          _this.hover_feature[related_layer_id].forEach(function (feature_id) {\n            _this._featureHoverOff(related_layer_id, feature_id);\n          });\n        });\n      }\n    },\n    // ########  Popup  ######\n    showPopup: function showPopup(layer_id) {\n      var _this = this;\n\n      if (_this.layerIsOnMap(layer_id)) {\n        _this.map.on('click', layer_id, function (evt) {\n          _this.removeLayerPopup(evt); // Collect all clicked features\n\n\n          _this.click_coords = evt.lngLat;\n          evt.features.forEach(function (feature) {\n            var ids = _this.popup_features.map(function (a) {\n              return a.id;\n            });\n\n            if (!ids.includes(feature.id)) {\n              _this.popup_features.push(feature);\n            }\n          }); // Build popUp content\n\n          var popup_content = '';\n\n          _this.popup_features.forEach(function (feature, feature_index) {\n            popup_content += '<div class=\"popup-item\" id=\"popup-item_' + feature_index + '\">' + _this.featurePopupDescription(feature) + _this.featurePopupActions(feature) + '</div>';\n          });\n\n          _this.popup = new window.mapboxgl.Popup().setLngLat(evt.lngLat).setHTML(popup_content).addTo(_this.map); // Add manually the EventListener. v-on directive on button added by mapboxgl.Popup (after VUeJS render) does not work.\n\n          document.querySelectorAll('.mapboxgl-popup .popup-item').forEach(function (popup_item) {\n            var popup_features_index = popup_item.id.replace('popup-item_', '');\n            var button = popup_item.querySelector('button.getAPI');\n\n            if (button !== null) {\n              button.addEventListener('click', function (event) {\n                var feature = _this.popup_features[popup_features_index];\n\n                _this.zoomToFeature(feature);\n\n                _this.getAPI(feature.id);\n              });\n            }\n          });\n        });\n      }\n    },\n    removeLayerPopup: function removeLayerPopup() {\n      var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (this.popup !== null) {\n        this.popup.remove();\n      }\n\n      this.popup = null;\n\n      if (evt === null || this.click_coords != null && this.click_coords !== evt.lngLat) {\n        this.popup_features = [];\n      }\n    },\n    featurePopupDescription: function featurePopupDescription(feature) {\n      // console.log(feature.properties);\n      if (feature.layer.id === 'countries') {\n        return '<i>' + this.Locale.getLabel('mapping.platform.sites.countries', 1) + '</i><br />' + '<b class=\"green\">' + feature.properties.name_fr + '</b>';\n      } else {\n        return '<i>' + this.Locale.getLabel('mapping.platform.sites.' + feature.layer.id, 1) + '</i><br />' + '<b class=\"green\">' + feature.properties.name + '</b>';\n      }\n    },\n    featurePopupActions: function featurePopupActions(feature) {\n      if (feature.layer.id === this.level) {\n        return '<div class=\"popup-footer\">' + '<button class=\"btn btn-sm act-btn-basic getAPI\">' + this.Locale.getLabel('mapping.platform.analysis') + '</button>' + '</div>';\n      }\n\n      return '';\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/mixins/layers/interactivity.mixin.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/mixins/library.mixin.js":
/*!********************************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/mixins/library.mixin.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      api_library_cancel_token: null,\n      library: {\n        data: null,\n        count: null,\n        show: false,\n        loading: false,\n        show_filters: false,\n        filter_domain: null\n      }\n    };\n  },\n  computed: {\n    filtered_library: function filtered_library() {\n      var _this = this;\n\n      var list = this.library.data; // sort\n\n      list = _.orderBy(list, 'title', 'asc'); // filter\n\n      list = list.filter(function (item) {\n        if (_this.library.filter_domain !== null && _this.library.filter_domain !== '') {\n          return item.domains.includes(_this.library.filter_domain);\n        }\n\n        return true;\n      });\n      return list;\n    }\n  },\n  methods: {\n    refreshLibrary: function refreshLibrary() {\n      var _this = this;\n\n      this.library.loading = false;\n      this.library.data = null;\n      this.library.count = null;\n      this.library.show = null; // Cancel previous API request if still running\n\n      if (this.api_library_cancel_token !== null) {\n        this.api_library_cancel_token();\n      }\n\n      if (this.theme !== null && (this.level === 'regional' || this.level === 'national' && this.site !== null || this.level === 'concessions' && this.site !== null || this.level === 'protected_areas' && this.site !== null)) {\n        this.library.loading = true;\n        window.axios({\n          method: 'post',\n          url: window.Laravel.baseUrl + 'api/analysis/library',\n          data: {\n            _token: _this.csrf,\n            level: _this.level,\n            site: _this.site || null,\n            domain: _this.theme || null\n          },\n          cancelToken: new window.axios.CancelToken(function executor(c) {\n            _this.api_library_cancel_token = c;\n          })\n        }).then(function (response) {\n          console.log('Request to library API executed');\n\n          if (!_.isEmpty(response.data)) {\n            _this.library.data = typeof response.data === \"string\" ? JSON.parse(response.data) : response.data;\n            _this.library.count = _this.library.data.length;\n          } else {\n            _this.library.count = 0;\n          }\n        })[\"catch\"](function (error) {\n          if (window.axios.isCancel(error)) {\n            console.log('Request to library API canceled. No more necessary');\n          } else {\n            console.log(error);\n          }\n        })[\"finally\"](function () {\n          _this.library.loading = false;\n          _this.api_library_cancel_token = null;\n        });\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/mixins/library.mixin.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/mixins/map.mixin.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/mixins/map.mixin.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      map: null,\n      extents: null,\n      map_loading: false,\n      zoomBBoxPadding: 75,\n      // in pixels\n      all_layers: {},\n      thematic_layer: null,\n      // layer associated with current theme/level selection\n      exclusive_active_layer: null,\n      // layer selector\n      show_layer_selector: true,\n      close_layer_selector_onclick: true,\n      layers_selected: 0\n    };\n  },\n  methods: {\n    setLoading: function setLoading() {\n      var _this = this;\n\n      this.map.on('dataloading', function () {\n        _this.map_loading = true;\n      });\n      this.map.on('data', function () {\n        if (_this.map.areTilesLoaded()) {\n          _this.map_loading = false;\n        }\n      });\n      this.map.on('error', function () {\n        _this.map_loading = false;\n      });\n    },\n    // ##########################################\n    // ##############  Manage map  ##############\n    // ##########################################\n    initMap: function initMap() {\n      var _this = this; // Initialize map\n\n\n      this.map = new window.mapboxgl.Map({\n        container: 'platform_map',\n        style: 'mapbox://styles/mapbox/streets-v11',\n        bounds: this.__getBounds(this.extents['comifac']),\n        minZoom: 3,\n        maxZoom: 12\n      }); // Add navigation control\n\n      this.map.addControl(new window.mapboxgl.NavigationControl({\n        showCompass: false\n      }), 'top-right'); // Add events\n\n      this.map.on('click', function (e) {\n        if (_this.close_layer_selector_onclick) {\n          _this.show_layer_selector = false;\n        }\n      }); // Set loading spinner events\n\n      this.setLoading();\n      this.map.on('load', function () {\n        // Add default sources\n        _this.map.addSource('countries', window.WebMapping.Mapbox.mapbox_vector_source('countries'));\n\n        _this.map.addSource('protected_areas', window.WebMapping.Mapbox.mapbox_vector_source('protected_areas', '2021-05-05')); // Add countries borders and mask outer regions\n\n\n        _this.addLayerToMap(_this.all_layers['comifac_mask']);\n\n        _this.addLayerToMap(_this.all_layers['comifac_eez']);\n\n        _this.addLayerToMap(_this.all_layers['countries']);\n      });\n    },\n    __getBounds: function __getBounds(extent) {\n      return new window.mapboxgl.LngLatBounds(new window.mapboxgl.LngLat(extent['minx'], extent['miny']), new window.mapboxgl.LngLat(extent['maxx'], extent['maxy']));\n    },\n    zoomToBBox: function zoomToBBox(bbox) {\n      this.map.fitBounds(this.__getBounds(bbox), {\n        padding: this.zoomBBoxPadding\n      });\n    },\n    zoomToFeature: function zoomToFeature(feature) {\n      var bbox = window.Turf.bbox({\n        type: 'FeatureCollection',\n        features: [feature]\n      });\n      this.map.fitBounds(bbox, {\n        padding: this.zoomBBoxPadding\n      });\n    },\n    // #########################################\n    // ############  Manage layers  ############\n    // #########################################\n    layerIsOnMap: function layerIsOnMap(layer_id) {\n      if (this.map !== null) {\n        return typeof this.map.getLayer(layer_id) !== 'undefined';\n      }\n\n      return false;\n    },\n    addLayerToMap: function addLayerToMap(layer) {\n      if (!this.layerIsOnMap(layer.id)) {\n        // If \"exclusive\" layer\n        if (layer.hasOwnProperty('exclusive') && layer.exclusive) {\n          // remove existing exclusive layer and add to store\n          if (this.exclusive_active_layer !== null) {\n            this.removeLayerFromMap(this.exclusive_active_layer);\n          }\n\n          this.exclusive_active_layer = layer; // hide thematic layer (if any)\n\n          if (this.thematic_layer !== null) {\n            this.removeLayerFromMap(this.thematic_layer);\n          }\n        } // \"data-driven\": only add layer to map\n\n\n        if (layer.hasOwnProperty('data_driven') && layer.data_driven) {\n          this.map.addLayer(layer);\n        } // standard layer\n        else {\n            this.map.addLayer(layer);\n            window.vueBus.$emit('toggle_layer', layer.id, true);\n            this.refreshInteractiveLayers(); // must be called after adding main layer\n\n            this.sortLayers();\n          }\n      }\n    },\n    removeLayerFromMap: function removeLayerFromMap(layer) {\n      if (this.layerIsOnMap(layer.id)) {\n        // If \"exclusive\" layer\n        if (layer.hasOwnProperty('exclusive') && layer.exclusive) {\n          // remove from store\n          this.exclusive_active_layer = null; // show thematic layer (if any)\n\n          if (this.thematic_layer !== null) {\n            this.addLayerToMap(this.thematic_layer);\n          }\n        } // \"data-driven\": only remove from map\n\n\n        if (layer.hasOwnProperty('data_driven') && layer.data_driven) {\n          this.map.removeLayer(layer.id);\n          window.vueBus.$emit('toggle_layer', layer.id, false);\n        } // standard layer\n        else {\n            this.map.removeLayer(layer.id);\n            window.vueBus.$emit('toggle_layer', layer.id, false);\n            this.refreshInteractiveLayers(); // must be called before removing source\n\n            if (layer.id !== 'countries' && layer.id !== 'protected_areas') {\n              this.map.removeSource(layer.id);\n            }\n\n            this.sortLayers();\n          }\n      }\n    },\n    toggleLayer: function toggleLayer(layer) {\n      if (this.layerIsOnMap(layer.id)) {\n        this.removeLayerFromMap(layer);\n      } else {\n        this.addLayerToMap(layer);\n      }\n    },\n    sortLayers: function sortLayers() {\n      // Move countries borders\n      if (this.layerIsOnMap('countries')) {\n        this.map.moveLayer('countries');\n      }\n\n      if (this.layerIsOnMap('comifac_eez')) {\n        this.map.moveLayer('comifac_eez');\n      } // Move all layers defined in this.all_layers\n\n\n      for (var layer_id in this.all_layers) {\n        if (this.all_layers.hasOwnProperty(layer_id)) {\n          if (this.layerIsOnMap(layer_id)) {\n            this.map.moveLayer(layer_id);\n          }\n\n          if (this.layerIsOnMap(this.__grayedLayerId(layer_id))) {\n            this.map.moveLayer(this.__grayedLayerId(layer_id));\n          }\n\n          if (this.layerIsOnMap(this.__maskedLayerId(layer_id))) {\n            this.map.moveLayer(this.__maskedLayerId(layer_id));\n          }\n        }\n      } // Move countries mask\n\n\n      if (this.layerIsOnMap('countries_mask')) {\n        this.map.moveLayer('countries_mask');\n      }\n    },\n    refreshThematicLayer: function refreshThematicLayer() {\n      if (this.thematic_layer !== null) {\n        this.removeLayerFromMap(this.thematic_layer);\n        this.thematic_layer = null;\n      }\n\n      if (this.level === 'concessions' || this.level === 'klc' || this.level === 'protected_areas') {\n        var layer = this.all_layers[this.level];\n        this.thematic_layer = layer;\n        this.addLayerToMap(layer);\n      }\n    },\n    refreshExclusiveLayers: function refreshExclusiveLayers() {\n      if (this.exclusive_active_layer !== null) {\n        this.removeLayerFromMap(this.exclusive_active_layer);\n        this.exclusive_active_layer = null;\n      }\n    },\n    refreshInteractiveLayers: function refreshInteractiveLayers() {}\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/mixins/map.mixin.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/mixins/projects.mixin.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/mixins/projects.mixin.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      api_projects_cancel_token: null,\n      projects: {\n        data: null,\n        count: null,\n        show: false,\n        loading: false,\n        show_filters: false,\n        filter_domain: null,\n        filter_status: null\n      }\n    };\n  },\n  computed: {\n    filtered_projects: function filtered_projects() {\n      var _this = this;\n\n      var list = this.projects.data; // sort\n\n      list = _.orderBy(list, 'Acronym', 'asc'); // filter\n\n      list = list.filter(function (item) {\n        if (_this.projects.filter_domain !== null && _this.projects.filter_domain !== '') {\n          return item.domains.includes(_this.projects.filter_domain);\n        }\n\n        if (_this.projects.filter_status !== null && _this.projects.filter_status !== '') {\n          return item.status.includes(_this.projects.filter_status);\n        }\n\n        return true;\n      });\n      return list;\n    }\n  },\n  methods: {\n    refreshProjects: function refreshProjects() {\n      var _this = this;\n\n      this.projects.loading = null;\n      this.projects.data = null;\n      this.projects.count = null;\n      this.projects.show = null; // Cancel previous API request if still running\n\n      if (this.api_projects_cancel_token !== null) {\n        this.api_projects_cancel_token();\n      }\n\n      if (this.theme !== null && (this.level === 'regional' || this.level === 'national' && this.site !== null || this.level === 'concessions' && this.site !== null || this.level === 'protected_areas' && this.site !== null)) {\n        this.projects.loading = true;\n        window.axios({\n          method: 'post',\n          url: window.Laravel.baseUrl + 'api/analysis/projects',\n          data: {\n            _token: _this.csrf,\n            level: _this.level,\n            site: _this.site || null,\n            domain: _this.theme || null\n          },\n          cancelToken: new window.axios.CancelToken(function executor(c) {\n            _this.api_projects_cancel_token = c;\n          })\n        }).then(function (response) {\n          console.log('Request to projects API executed');\n\n          if (!_.isEmpty(response.data)) {\n            _this.projects.data = typeof response.data === \"string\" ? JSON.parse(response.data) : response.data;\n            _this.projects.count = _this.projects.data.length;\n          } else {\n            _this.projects.count = 0;\n          }\n        })[\"catch\"](function (error) {\n          if (window.axios.isCancel(error)) {\n            console.log('Request to projects API canceled. No more necessary');\n          } else {\n            console.log(error);\n          }\n        })[\"finally\"](function () {\n          _this.projects.loading = false;\n          _this.api_projects_cancel_token = null;\n        });\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/mixins/projects.mixin.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/mixins/utils/choropleth.mixin.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/mixins/utils/choropleth.mixin.js ***!
  \*****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    opacity: {\n      type: Number,\n      \"default\": 0.6\n    }\n  },\n  methods: {\n    __normalize: function __normalize(numbers, max) {\n      max = max || Math.max.apply(Math, _toConsumableArray(numbers));\n\n      if (!isNaN(max) && max > 0) {\n        var ratio = max / 100;\n        numbers = numbers.map(function (v) {\n          return Math.round(v / ratio);\n        });\n      }\n\n      return numbers;\n    },\n    __classify: function __classify(numbers) {\n      var num_steps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n\n      var classify = function classify(num_steps) {\n        return function (number) {\n          if (number === null) {\n            return null;\n          }\n\n          var class_index = 0;\n          var i = 0;\n\n          while (i < 100) {\n            if (number > i && number <= i + 100 / num_steps) {\n              return class_index;\n            }\n\n            i = i + 100 / num_steps;\n            class_index++;\n          }\n\n          return 0;\n        };\n      };\n\n      return numbers.map(classify(num_steps));\n    },\n    choropleth: function choropleth(data, palette) {\n      var keys = [],\n          values = [];\n      Object.entries(data).forEach(function (item) {\n        keys.push(item[0]);\n        values.push(item[1]);\n      });\n      values = this.__normalize(values);\n      values = this.__classify(values, palette.length);\n      data = _.zipObject(keys, values);\n      return data;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L21peGlucy91dGlscy9jaG9yb3BsZXRoLm1peGluLmpzPzgyZTkiXSwibmFtZXMiOlsicHJvcHMiLCJvcGFjaXR5IiwidHlwZSIsIk51bWJlciIsIm1ldGhvZHMiLCJfX25vcm1hbGl6ZSIsIm51bWJlcnMiLCJtYXgiLCJNYXRoIiwiaXNOYU4iLCJyYXRpbyIsIm1hcCIsInYiLCJyb3VuZCIsIl9fY2xhc3NpZnkiLCJudW1fc3RlcHMiLCJjbGFzc2lmeSIsIm51bWJlciIsImNsYXNzX2luZGV4IiwiaSIsImNob3JvcGxldGgiLCJkYXRhIiwicGFsZXR0ZSIsImtleXMiLCJ2YWx1ZXMiLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsIml0ZW0iLCJwdXNoIiwibGVuZ3RoIiwiXyIsInppcE9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFlO0FBRVhBLE9BQUssRUFBQztBQUNGQyxXQUFPLEVBQUU7QUFDTEMsVUFBSSxFQUFFQyxNQUREO0FBRUwsaUJBQVM7QUFGSjtBQURQLEdBRks7QUFTWEMsU0FBTyxFQUFFO0FBRUxDLGVBRkssdUJBRU9DLE9BRlAsRUFFZ0JDLEdBRmhCLEVBRW9CO0FBQ3JCQSxTQUFHLEdBQUdBLEdBQUcsSUFBSUMsSUFBSSxDQUFDRCxHQUFMLE9BQUFDLElBQUkscUJBQVFGLE9BQVIsRUFBakI7O0FBQ0EsVUFBRyxDQUFDRyxLQUFLLENBQUNGLEdBQUQsQ0FBTixJQUFlQSxHQUFHLEdBQUMsQ0FBdEIsRUFBd0I7QUFDcEIsWUFBSUcsS0FBSyxHQUFHSCxHQUFHLEdBQUcsR0FBbEI7QUFDQUQsZUFBTyxHQUFHQSxPQUFPLENBQUNLLEdBQVIsQ0FBWSxVQUFBQyxDQUFDO0FBQUEsaUJBQUlKLElBQUksQ0FBQ0ssS0FBTCxDQUFXRCxDQUFDLEdBQUdGLEtBQWYsQ0FBSjtBQUFBLFNBQWIsQ0FBVjtBQUNIOztBQUNELGFBQU9KLE9BQVA7QUFDSCxLQVRJO0FBV0xRLGNBWEssc0JBV01SLE9BWE4sRUFXMkI7QUFBQSxVQUFaUyxTQUFZLHVFQUFGLENBQUU7O0FBQzVCLFVBQUlDLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVNELFNBQVQsRUFBbUI7QUFDOUIsZUFBTyxVQUFTRSxNQUFULEVBQWlCO0FBQ3BCLGNBQUlBLE1BQU0sS0FBSyxJQUFmLEVBQXFCO0FBQ2pCLG1CQUFPLElBQVA7QUFDSDs7QUFDRCxjQUFJQyxXQUFXLEdBQUcsQ0FBbEI7QUFDQSxjQUFJQyxDQUFDLEdBQUcsQ0FBUjs7QUFDQSxpQkFBT0EsQ0FBQyxHQUFHLEdBQVgsRUFBZ0I7QUFDWixnQkFBSUYsTUFBTSxHQUFHRSxDQUFULElBQWNGLE1BQU0sSUFBSUUsQ0FBQyxHQUFHLE1BQU1KLFNBQXRDLEVBQWlEO0FBQzdDLHFCQUFPRyxXQUFQO0FBQ0g7O0FBQ0RDLGFBQUMsR0FBR0EsQ0FBQyxHQUFHLE1BQU1KLFNBQWQ7QUFDQUcsdUJBQVc7QUFDZDs7QUFDRCxpQkFBTyxDQUFQO0FBQ0gsU0FkRDtBQWVILE9BaEJEOztBQWlCQSxhQUFPWixPQUFPLENBQUNLLEdBQVIsQ0FBWUssUUFBUSxDQUFDRCxTQUFELENBQXBCLENBQVA7QUFDSCxLQTlCSTtBQWlDTEssY0FqQ0ssc0JBaUNNQyxJQWpDTixFQWlDWUMsT0FqQ1osRUFpQ29CO0FBQ3JCLFVBQUlDLElBQUksR0FBRyxFQUFYO0FBQUEsVUFDSUMsTUFBTSxHQUFHLEVBRGI7QUFFQUMsWUFBTSxDQUFDQyxPQUFQLENBQWVMLElBQWYsRUFBcUJNLE9BQXJCLENBQTZCLFVBQVNDLElBQVQsRUFBYztBQUN2Q0wsWUFBSSxDQUFDTSxJQUFMLENBQVVELElBQUksQ0FBQyxDQUFELENBQWQ7QUFDQUosY0FBTSxDQUFDSyxJQUFQLENBQVlELElBQUksQ0FBQyxDQUFELENBQWhCO0FBQ0gsT0FIRDtBQUlBSixZQUFNLEdBQUcsS0FBS25CLFdBQUwsQ0FBaUJtQixNQUFqQixDQUFUO0FBQ0FBLFlBQU0sR0FBRyxLQUFLVixVQUFMLENBQWdCVSxNQUFoQixFQUF3QkYsT0FBTyxDQUFDUSxNQUFoQyxDQUFUO0FBQ0FULFVBQUksR0FBR1UsQ0FBQyxDQUFDQyxTQUFGLENBQVlULElBQVosRUFBa0JDLE1BQWxCLENBQVA7QUFDQSxhQUFPSCxJQUFQO0FBQ0g7QUE1Q0k7QUFURSxDQUFmIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9tYXBwaW5nX21hcGJveC9taXhpbnMvdXRpbHMvY2hvcm9wbGV0aC5taXhpbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOntcbiAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgZGVmYXVsdDogMC42XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIF9fbm9ybWFsaXplKG51bWJlcnMsIG1heCl7XG4gICAgICAgICAgICBtYXggPSBtYXggfHwgTWF0aC5tYXgoLi4ubnVtYmVycylcbiAgICAgICAgICAgIGlmKCFpc05hTihtYXgpICYmIG1heD4wKXtcbiAgICAgICAgICAgICAgICBsZXQgcmF0aW8gPSBtYXggLyAxMDA7XG4gICAgICAgICAgICAgICAgbnVtYmVycyA9IG51bWJlcnMubWFwKHYgPT4gTWF0aC5yb3VuZCh2IC8gcmF0aW8pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXJzO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9fY2xhc3NpZnkobnVtYmVycywgbnVtX3N0ZXBzPTQpe1xuICAgICAgICAgICAgbGV0IGNsYXNzaWZ5ID0gZnVuY3Rpb24obnVtX3N0ZXBzKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBjbGFzc19pbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPiBpICYmIG51bWJlciA8PSBpICsgMTAwIC8gbnVtX3N0ZXBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzX2luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkgKyAxMDAgLyBudW1fc3RlcHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19pbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcnMubWFwKGNsYXNzaWZ5KG51bV9zdGVwcykpO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgY2hvcm9wbGV0aChkYXRhLCBwYWxldHRlKXtcbiAgICAgICAgICAgIGxldCBrZXlzID0gW10sXG4gICAgICAgICAgICAgICAgdmFsdWVzID0gW107XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhkYXRhKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICAgICAgICAgIGtleXMucHVzaChpdGVtWzBdKTtcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChpdGVtWzFdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFsdWVzID0gdGhpcy5fX25vcm1hbGl6ZSh2YWx1ZXMpO1xuICAgICAgICAgICAgdmFsdWVzID0gdGhpcy5fX2NsYXNzaWZ5KHZhbHVlcywgcGFsZXR0ZS5sZW5ndGgpO1xuICAgICAgICAgICAgZGF0YSA9IF8uemlwT2JqZWN0KGtleXMsIHZhbHVlcyk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/mixins/utils/choropleth.mixin.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/mixins/utils/utils.mixin.js":
/*!************************************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/mixins/utils/utils.mixin.js ***!
  \************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    red_yellow_green: {\n      type: Array,\n      \"default\": function _default() {\n        return ['#ce2e29', // $darkRed\n        '#f9c74f', '#007233' // $darkGreen\n        ];\n      }\n    },\n    rainbow_10: {\n      type: Array,\n      \"default\": function _default() {\n        return ['#404887', '#3374ff', '#43aa8b', '#90be6d', '#f9c74f', '#f3722c', '#f94144', '#d35e9d', '#ad7af6', '#e7c1cb', '#c9bcb5', '#5f6269'];\n      }\n    }\n  },\n  methods: {\n    /**\n     * Generate a gradient color palette (using https://github.com/Siddharth11/gradstop)\n     *\n     * @param num_colors\n     * @param colors\n     */\n    generateGradientPalette: function generateGradientPalette(num_colors, colors) {\n      colors = colors || this.red_yellow_green;\n      return gradstop({\n        stops: num_colors,\n        inputFormat: 'hex',\n        colorArray: colors\n      });\n    },\n\n    /**\n     * Return a palette from the given array of colors\n     *\n     * @param num_colors\n     * @param colors\n     * @returns {T[]}\n     */\n    generateColorPalette: function generateColorPalette(num_colors, colors) {\n      colors = colors || this.rainbow_10;\n      return colors.slice(0, num_colors);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L21peGlucy91dGlscy91dGlscy5taXhpbi5qcz82ODg0Il0sIm5hbWVzIjpbInByb3BzIiwicmVkX3llbGxvd19ncmVlbiIsInR5cGUiLCJBcnJheSIsInJhaW5ib3dfMTAiLCJtZXRob2RzIiwiZ2VuZXJhdGVHcmFkaWVudFBhbGV0dGUiLCJudW1fY29sb3JzIiwiY29sb3JzIiwiZ3JhZHN0b3AiLCJzdG9wcyIsImlucHV0Rm9ybWF0IiwiY29sb3JBcnJheSIsImdlbmVyYXRlQ29sb3JQYWxldHRlIiwic2xpY2UiXSwibWFwcGluZ3MiOiJBQUFBO0FBQWU7QUFFWEEsT0FBSyxFQUFDO0FBQ0ZDLG9CQUFnQixFQUFFO0FBQ2RDLFVBQUksRUFBRUMsS0FEUTtBQUVkLGlCQUFTO0FBQUEsZUFBTSxDQUNYLFNBRFcsRUFDQztBQUNaLGlCQUZXLEVBR1gsU0FIVyxDQUdDO0FBSEQsU0FBTjtBQUFBO0FBRkssS0FEaEI7QUFTRkMsY0FBVSxFQUFDO0FBQ1BGLFVBQUksRUFBRUMsS0FEQztBQUVQLGlCQUFTO0FBQUEsZUFBTSxDQUNYLFNBRFcsRUFFWCxTQUZXLEVBR1gsU0FIVyxFQUlYLFNBSlcsRUFLWCxTQUxXLEVBTVgsU0FOVyxFQU9YLFNBUFcsRUFRWCxTQVJXLEVBU1gsU0FUVyxFQVVYLFNBVlcsRUFXWCxTQVhXLEVBWVgsU0FaVyxDQUFOO0FBQUE7QUFGRjtBQVRULEdBRks7QUE4QlhFLFNBQU8sRUFBRTtBQUVMO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNRQywyQkFSSyxtQ0FRbUJDLFVBUm5CLEVBUStCQyxNQVIvQixFQVF1QztBQUN4Q0EsWUFBTSxHQUFHQSxNQUFNLElBQUksS0FBS1AsZ0JBQXhCO0FBQ0EsYUFBT1EsUUFBUSxDQUFDO0FBQ1pDLGFBQUssRUFBRUgsVUFESztBQUVaSSxtQkFBVyxFQUFFLEtBRkQ7QUFHWkMsa0JBQVUsRUFBRUo7QUFIQSxPQUFELENBQWY7QUFLSCxLQWZJOztBQWlCTDtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNRSyx3QkF4QkssZ0NBd0JnQk4sVUF4QmhCLEVBd0I0QkMsTUF4QjVCLEVBd0JvQztBQUNyQ0EsWUFBTSxHQUFHQSxNQUFNLElBQUksS0FBS0osVUFBeEI7QUFDQSxhQUFPSSxNQUFNLENBQUNNLEtBQVAsQ0FBYSxDQUFiLEVBQWdCUCxVQUFoQixDQUFQO0FBQ0g7QUEzQkk7QUE5QkUsQ0FBZiIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHMvanMvbWFwcGluZ19tYXBib3gvbWl4aW5zL3V0aWxzL3V0aWxzLm1peGluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6e1xuICAgICAgICByZWRfeWVsbG93X2dyZWVuOiB7XG4gICAgICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtcbiAgICAgICAgICAgICAgICAnI2NlMmUyOScsICAvLyAkZGFya1JlZFxuICAgICAgICAgICAgICAgICcjZjljNzRmJyxcbiAgICAgICAgICAgICAgICAnIzAwNzIzMycgICAvLyAkZGFya0dyZWVuXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHJhaW5ib3dfMTA6e1xuICAgICAgICAgICAgdHlwZTogQXJyYXksXG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbXG4gICAgICAgICAgICAgICAgJyM0MDQ4ODcnLFxuICAgICAgICAgICAgICAgICcjMzM3NGZmJyxcbiAgICAgICAgICAgICAgICAnIzQzYWE4YicsXG4gICAgICAgICAgICAgICAgJyM5MGJlNmQnLFxuICAgICAgICAgICAgICAgICcjZjljNzRmJyxcbiAgICAgICAgICAgICAgICAnI2YzNzIyYycsXG4gICAgICAgICAgICAgICAgJyNmOTQxNDQnLFxuICAgICAgICAgICAgICAgICcjZDM1ZTlkJyxcbiAgICAgICAgICAgICAgICAnI2FkN2FmNicsXG4gICAgICAgICAgICAgICAgJyNlN2MxY2InLFxuICAgICAgICAgICAgICAgICcjYzliY2I1JyxcbiAgICAgICAgICAgICAgICAnIzVmNjI2OScsXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZW5lcmF0ZSBhIGdyYWRpZW50IGNvbG9yIHBhbGV0dGUgKHVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9TaWRkaGFydGgxMS9ncmFkc3RvcClcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG51bV9jb2xvcnNcbiAgICAgICAgICogQHBhcmFtIGNvbG9yc1xuICAgICAgICAgKi9cbiAgICAgICAgZ2VuZXJhdGVHcmFkaWVudFBhbGV0dGUobnVtX2NvbG9ycywgY29sb3JzKSB7XG4gICAgICAgICAgICBjb2xvcnMgPSBjb2xvcnMgfHwgdGhpcy5yZWRfeWVsbG93X2dyZWVuO1xuICAgICAgICAgICAgcmV0dXJuIGdyYWRzdG9wKHtcbiAgICAgICAgICAgICAgICBzdG9wczogbnVtX2NvbG9ycyxcbiAgICAgICAgICAgICAgICBpbnB1dEZvcm1hdDogJ2hleCcsXG4gICAgICAgICAgICAgICAgY29sb3JBcnJheTogY29sb3JzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJuIGEgcGFsZXR0ZSBmcm9tIHRoZSBnaXZlbiBhcnJheSBvZiBjb2xvcnNcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG51bV9jb2xvcnNcbiAgICAgICAgICogQHBhcmFtIGNvbG9yc1xuICAgICAgICAgKiBAcmV0dXJucyB7VFtdfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2VuZXJhdGVDb2xvclBhbGV0dGUobnVtX2NvbG9ycywgY29sb3JzKSB7XG4gICAgICAgICAgICBjb2xvcnMgPSBjb2xvcnMgfHwgdGhpcy5yYWluYm93XzEwO1xuICAgICAgICAgICAgcmV0dXJuIGNvbG9ycy5zbGljZSgwLCBudW1fY29sb3JzKTtcbiAgICAgICAgfVxuXG5cbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/mixins/utils/utils.mixin.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/mixins/visible_components.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/mixins/visible_components.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  methods: {\n    toggle_component: function toggle_component(component) {\n      this.$store.commit('visible_components/toggle', component);\n    },\n    show_component: function show_component(component) {\n      this.$store.commit('visible_components/show', component);\n    },\n    hide_component: function hide_component(component) {\n      this.$store.commit('visible_components/hide', component);\n    },\n    is_component_visible: function is_component_visible(component) {\n      return this.$store.getters['visible_components/is_component_visible'](component);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L21peGlucy92aXNpYmxlX2NvbXBvbmVudHMuanM/OGFlZCJdLCJuYW1lcyI6WyJtZXRob2RzIiwidG9nZ2xlX2NvbXBvbmVudCIsImNvbXBvbmVudCIsIiRzdG9yZSIsImNvbW1pdCIsInNob3dfY29tcG9uZW50IiwiaGlkZV9jb21wb25lbnQiLCJpc19jb21wb25lbnRfdmlzaWJsZSIsImdldHRlcnMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQWU7QUFFWEEsU0FBTyxFQUFFO0FBRUxDLG9CQUZLLDRCQUVZQyxTQUZaLEVBRXNCO0FBQ3ZCLFdBQUtDLE1BQUwsQ0FBWUMsTUFBWixDQUFtQiwyQkFBbkIsRUFBZ0RGLFNBQWhEO0FBQ0gsS0FKSTtBQU1MRyxrQkFOSywwQkFNVUgsU0FOVixFQU1vQjtBQUNyQixXQUFLQyxNQUFMLENBQVlDLE1BQVosQ0FBbUIseUJBQW5CLEVBQThDRixTQUE5QztBQUNILEtBUkk7QUFVTEksa0JBVkssMEJBVVVKLFNBVlYsRUFVb0I7QUFDckIsV0FBS0MsTUFBTCxDQUFZQyxNQUFaLENBQW1CLHlCQUFuQixFQUE4Q0YsU0FBOUM7QUFDSCxLQVpJO0FBY0xLLHdCQUFvQixFQUFFLDhCQUFTTCxTQUFULEVBQW1CO0FBQ3JDLGFBQU8sS0FBS0MsTUFBTCxDQUFZSyxPQUFaLENBQW9CLHlDQUFwQixFQUErRE4sU0FBL0QsQ0FBUDtBQUNIO0FBaEJJO0FBRkUsQ0FBZiIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHMvanMvbWFwcGluZ19tYXBib3gvbWl4aW5zL3Zpc2libGVfY29tcG9uZW50cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcblxuICAgIG1ldGhvZHM6IHtcblxuICAgICAgICB0b2dnbGVfY29tcG9uZW50KGNvbXBvbmVudCl7XG4gICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3Zpc2libGVfY29tcG9uZW50cy90b2dnbGUnLCBjb21wb25lbnQpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNob3dfY29tcG9uZW50KGNvbXBvbmVudCl7XG4gICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3Zpc2libGVfY29tcG9uZW50cy9zaG93JywgY29tcG9uZW50KTtcbiAgICAgICAgfSxcblxuICAgICAgICBoaWRlX2NvbXBvbmVudChjb21wb25lbnQpe1xuICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCd2aXNpYmxlX2NvbXBvbmVudHMvaGlkZScsIGNvbXBvbmVudCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgaXNfY29tcG9uZW50X3Zpc2libGU6IGZ1bmN0aW9uKGNvbXBvbmVudCl7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy4kc3RvcmUuZ2V0dGVyc1sndmlzaWJsZV9jb21wb25lbnRzL2lzX2NvbXBvbmVudF92aXNpYmxlJ10oY29tcG9uZW50KVxuICAgICAgICB9LFxuXG4gICAgfVxuXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/mixins/visible_components.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/platform.js":
/*!********************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/platform.js ***!
  \********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _mixins_map_mixin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mixins/map.mixin */ \"./resources/assets/js/mapping_mapbox/mixins/map.mixin.js\");\n/* harmony import */ var _mixins_library_mixin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mixins/library.mixin */ \"./resources/assets/js/mapping_mapbox/mixins/library.mixin.js\");\n/* harmony import */ var _mixins_projects_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mixins/projects.mixin */ \"./resources/assets/js/mapping_mapbox/mixins/projects.mixin.js\");\n/* harmony import */ var _mixins_api_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mixins/api.mixin */ \"./resources/assets/js/mapping_mapbox/mixins/api.mixin.js\");\n/* harmony import */ var _mixins_utils_utils_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mixins/utils/utils.mixin */ \"./resources/assets/js/mapping_mapbox/mixins/utils/utils.mixin.js\");\n/* harmony import */ var _mixins_utils_choropleth_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mixins/utils/choropleth.mixin */ \"./resources/assets/js/mapping_mapbox/mixins/utils/choropleth.mixin.js\");\n/* harmony import */ var _mixins_layers_interactivity_mixin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mixins/layers/interactivity.mixin */ \"./resources/assets/js/mapping_mapbox/mixins/layers/interactivity.mixin.js\");\n/* harmony import */ var _mixins_visible_components__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mixins/visible_components */ \"./resources/assets/js/mapping_mapbox/mixins/visible_components.js\");\n/* harmony import */ var _store_modules_visible_components__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./store_modules/visible_components */ \"./resources/assets/js/mapping_mapbox/store_modules/visible_components.js\");\n\n\n\n\n\n\n\n\n\nwindow.AnalyticalPlatform = Vue.extend({\n  mixins: [_mixins_map_mixin__WEBPACK_IMPORTED_MODULE_0__[\"default\"], _mixins_library_mixin__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _mixins_projects_mixin__WEBPACK_IMPORTED_MODULE_2__[\"default\"], _mixins_api_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _mixins_utils_utils_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _mixins_layers_interactivity_mixin__WEBPACK_IMPORTED_MODULE_6__[\"default\"], _mixins_utils_choropleth_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"], _mixins_visible_components__WEBPACK_IMPORTED_MODULE_7__[\"default\"]],\n  store: new window.Vuex.Store({\n    modules: {\n      visible_components: _store_modules_visible_components__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n    }\n  }),\n  created: function created() {\n    this.theme = this.theme === '' ? null : this.theme;\n    this.level = this.level === '' ? null : this.level;\n    this.site = this.site === '' ? null : this.site;\n  },\n  data: function data() {\n    return {\n      Locale: window.Locale,\n      csrf: window.Laravel.csrfToken,\n      zoomBBoxPadding: 75,\n      // in pixels\n      // UI selections\n      selected_card: false,\n      selected_card_button: null\n    };\n  },\n  watch: {\n    theme: function theme() {\n      this.reset();\n      this.level = null;\n      this.site = null;\n      this.refresh();\n\n      if (this.theme === 'convergence_plan') {\n        this.level = 'regional';\n        this.getAPI();\n      }\n    },\n    level: function level() {\n      this.site = null;\n      this.reset();\n      this.refresh();\n\n      if (this.level === 'regional') {\n        this.getAPI();\n      }\n    },\n    site: function site(value) {\n      this.reset();\n      this.refresh();\n\n      if (this.level === 'national' || this.site !== null) {\n        this.getAPI(this.site);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.initMap();\n    this.refreshLibrary();\n    this.refreshProjects();\n    this.map_loading = false;\n    this.api_loading = false;\n  },\n  methods: {\n    reset: function reset() {\n      // console.log('level changed |', 'theme: '+this.theme, ', level: '+this.level, ', site: '+this.site);\n      this.show_layer_selector = false;\n      this.removeLayerPopup();\n      this.selected_card = null;\n      this.selected_card_button = null;\n    },\n    refresh: function refresh() {\n      if (this.level === 'regional') {\n        this.zoomToBBox(this.extents['comifac']);\n      } else if (this.level === 'national' && this.site !== null) {\n        this.zoomToBBox(this.extents[this.level][this.site]);\n      }\n\n      this.refreshExclusiveLayers();\n      this.refreshThematicLayer();\n      this.refreshInteractiveLayers();\n      this.refreshLibrary();\n      this.refreshProjects();\n    },\n    // ##############################################\n    // ###############  Manage cards  ###############\n    // ##############################################\n    toggleLayersSelector: function toggleLayersSelector() {\n      this.show_layer_selector = !this.show_layer_selector;\n\n      if (this.show_layer_selector) {\n        this.library.show = false;\n        this.projects.show = false;\n      }\n    },\n    toggleLibrary: function toggleLibrary() {\n      this.library.show = !this.library.show;\n\n      if (this.library.show) {\n        this.show_layer_selector = false;\n        this.projects.show = false;\n      }\n    },\n    toggleProjects: function toggleProjects() {\n      this.projects.show = !this.projects.show;\n\n      if (this.projects.show) {\n        this.show_layer_selector = false;\n        this.library.show = false;\n      }\n    },\n    showCardButton: function showCardButton(button) {\n      var _this = this;\n\n      this.library.show = false;\n      this.projects.show = false;\n\n      if (this.selected_card_button !== null) {\n        $('.collapse').collapse('hide'); // necessary 'cause there's a conflict between bootstrap4 and VueJS in accordion body\n      }\n\n      this.selected_card_button = null;\n      Vue.nextTick(function () {\n        if (_this.selected_card_button !== button) {\n          _this.selected_card_button = button;\n        }\n      });\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/platform.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/store_modules/visible_components.js":
/*!********************************************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/store_modules/visible_components.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nvar state = {\n  components: []\n};\nvar getters = {\n  is_component_visible: function is_component_visible(state) {\n    return function (component) {\n      return state.components.includes(component);\n    };\n  }\n};\nvar mutations = {\n  toggle: function toggle(state, component) {\n    if (state.components.includes(component)) {\n      this.commit('visible_components/hide', component);\n    } else {\n      this.commit('visible_components/show', component);\n    }\n  },\n  show: function show(state, component) {\n    state.components.push(component);\n  },\n  hide: function hide(state, component) {\n    if (state.components.includes(component)) {\n      state.components.splice(state.components.indexOf(component), 1);\n    }\n  }\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  namespaced: true,\n  state: state,\n  getters: getters,\n  mutations: mutations\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L3N0b3JlX21vZHVsZXMvdmlzaWJsZV9jb21wb25lbnRzLmpzPzIxOWIiXSwibmFtZXMiOlsic3RhdGUiLCJjb21wb25lbnRzIiwiZ2V0dGVycyIsImlzX2NvbXBvbmVudF92aXNpYmxlIiwiY29tcG9uZW50IiwiaW5jbHVkZXMiLCJtdXRhdGlvbnMiLCJ0b2dnbGUiLCJjb21taXQiLCJzaG93IiwicHVzaCIsImhpZGUiLCJzcGxpY2UiLCJpbmRleE9mIiwibmFtZXNwYWNlZCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxJQUFNQSxLQUFLLEdBQUc7QUFDVkMsWUFBVSxFQUFFO0FBREYsQ0FBZDtBQUlBLElBQU1DLE9BQU8sR0FBRztBQUNaQyxzQkFBb0IsRUFBRSw4QkFBQ0gsS0FBRDtBQUFBLFdBQVcsVUFBQ0ksU0FBRCxFQUFlO0FBQzVDLGFBQU9KLEtBQUssQ0FBQ0MsVUFBTixDQUFpQkksUUFBakIsQ0FBMEJELFNBQTFCLENBQVA7QUFDSCxLQUZxQjtBQUFBO0FBRFYsQ0FBaEI7QUFNQSxJQUFNRSxTQUFTLEdBQUc7QUFFZEMsUUFGYyxrQkFFUFAsS0FGTyxFQUVBSSxTQUZBLEVBRVU7QUFDcEIsUUFBR0osS0FBSyxDQUFDQyxVQUFOLENBQWlCSSxRQUFqQixDQUEwQkQsU0FBMUIsQ0FBSCxFQUF3QztBQUNwQyxXQUFLSSxNQUFMLENBQVkseUJBQVosRUFBdUNKLFNBQXZDO0FBQ0gsS0FGRCxNQUVPO0FBQ0gsV0FBS0ksTUFBTCxDQUFZLHlCQUFaLEVBQXVDSixTQUF2QztBQUNIO0FBQ0osR0FSYTtBQVVkSyxNQVZjLGdCQVVUVCxLQVZTLEVBVUZJLFNBVkUsRUFVUTtBQUNsQkosU0FBSyxDQUFDQyxVQUFOLENBQWlCUyxJQUFqQixDQUFzQk4sU0FBdEI7QUFDSCxHQVphO0FBY2RPLE1BZGMsZ0JBY1RYLEtBZFMsRUFjRkksU0FkRSxFQWNRO0FBQ2xCLFFBQUdKLEtBQUssQ0FBQ0MsVUFBTixDQUFpQkksUUFBakIsQ0FBMEJELFNBQTFCLENBQUgsRUFBd0M7QUFDcENKLFdBQUssQ0FBQ0MsVUFBTixDQUFpQlcsTUFBakIsQ0FBd0JaLEtBQUssQ0FBQ0MsVUFBTixDQUFpQlksT0FBakIsQ0FBeUJULFNBQXpCLENBQXhCLEVBQTZELENBQTdEO0FBQ0g7QUFDSjtBQWxCYSxDQUFsQjtBQXFCZTtBQUNYVSxZQUFVLEVBQUUsSUFERDtBQUVYZCxPQUFLLEVBQUxBLEtBRlc7QUFHWEUsU0FBTyxFQUFQQSxPQUhXO0FBSVhJLFdBQVMsRUFBVEE7QUFKVyxDQUFmIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2Fzc2V0cy9qcy9tYXBwaW5nX21hcGJveC9zdG9yZV9tb2R1bGVzL3Zpc2libGVfY29tcG9uZW50cy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHN0YXRlID0ge1xuICAgIGNvbXBvbmVudHM6IFtdXG59O1xuXG5jb25zdCBnZXR0ZXJzID0ge1xuICAgIGlzX2NvbXBvbmVudF92aXNpYmxlOiAoc3RhdGUpID0+IChjb21wb25lbnQpID0+IHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmNvbXBvbmVudHMuaW5jbHVkZXMoY29tcG9uZW50KTtcbiAgICB9XG59O1xuXG5jb25zdCBtdXRhdGlvbnMgPSB7XG5cbiAgICB0b2dnbGUoc3RhdGUsIGNvbXBvbmVudCl7XG4gICAgICAgIGlmKHN0YXRlLmNvbXBvbmVudHMuaW5jbHVkZXMoY29tcG9uZW50KSl7XG4gICAgICAgICAgICB0aGlzLmNvbW1pdCgndmlzaWJsZV9jb21wb25lbnRzL2hpZGUnLCBjb21wb25lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb21taXQoJ3Zpc2libGVfY29tcG9uZW50cy9zaG93JywgY29tcG9uZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBzaG93KHN0YXRlLCBjb21wb25lbnQpe1xuICAgICAgICBzdGF0ZS5jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICB9LFxuXG4gICAgaGlkZShzdGF0ZSwgY29tcG9uZW50KXtcbiAgICAgICAgaWYoc3RhdGUuY29tcG9uZW50cy5pbmNsdWRlcyhjb21wb25lbnQpKXtcbiAgICAgICAgICAgIHN0YXRlLmNvbXBvbmVudHMuc3BsaWNlKHN0YXRlLmNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpLCAxKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBuYW1lc3BhY2VkOiB0cnVlLFxuICAgIHN0YXRlLFxuICAgIGdldHRlcnMsXG4gICAgbXV0YXRpb25zXG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/store_modules/visible_components.js\n");

/***/ }),

/***/ "./resources/assets/js/mapping_mapbox/utils.js":
/*!*****************************************************!*\
  !*** ./resources/assets/js/mapping_mapbox/utils.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = {\n  tileSize: 1024,\n  internalTileSize: 1024,\n  mapbox_vector_layer: function mapbox_vector_layer(layer_id) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'fill';\n    var paint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var source_id = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    var version = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n    return {\n      'id': layer_id,\n      'type': type,\n      'source': source_id || module.exports.mapbox_vector_source(layer_id, version),\n      'source-layer': source_id || layer_id,\n      'paint': paint,\n      label: label\n    };\n  },\n  mapbox_vector_source: function mapbox_vector_source(layer_id) {\n    var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    version = version != null ? '?v=' + version : '';\n    return {\n      'type': 'vector',\n      'tiles': [window.Laravel.baseUrl + window.urls.ofac_tiles + layer_id + '/{z}/{x}/{y}.pbf' + version]\n    };\n  },\n  mapbox_wms_source: function mapbox_wms_source(wms_url, layer, tile_size) {\n    wms_url = wms_url.replace(/\\??$/, '?');\n    tile_size = tile_size || module.exports.tileSize;\n    var options = wms_url + 'service=WMS' + '&version=1.1.1' + '&request=GetMap' + '&format=image/png' + '&transparent=true' + '&styles=' + '&layers=' + layer + '&width=' + tile_size + '&height=' + tile_size + '&bbox={bbox-epsg-3857}' + '&srs=EPSG:3857';\n    return {\n      'type': 'raster',\n      'tiles': [options],\n      'tileSize': tile_size\n    };\n  },\n\n  /**\n   * Get MapServer/MapProxy wms layer\n   * @param layer_id\n   * @param label\n   * @param cache [boolean] (true if should pass by MapProxy)\n   * @param custom_attributes\n   * @returns {*}\n   */\n  wms: function wms(layer_id) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var cache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var custom_attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var url = cache === true ? window.urls.ofac_mapproxy : window.urls.ofac_mapserver;\n    url = url.replace(/\\??$/, '?');\n    var options = {\n      'id': layer_id,\n      'type': 'raster',\n      'source': module.exports.mapbox_wms_source(url, layer_id, module.exports.internalTileSize),\n      label: label\n    };\n\n    if (!_.isEmpty(custom_attributes)) {\n      for (var _i = 0, _Object$entries = Object.entries(custom_attributes); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        options[key] = value;\n      }\n    }\n\n    return options;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L3V0aWxzLmpzP2YyMzQiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInRpbGVTaXplIiwiaW50ZXJuYWxUaWxlU2l6ZSIsIm1hcGJveF92ZWN0b3JfbGF5ZXIiLCJsYXllcl9pZCIsImxhYmVsIiwidHlwZSIsInBhaW50Iiwic291cmNlX2lkIiwidmVyc2lvbiIsIm1hcGJveF92ZWN0b3Jfc291cmNlIiwid2luZG93IiwiTGFyYXZlbCIsImJhc2VVcmwiLCJ1cmxzIiwib2ZhY190aWxlcyIsIm1hcGJveF93bXNfc291cmNlIiwid21zX3VybCIsImxheWVyIiwidGlsZV9zaXplIiwicmVwbGFjZSIsIm9wdGlvbnMiLCJ3bXMiLCJjYWNoZSIsImN1c3RvbV9hdHRyaWJ1dGVzIiwidXJsIiwib2ZhY19tYXBwcm94eSIsIm9mYWNfbWFwc2VydmVyIiwiXyIsImlzRW1wdHkiLCJPYmplY3QiLCJlbnRyaWVzIiwia2V5IiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFFYkMsVUFBUSxFQUFFLElBRkc7QUFHYkMsa0JBQWdCLEVBQUUsSUFITDtBQUtiQyxxQkFBbUIsRUFBRSw2QkFBU0MsUUFBVCxFQUE4RjtBQUFBLFFBQTNFQyxLQUEyRSx1RUFBbkUsSUFBbUU7QUFBQSxRQUE3REMsSUFBNkQsdUVBQXRELE1BQXNEO0FBQUEsUUFBOUNDLEtBQThDLHVFQUF0QyxFQUFzQztBQUFBLFFBQWxDQyxTQUFrQyx1RUFBdEIsSUFBc0I7QUFBQSxRQUFoQkMsT0FBZ0IsdUVBQU4sSUFBTTtBQUMvRyxXQUFPO0FBQ0gsWUFBTUwsUUFESDtBQUVILGNBQVFFLElBRkw7QUFHSCxnQkFBVUUsU0FBUyxJQUFJVCxNQUFNLENBQUNDLE9BQVAsQ0FBZVUsb0JBQWYsQ0FBb0NOLFFBQXBDLEVBQThDSyxPQUE5QyxDQUhwQjtBQUlILHNCQUFnQkQsU0FBUyxJQUFJSixRQUoxQjtBQUtILGVBQVNHLEtBTE47QUFNSEYsV0FBSyxFQUFFQTtBQU5KLEtBQVA7QUFRSCxHQWRZO0FBZ0JiSyxzQkFBb0IsRUFBRSw4QkFBU04sUUFBVCxFQUFrQztBQUFBLFFBQWZLLE9BQWUsdUVBQUwsSUFBSztBQUNwREEsV0FBTyxHQUFHQSxPQUFPLElBQUUsSUFBVCxHQUFnQixRQUFNQSxPQUF0QixHQUFnQyxFQUExQztBQUNBLFdBQU87QUFDSCxjQUFRLFFBREw7QUFFSCxlQUFTLENBQ0xFLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlQyxPQUFmLEdBQXlCRixNQUFNLENBQUNHLElBQVAsQ0FBWUMsVUFBckMsR0FBa0RYLFFBQWxELEdBQTZELGtCQUE3RCxHQUFrRkssT0FEN0U7QUFGTixLQUFQO0FBTUgsR0F4Qlk7QUEwQmJPLG1CQUFpQixFQUFFLDJCQUFTQyxPQUFULEVBQWtCQyxLQUFsQixFQUF5QkMsU0FBekIsRUFBbUM7QUFFbERGLFdBQU8sR0FBT0EsT0FBTyxDQUFDRyxPQUFSLENBQWdCLE1BQWhCLEVBQXdCLEdBQXhCLENBQWQ7QUFDQUQsYUFBUyxHQUFLQSxTQUFTLElBQUlwQixNQUFNLENBQUNDLE9BQVAsQ0FBZUMsUUFBMUM7QUFFQSxRQUFJb0IsT0FBTyxHQUFHSixPQUFPLEdBQ2pCLGFBRFUsR0FFVixnQkFGVSxHQUdWLGlCQUhVLEdBSVYsbUJBSlUsR0FLVixtQkFMVSxHQU1WLFVBTlUsR0FPVixVQVBVLEdBT0dDLEtBUEgsR0FRVixTQVJVLEdBUUVDLFNBUkYsR0FTVixVQVRVLEdBU0dBLFNBVEgsR0FVVix3QkFWVSxHQVdWLGdCQVhKO0FBWUEsV0FBTztBQUNILGNBQVEsUUFETDtBQUVILGVBQVMsQ0FBQ0UsT0FBRCxDQUZOO0FBR0gsa0JBQVlGO0FBSFQsS0FBUDtBQUtILEdBaERZOztBQWtEYjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lHLEtBQUcsRUFBRSxhQUFTbEIsUUFBVCxFQUFzRTtBQUFBLFFBQW5EQyxLQUFtRCx1RUFBM0MsSUFBMkM7QUFBQSxRQUFyQ2tCLEtBQXFDLHVFQUE3QixJQUE2QjtBQUFBLFFBQXZCQyxpQkFBdUIsdUVBQUgsRUFBRztBQUN2RSxRQUFJQyxHQUFHLEdBQUdGLEtBQUssS0FBRyxJQUFSLEdBQ0paLE1BQU0sQ0FBQ0csSUFBUCxDQUFZWSxhQURSLEdBRUpmLE1BQU0sQ0FBQ0csSUFBUCxDQUFZYSxjQUZsQjtBQUlBRixPQUFHLEdBQUdBLEdBQUcsQ0FBQ0wsT0FBSixDQUFZLE1BQVosRUFBb0IsR0FBcEIsQ0FBTjtBQUVBLFFBQUlDLE9BQU8sR0FBRztBQUNWLFlBQU1qQixRQURJO0FBRVYsY0FBUSxRQUZFO0FBR1YsZ0JBQVVMLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlZ0IsaUJBQWYsQ0FBaUNTLEdBQWpDLEVBQXNDckIsUUFBdEMsRUFBZ0RMLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlRSxnQkFBL0QsQ0FIQTtBQUlWRyxXQUFLLEVBQUVBO0FBSkcsS0FBZDs7QUFNQSxRQUFHLENBQUN1QixDQUFDLENBQUNDLE9BQUYsQ0FBVUwsaUJBQVYsQ0FBSixFQUFpQztBQUM3Qix5Q0FBeUJNLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlUCxpQkFBZixDQUF6QixxQ0FBNEQ7QUFBQTtBQUFBLFlBQWxEUSxHQUFrRDtBQUFBLFlBQTdDQyxLQUE2Qzs7QUFDeERaLGVBQU8sQ0FBQ1csR0FBRCxDQUFQLEdBQWVDLEtBQWY7QUFDSDtBQUNKOztBQUNELFdBQU9aLE9BQVA7QUFDSDtBQTdFWSxDQUFqQiIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHMvanMvbWFwcGluZ19tYXBib3gvdXRpbHMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIHRpbGVTaXplOiAxMDI0LFxuICAgIGludGVybmFsVGlsZVNpemU6IDEwMjQsXG5cbiAgICBtYXBib3hfdmVjdG9yX2xheWVyOiBmdW5jdGlvbihsYXllcl9pZCwgbGFiZWwgPSBudWxsLCB0eXBlID0gJ2ZpbGwnLCBwYWludCA9IHt9LCBzb3VyY2VfaWQgPSBudWxsLCB2ZXJzaW9uID0gbnVsbCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ2lkJzogbGF5ZXJfaWQsXG4gICAgICAgICAgICAndHlwZSc6IHR5cGUsXG4gICAgICAgICAgICAnc291cmNlJzogc291cmNlX2lkIHx8IG1vZHVsZS5leHBvcnRzLm1hcGJveF92ZWN0b3Jfc291cmNlKGxheWVyX2lkLCB2ZXJzaW9uKSxcbiAgICAgICAgICAgICdzb3VyY2UtbGF5ZXInOiBzb3VyY2VfaWQgfHwgbGF5ZXJfaWQsXG4gICAgICAgICAgICAncGFpbnQnOiBwYWludCxcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbFxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1hcGJveF92ZWN0b3Jfc291cmNlOiBmdW5jdGlvbihsYXllcl9pZCwgdmVyc2lvbiA9IG51bGwpe1xuICAgICAgICB2ZXJzaW9uID0gdmVyc2lvbiE9bnVsbCA/ICc/dj0nK3ZlcnNpb24gOiAnJztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICd0eXBlJzogJ3ZlY3RvcicsXG4gICAgICAgICAgICAndGlsZXMnOiBbXG4gICAgICAgICAgICAgICAgd2luZG93LkxhcmF2ZWwuYmFzZVVybCArIHdpbmRvdy51cmxzLm9mYWNfdGlsZXMgKyBsYXllcl9pZCArICcve3p9L3t4fS97eX0ucGJmJyArIHZlcnNpb25cbiAgICAgICAgICAgIF1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtYXBib3hfd21zX3NvdXJjZTogZnVuY3Rpb24od21zX3VybCwgbGF5ZXIsIHRpbGVfc2l6ZSl7XG5cbiAgICAgICAgd21zX3VybCAgICAgPSB3bXNfdXJsLnJlcGxhY2UoL1xcPz8kLywgJz8nKTtcbiAgICAgICAgdGlsZV9zaXplICAgPSB0aWxlX3NpemUgfHwgbW9kdWxlLmV4cG9ydHMudGlsZVNpemU7XG5cbiAgICAgICAgbGV0IG9wdGlvbnMgPSB3bXNfdXJsICtcbiAgICAgICAgICAgICdzZXJ2aWNlPVdNUycgK1xuICAgICAgICAgICAgJyZ2ZXJzaW9uPTEuMS4xJyArXG4gICAgICAgICAgICAnJnJlcXVlc3Q9R2V0TWFwJyArXG4gICAgICAgICAgICAnJmZvcm1hdD1pbWFnZS9wbmcnICtcbiAgICAgICAgICAgICcmdHJhbnNwYXJlbnQ9dHJ1ZScgK1xuICAgICAgICAgICAgJyZzdHlsZXM9JyArXG4gICAgICAgICAgICAnJmxheWVycz0nICsgbGF5ZXIgK1xuICAgICAgICAgICAgJyZ3aWR0aD0nICsgdGlsZV9zaXplICtcbiAgICAgICAgICAgICcmaGVpZ2h0PScgKyB0aWxlX3NpemUgK1xuICAgICAgICAgICAgJyZiYm94PXtiYm94LWVwc2ctMzg1N30nICtcbiAgICAgICAgICAgICcmc3JzPUVQU0c6Mzg1Nyc7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAndHlwZSc6ICdyYXN0ZXInLFxuICAgICAgICAgICAgJ3RpbGVzJzogW29wdGlvbnNdLFxuICAgICAgICAgICAgJ3RpbGVTaXplJzogdGlsZV9zaXplXG4gICAgICAgIH07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEdldCBNYXBTZXJ2ZXIvTWFwUHJveHkgd21zIGxheWVyXG4gICAgICogQHBhcmFtIGxheWVyX2lkXG4gICAgICogQHBhcmFtIGxhYmVsXG4gICAgICogQHBhcmFtIGNhY2hlIFtib29sZWFuXSAodHJ1ZSBpZiBzaG91bGQgcGFzcyBieSBNYXBQcm94eSlcbiAgICAgKiBAcGFyYW0gY3VzdG9tX2F0dHJpYnV0ZXNcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICB3bXM6IGZ1bmN0aW9uKGxheWVyX2lkLCBsYWJlbCA9IG51bGwsIGNhY2hlID0gdHJ1ZSwgY3VzdG9tX2F0dHJpYnV0ZXMgPSB7fSl7XG4gICAgICAgIGxldCB1cmwgPSBjYWNoZT09PXRydWVcbiAgICAgICAgICAgID8gd2luZG93LnVybHMub2ZhY19tYXBwcm94eVxuICAgICAgICAgICAgOiB3aW5kb3cudXJscy5vZmFjX21hcHNlcnZlcjtcblxuICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFw/PyQvLCAnPycpO1xuXG4gICAgICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgICAgICAgJ2lkJzogbGF5ZXJfaWQsXG4gICAgICAgICAgICAndHlwZSc6ICdyYXN0ZXInLFxuICAgICAgICAgICAgJ3NvdXJjZSc6IG1vZHVsZS5leHBvcnRzLm1hcGJveF93bXNfc291cmNlKHVybCwgbGF5ZXJfaWQsIG1vZHVsZS5leHBvcnRzLmludGVybmFsVGlsZVNpemUpLFxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsXG4gICAgICAgIH07XG4gICAgICAgIGlmKCFfLmlzRW1wdHkoY3VzdG9tX2F0dHJpYnV0ZXMpKXtcbiAgICAgICAgICAgIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhjdXN0b21fYXR0cmlidXRlcykpIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9LFxuXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets/js/mapping_mapbox/utils.js\n");

/***/ }),

/***/ 2:
/*!**********************************************!*\
  !*** multi ./resources/assets/js/mapping.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /var/www/html/resources/assets/js/mapping.js */"./resources/assets/js/mapping.js");


/***/ })

/******/ });
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzP2YyOGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/process/browser.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping.js":
/*!****************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(process) {// Environment variables\nwindow.mapbox_access_token = process.env.MIX_MAPBOX_ACCESS_TOKEN; // Urls\n\nwindow.urls = window.urls || {};\nwindow.urls.ofac_mapserver = 'https://ies-ows.jrc.ec.europa.eu/ofac/' + 'ofacgeo.php?';\nwindow.urls.ofac_mapproxy = 'https://www.observatoire-comifac.net/mapproxy/service';\nwindow.urls.ofac_tiles = 'tiles/';\nwindow.urls.dopa_geoserver = 'https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms'; // Mapping\n\nwindow.WebMapping = {};\nwindow.WebMapping.Leaflet = __webpack_require__(/*! ./mapping_leaflet/utils.js */ \"./resources/assets_imet/assets/js/mapping_leaflet/utils.js\");\nwindow.WebMapping.Leaflet.Layers = __webpack_require__(/*! ./mapping_leaflet/layers.js */ \"./resources/assets_imet/assets/js/mapping_leaflet/layers.js\");\nwindow.WebMapping.Mapbox = __webpack_require__(/*! ./mapping_mapbox/utils.js */ \"./resources/assets_imet/assets/js/mapping_mapbox/utils.js\");\nwindow.WebMapping.Mapbox.Layers = __webpack_require__(/*! ./mapping_mapbox/layers.js */ \"./resources/assets_imet/assets/js/mapping_mapbox/layers.js\");\n\n__webpack_require__(/*! ./mapping_mapbox/platform.js */ \"./resources/assets_imet/assets/js/mapping_mapbox/platform.js\");\n\n__webpack_require__(/*! ./mapping_mapbox/demo.js */ \"./resources/assets_imet/assets/js/mapping_mapbox/demo.js\");\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../node_modules/process/browser.js */ \"./node_modules/process/browser.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzX2ltZXQvYXNzZXRzL2pzL21hcHBpbmcuanM/MmU2NSJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJtYXBib3hfYWNjZXNzX3Rva2VuIiwicHJvY2VzcyIsImVudiIsIk1JWF9NQVBCT1hfQUNDRVNTX1RPS0VOIiwidXJscyIsIm9mYWNfbWFwc2VydmVyIiwib2ZhY19tYXBwcm94eSIsIm9mYWNfdGlsZXMiLCJkb3BhX2dlb3NlcnZlciIsIldlYk1hcHBpbmciLCJMZWFmbGV0IiwicmVxdWlyZSIsIkxheWVycyIsIk1hcGJveCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQUEsTUFBTSxDQUFDQyxtQkFBUCxHQUE2QkMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLHVCQUF6QyxDLENBRUE7O0FBQ0FKLE1BQU0sQ0FBQ0ssSUFBUCxHQUFjTCxNQUFNLENBQUNLLElBQVAsSUFBZSxFQUE3QjtBQUNBTCxNQUFNLENBQUNLLElBQVAsQ0FBWUMsY0FBWixHQUE2QiwyQ0FBMkMsY0FBeEU7QUFDQU4sTUFBTSxDQUFDSyxJQUFQLENBQVlFLGFBQVosR0FBNEIsdURBQTVCO0FBQ0FQLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZRyxVQUFaLEdBQXlCLFFBQXpCO0FBQ0FSLE1BQU0sQ0FBQ0ssSUFBUCxDQUFZSSxjQUFaLEdBQTZCLG1FQUE3QixDLENBRUE7O0FBQ0FULE1BQU0sQ0FBQ1UsVUFBUCxHQUFvQixFQUFwQjtBQUNBVixNQUFNLENBQUNVLFVBQVAsQ0FBa0JDLE9BQWxCLEdBQTRCQyxtQkFBTyxDQUFDLDhGQUFELENBQW5DO0FBQ0FaLE1BQU0sQ0FBQ1UsVUFBUCxDQUFrQkMsT0FBbEIsQ0FBMEJFLE1BQTFCLEdBQW1DRCxtQkFBTyxDQUFDLGdHQUFELENBQTFDO0FBQ0FaLE1BQU0sQ0FBQ1UsVUFBUCxDQUFrQkksTUFBbEIsR0FBMkJGLG1CQUFPLENBQUMsNEZBQUQsQ0FBbEM7QUFDQVosTUFBTSxDQUFDVSxVQUFQLENBQWtCSSxNQUFsQixDQUF5QkQsTUFBekIsR0FBa0NELG1CQUFPLENBQUMsOEZBQUQsQ0FBekM7O0FBQ0FBLG1CQUFPLENBQUMsa0dBQUQsQ0FBUDs7QUFDQUEsbUJBQU8sQ0FBQywwRkFBRCxDQUFQLEMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzX2ltZXQvYXNzZXRzL2pzL21hcHBpbmcuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFbnZpcm9ubWVudCB2YXJpYWJsZXNcbndpbmRvdy5tYXBib3hfYWNjZXNzX3Rva2VuID0gcHJvY2Vzcy5lbnYuTUlYX01BUEJPWF9BQ0NFU1NfVE9LRU47XG5cbi8vIFVybHNcbndpbmRvdy51cmxzID0gd2luZG93LnVybHMgfHwge307XG53aW5kb3cudXJscy5vZmFjX21hcHNlcnZlciA9ICdodHRwczovL2llcy1vd3MuanJjLmVjLmV1cm9wYS5ldS9vZmFjLycgKyAnb2ZhY2dlby5waHA/JztcbndpbmRvdy51cmxzLm9mYWNfbWFwcHJveHkgPSAnaHR0cHM6Ly93d3cub2JzZXJ2YXRvaXJlLWNvbWlmYWMubmV0L21hcHByb3h5L3NlcnZpY2UnO1xud2luZG93LnVybHMub2ZhY190aWxlcyA9ICd0aWxlcy8nO1xud2luZG93LnVybHMuZG9wYV9nZW9zZXJ2ZXIgPSAnaHR0cHM6Ly9nZW9zcGF0aWFsLmpyYy5lYy5ldXJvcGEuZXUvZ2Vvc2VydmVyL2RvcGFfZXhwbG9yZXJfMy93bXMnO1xuXG4vLyBNYXBwaW5nXG53aW5kb3cuV2ViTWFwcGluZyA9IHt9O1xud2luZG93LldlYk1hcHBpbmcuTGVhZmxldCA9IHJlcXVpcmUoJy4vbWFwcGluZ19sZWFmbGV0L3V0aWxzLmpzJyk7XG53aW5kb3cuV2ViTWFwcGluZy5MZWFmbGV0LkxheWVycyA9IHJlcXVpcmUoJy4vbWFwcGluZ19sZWFmbGV0L2xheWVycy5qcycpO1xud2luZG93LldlYk1hcHBpbmcuTWFwYm94ID0gcmVxdWlyZSgnLi9tYXBwaW5nX21hcGJveC91dGlscy5qcycpO1xud2luZG93LldlYk1hcHBpbmcuTWFwYm94LkxheWVycyA9IHJlcXVpcmUoJy4vbWFwcGluZ19tYXBib3gvbGF5ZXJzLmpzJyk7XG5yZXF1aXJlKCcuL21hcHBpbmdfbWFwYm94L3BsYXRmb3JtLmpzJyk7XG5yZXF1aXJlKCcuL21hcHBpbmdfbWFwYm94L2RlbW8uanMnKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_leaflet/layers.js":
/*!*******************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_leaflet/layers.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  // ##########  Base maps - backgrounds  ##########\n  mapbox_streets: window.WebMapping.Leaflet.mapbox_layer('streets', Locale.getLabel('mapping.layers.mapbox_streets')),\n  mapbox_light: window.WebMapping.Leaflet.mapbox_layer('light', Locale.getLabel('mapping.layers.mapbox_light')),\n  mapbox_satellite: window.WebMapping.Leaflet.mapbox_layer('satellite', Locale.getLabel('mapping.layers.mapbox_satellite')),\n  // ##########  Rasters  ##########\n  comifac: window.WebMapping.Leaflet.mapproxy_wms('comifac', Locale.getLabel('mapping.layers.comifac'), {\n    attribution: '<div style=\"width: 800px;\">' + '<b>Image source de base :</b> Verhegghen, A., Mayaux, P., de Wasseige, C., and Defourny, P.: ' + 'Mapping Congo Basin vegetation types from 300 m and 1 km multi-sensor time series for carbon stocks' + ' and forest areas estimation, Biogeosciences, 9, 5061-5079, doi:10.5194/bg-9-5061-2012, 2012. ' + '<a target=\"_blank\" href=\"http://www.biogeosciences.net/9/5061/2012/bg-9-5061-2012.html\">biogeosciences.net</a>' + '<br/><b>Données sources ajoutées :</b> SRTM de la Nasa, OSM et OFAC' + '<br/><b>Traitée :</b> Mai 2015, <a target=\"_blank\" href=\"/docs/atlas/mapsteps.pdf\">Etapes de réalisation</a></div>'\n  }),\n  spotvgt: window.WebMapping.Leaflet.mapproxy_wms('spotvgt', Locale.getLabel('mapping.layers.spotvgt')),\n  modis: window.WebMapping.Leaflet.mapproxy_wms('modis', Locale.getLabel('mapping.layers.modis')),\n  srtm: window.WebMapping.Leaflet.mapproxy_wms('srtm', Locale.getLabel('mapping.layers.srtm')),\n  glc2000: window.WebMapping.Leaflet.mapproxy_wms('glc2000', Locale.getLabel('mapping.layers.glc2000')),\n  congo_basin_vegetation_map: window.WebMapping.Leaflet.mapproxy_wms('congo_basin_vegetation_map', Locale.getLabel('mapping.layers.congo_basin_vegetation_map')),\n  total_carbon: window.WebMapping.Leaflet.mapproxy_wms('total_carbon', Locale.getLabel('mapping.layers.total_carbon')),\n  // ##########  External Resources  ##########\n  tree_cover: window.Leaflet.tileLayer.wms(\"http://50.18.182.188:6080/arcgis/services/TreeCover2000/ImageServer/WMSServer?\", {\n    layers: '0',\n    format: 'image/png',\n    transparent: true,\n    attribution: 'Hansen/UMD/Google/USGS/NASA, Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>',\n    label: 'Tree Cover (2000-2010)',\n    \"abstract\": encodeURI('Hansen, M. C., P. V. Potapov, R. Moore, M. Hancher, S. A. Turubanova, A. Tyukavina, D. Thau, S. V. Stehman, S. J. Goetz, ' + 'T. R. Loveland, A. Kommareddy, A. Egorov, L. Chini, C. O. Justice, and J. R. G. Townshend. 2013. <b>“High-Resolution Global Maps of 21st-Century Forest Cover Change.”</b> ' + 'Science 342 (15 November): 850–53. Data available on-line from: <a href=\"https://glad.umd.edu/dataset/global-2010-tree-cover-30-m\" target=\"_blank\">https://glad.umd.edu/dataset/global-2010-tree-cover-30-m</a>. ' + 'Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  }),\n  intact_forest: window.Leaflet.tileLayer('https://storage.googleapis.com/earthenginepartners-hansen/tiles/intact_forest_2016/{z}/{x}/{y}.png?', {\n    attribution: '<a href=\"http://www.intactforests.org\" target=\"_blank\">Intact Forest Landscape (IFL)</a>',\n    label: 'Intact Forest Landscapes (IFL 2000-2016)',\n    \"abstract\": encodeURI('Greenpeace, University of Maryland, World Resources Institute and Transparent World. “Intact Forest Landscapes. 2000/2013/2016” ' + 'Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  }),\n  // ##########  Overlays  ##########\n  borders: window.WebMapping.Leaflet.mapserver_wms('borders', null, {}),\n  landscapes: window.WebMapping.Leaflet.mapproxy_wms('landscapes', Locale.getLabel('entities.landscape', 2)),\n  klc: window.WebMapping.Leaflet.mapproxy_wms('klc', Locale.getLabel('entities.klc', 2)),\n  concessions: window.WebMapping.Leaflet.mapserver_wms('concessions', Locale.getLabel('form/concession.concession', 2)),\n  protected_areas: window.WebMapping.Leaflet.mapproxy_wms('protected_areas', Locale.getLabel('form/protected_area.protected_area', 2))\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_leaflet/layers.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_leaflet/utils.js":
/*!******************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_leaflet/utils.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = {\n  tileSize: 1024,\n\n  /**\n   * Get MapProxy wms layer\n   * @param layer_name\n   * @param label\n   * @param custom_attributes\n   * @returns {*}\n   */\n  mapproxy_wms: function mapproxy_wms(layer_name) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var custom_attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var self = this;\n    var options = {\n      layers: layer_name,\n      format: 'image/png',\n      transparent: true,\n      tileSize: self.tileSize,\n      label: label\n    };\n\n    if (!_.isEmpty(custom_attributes)) {\n      for (var _i = 0, _Object$entries = Object.entries(custom_attributes); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        options[key] = value;\n      }\n    }\n\n    return window.Leaflet.tileLayer.wms(window.urls.ofac_mapproxy, options);\n  },\n  vector_tiles: function vector_tiles(layer_name) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var custom_attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var bounds = window.Leaflet.latLngBounds(window.Leaflet.latLng(-11.125875, 5.566434), window.Leaflet.latLng(17.936017, 30.837150));\n    return window.Leaflet.vectorGrid.protobuf('https://h03-stg-ofac.jrc.it/tiles/' + layer_name + '/{z}/{x}/{y}.pbf', {\n      vectorTileLayerStyles: {\n        protected_area: {\n          color: '#ff6666',\n          opacity: 0.6,\n          weight: 2,\n          fillColor: '#ffaaaa',\n          fillOpacity: 0.6,\n          fill: true\n        }\n      },\n      bounds: bounds,\n      key: 'protected_area',\n      id: 'protected_area',\n      label: label\n    });\n  },\n\n  /**\n   * Get OFAC wms layer\n   * @param layer_name\n   * @param label\n   * @param custom_attributes\n   * @returns {*}\n   */\n  mapserver_wms: function mapserver_wms(layer_name) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var custom_attributes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var self = this;\n    var options = {\n      layers: layer_name,\n      format: 'image/png',\n      transparent: true,\n      tileSize: self.tileSize,\n      label: label\n    };\n\n    if (!_.isEmpty(custom_attributes)) {\n      for (var _i2 = 0, _Object$entries2 = Object.entries(custom_attributes); _i2 < _Object$entries2.length; _i2++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n            key = _Object$entries2$_i[0],\n            value = _Object$entries2$_i[1];\n\n        options[key] = value;\n      }\n    }\n\n    return window.Leaflet.tileLayer.wms(window.urls.ofac_mapserver, options);\n  },\n\n  /**\n   * Get Mapbox layer\n   * @param style\n   * @param label\n   */\n  mapbox_layer: function mapbox_layer(style) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    style = style === 'streets' ? 'streets-v11' : style;\n    style = style === 'light' ? 'light-v10' : style;\n    style = style === 'satellite' ? 'satellite-v9' : style;\n    var self = this;\n    return window.Leaflet.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=' + window.mapbox_access_token, {\n      tileSize: 512,\n      maxZoom: 18,\n      zoomOffset: -1,\n      id: 'mapbox/' + style,\n      attribution: 'Map data &copy; <a target=\"_blank\" href=\"http://openstreetmap.org\">OpenStreetMap</a> contributors, ' + '<a target=\"_blank\" href=\"http://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, ' + 'Imagery © <a target=\"_blank\" href=\"http://mapbox.com\">Mapbox</a>',\n      label: label\n    });\n  },\n\n  /**\n   * Projects platform: get marker-cluster\n   * @param points\n   */\n  project_markerCluster: function project_markerCluster(points, label) {\n    var marker_cluster = window.Leaflet.markerClusterGroup({\n      iconCreateFunction: function iconCreateFunction(cluster) {\n        return new window.Leaflet.DivIcon({\n          html: '<div><span class=\"marker-count\">' + cluster.getChildCount() + '</span></div>',\n          className: 'marker-cluster',\n          iconSize: new window.Leaflet.Point(40, 40)\n        });\n      },\n      showCoverageOnHover: false,\n      zoomToBoundsOnClick: false,\n      label: label\n    });\n    points.forEach(function (project) {\n      var _project = _slicedToArray(project, 5),\n          lat = _project[0],\n          lon = _project[1],\n          popupInfo = _project[2],\n          title = _project[3],\n          status = _project[4];\n\n      var icon = 'asterisk';\n      var color = 'lightgray';\n\n      if (status === 'finished') {\n        color = 'red';\n      } else if (status === 'ongoing') {\n        color = 'green';\n      } else if (status === 'planned') {\n        color = 'orange';\n      }\n\n      var marker = window.Leaflet.marker(new window.Leaflet.LatLng(lat, lon), {\n        title: title,\n        icon: window.Leaflet.AwesomeMarkers.icon({\n          markerColor: color,\n          prefix: 'fa',\n          icon: icon,\n          iconColor: 'white'\n        })\n      });\n      marker.bindPopup(popupInfo);\n      marker_cluster.addLayer(marker);\n    });\n    return marker_cluster;\n  },\n  getLayersForLeaftletControl: function getLayersForLeaftletControl(layers) {\n    var result = {};\n    layers.forEach(function (layer) {\n      result[layer.options.label] = layer;\n    });\n    return result;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_leaflet/utils.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/demo.js":
/*!****************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/demo.js ***!
  \****************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _mixins_map_mixin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mixins/map.mixin */ \"./resources/assets_imet/assets/js/mapping_mapbox/mixins/map.mixin.js\");\n/* harmony import */ var _mixins_layers_interactivity_mixin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mixins/layers/interactivity.mixin */ \"./resources/assets_imet/assets/js/mapping_mapbox/mixins/layers/interactivity.mixin.js\");\n\n\nwindow.WebMapping.Mapbox.Demo = Vue.extend({\n  mixins: [_mixins_map_mixin__WEBPACK_IMPORTED_MODULE_0__[\"default\"], _mixins_layers_interactivity_mixin__WEBPACK_IMPORTED_MODULE_1__[\"default\"]],\n  data: function data() {\n    return {\n      Locale: window.Locale,\n      csrf: window.Laravel.csrfToken,\n      layers: {\n        demo: {\n          landscapes_water_transitions: window.WebMapping.Mapbox.Layers.landscapes_water_transitions,\n          landscapes_forest_loss_masked: window.WebMapping.Mapbox.Layers.landscapes_forest_loss_masked,\n          landscapes_forest_mask: window.WebMapping.Mapbox.Layers.landscapes_forest_mask,\n          //lc300_class4_1995: window.WebMapping.Mapbox.Layers.lc300_class4_1995,\n          //lc300_class4_2015: window.WebMapping.Mapbox.Layers.lc300_class4_2015,\n          //lc300_class4_2018: window.WebMapping.Mapbox.Layers.lc300_class4_2018,\n          landscapes_lc300_1995_2015: window.WebMapping.Mapbox.Layers.landscapes_lc300_1995_2015,\n          landscapes_lc300_2015_2018: window.WebMapping.Mapbox.Layers.landscapes_lc300_2015_2018,\n          landscapes_above_ground_carbon: window.WebMapping.Mapbox.Layers.landscapes_above_ground_carbon,\n          landscapes_below_ground_carbon: window.WebMapping.Mapbox.Layers.landscapes_below_ground_carbon,\n          landscapes_soil_organic_carbon: window.WebMapping.Mapbox.Layers.landscapes_soil_organic_carbon,\n          landscapes_total_carbon: window.WebMapping.Mapbox.Layers.landscapes_total_carbon\n        },\n        overlays: {\n          comifac_mask: window.WebMapping.Mapbox.Layers.comifac_mask,\n          comifac_eez: window.WebMapping.Mapbox.Layers.comifac_eez,\n          countries: window.WebMapping.Mapbox.Layers.countries,\n          landscapes: window.WebMapping.Mapbox.Layers.landscapes,\n          klc: window.WebMapping.Mapbox.Layers.klc,\n          concessions: window.WebMapping.Mapbox.Layers.concessions,\n          protected_areas: window.WebMapping.Mapbox.Layers.protected_areas\n        }\n      },\n      map_loading: false,\n      close_layer_selector_onclick: false\n    };\n  },\n  mounted: function mounted() {\n    this.initMap();\n    this.map_loading = false;\n  },\n  methods: {}\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzX2ltZXQvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L2RlbW8uanM/MTFhZSJdLCJuYW1lcyI6WyJ3aW5kb3ciLCJXZWJNYXBwaW5nIiwiTWFwYm94IiwiRGVtbyIsIlZ1ZSIsImV4dGVuZCIsIm1peGlucyIsIm1hcCIsImxheWVyc19pbnRlcmFjdGl2aXR5IiwiZGF0YSIsIkxvY2FsZSIsImNzcmYiLCJMYXJhdmVsIiwiY3NyZlRva2VuIiwibGF5ZXJzIiwiZGVtbyIsImxhbmRzY2FwZXNfd2F0ZXJfdHJhbnNpdGlvbnMiLCJMYXllcnMiLCJsYW5kc2NhcGVzX2ZvcmVzdF9sb3NzX21hc2tlZCIsImxhbmRzY2FwZXNfZm9yZXN0X21hc2siLCJsYW5kc2NhcGVzX2xjMzAwXzE5OTVfMjAxNSIsImxhbmRzY2FwZXNfbGMzMDBfMjAxNV8yMDE4IiwibGFuZHNjYXBlc19hYm92ZV9ncm91bmRfY2FyYm9uIiwibGFuZHNjYXBlc19iZWxvd19ncm91bmRfY2FyYm9uIiwibGFuZHNjYXBlc19zb2lsX29yZ2FuaWNfY2FyYm9uIiwibGFuZHNjYXBlc190b3RhbF9jYXJib24iLCJvdmVybGF5cyIsImNvbWlmYWNfbWFzayIsImNvbWlmYWNfZWV6IiwiY291bnRyaWVzIiwibGFuZHNjYXBlcyIsImtsYyIsImNvbmNlc3Npb25zIiwicHJvdGVjdGVkX2FyZWFzIiwibWFwX2xvYWRpbmciLCJjbG9zZV9sYXllcl9zZWxlY3Rvcl9vbmNsaWNrIiwibW91bnRlZCIsImluaXRNYXAiLCJtZXRob2RzIl0sIm1hcHBpbmdzIjoiQUFDQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBR0FBLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLElBQXpCLEdBQWdDQyxHQUFHLENBQUNDLE1BQUosQ0FBVztBQUV2Q0MsUUFBTSxFQUFFLENBQ0pDLHlEQURJLEVBRUpDLDBFQUZJLENBRitCO0FBT3ZDQyxNQUFJLEVBQUUsZ0JBQVk7QUFDZCxXQUFPO0FBRUhDLFlBQU0sRUFBRVYsTUFBTSxDQUFDVSxNQUZaO0FBR0hDLFVBQUksRUFBRVgsTUFBTSxDQUFDWSxPQUFQLENBQWVDLFNBSGxCO0FBS0hDLFlBQU0sRUFBRTtBQUNKQyxZQUFJLEVBQUU7QUFDRkMsc0NBQTRCLEVBQUVoQixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCZSxNQUF6QixDQUFnQ0QsNEJBRDVEO0FBRUZFLHVDQUE2QixFQUFFbEIsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QmUsTUFBekIsQ0FBZ0NDLDZCQUY3RDtBQUdGQyxnQ0FBc0IsRUFBRW5CLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJlLE1BQXpCLENBQWdDRSxzQkFIdEQ7QUFJRjtBQUNBO0FBQ0E7QUFDQUMsb0NBQTBCLEVBQUVwQixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCZSxNQUF6QixDQUFnQ0csMEJBUDFEO0FBUUZDLG9DQUEwQixFQUFFckIsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QmUsTUFBekIsQ0FBZ0NJLDBCQVIxRDtBQVNGQyx3Q0FBOEIsRUFBRXRCLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJlLE1BQXpCLENBQWdDSyw4QkFUOUQ7QUFVRkMsd0NBQThCLEVBQUV2QixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCZSxNQUF6QixDQUFnQ00sOEJBVjlEO0FBV0ZDLHdDQUE4QixFQUFFeEIsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QmUsTUFBekIsQ0FBZ0NPLDhCQVg5RDtBQVlGQyxpQ0FBdUIsRUFBRXpCLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJlLE1BQXpCLENBQWdDUTtBQVp2RCxTQURGO0FBZUpDLGdCQUFRLEVBQUU7QUFDTkMsc0JBQVksRUFBRTNCLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJlLE1BQXpCLENBQWdDVSxZQUR4QztBQUVOQyxxQkFBVyxFQUFFNUIsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QmUsTUFBekIsQ0FBZ0NXLFdBRnZDO0FBR05DLG1CQUFTLEVBQUU3QixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCZSxNQUF6QixDQUFnQ1ksU0FIckM7QUFJTkMsb0JBQVUsRUFBRTlCLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJlLE1BQXpCLENBQWdDYSxVQUp0QztBQUtOQyxhQUFHLEVBQUUvQixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCZSxNQUF6QixDQUFnQ2MsR0FML0I7QUFNTkMscUJBQVcsRUFBRWhDLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJlLE1BQXpCLENBQWdDZSxXQU52QztBQU9OQyx5QkFBZSxFQUFFakMsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QmUsTUFBekIsQ0FBZ0NnQjtBQVAzQztBQWZOLE9BTEw7QUErQkhDLGlCQUFXLEVBQUUsS0EvQlY7QUFpQ0hDLGtDQUE0QixFQUFFO0FBakMzQixLQUFQO0FBbUNILEdBM0NzQztBQTZDdkNDLFNBN0N1QyxxQkE2QzlCO0FBQ0wsU0FBS0MsT0FBTDtBQUNBLFNBQUtILFdBQUwsR0FBbUIsS0FBbkI7QUFDSCxHQWhEc0M7QUFrRHZDSSxTQUFPLEVBQUU7QUFsRDhCLENBQVgsQ0FBaEMiLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzX2ltZXQvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L2RlbW8uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCBtYXAgZnJvbSAnLi9taXhpbnMvbWFwLm1peGluJztcbmltcG9ydCBsYXllcnNfaW50ZXJhY3Rpdml0eSBmcm9tIFwiLi9taXhpbnMvbGF5ZXJzL2ludGVyYWN0aXZpdHkubWl4aW5cIjtcblxuXG53aW5kb3cuV2ViTWFwcGluZy5NYXBib3guRGVtbyA9IFZ1ZS5leHRlbmQoe1xuXG4gICAgbWl4aW5zOiBbXG4gICAgICAgIG1hcCxcbiAgICAgICAgbGF5ZXJzX2ludGVyYWN0aXZpdHksXG4gICAgXSxcblxuICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcblxuICAgICAgICAgICAgTG9jYWxlOiB3aW5kb3cuTG9jYWxlLFxuICAgICAgICAgICAgY3NyZjogd2luZG93LkxhcmF2ZWwuY3NyZlRva2VuLFxuXG4gICAgICAgICAgICBsYXllcnM6IHtcbiAgICAgICAgICAgICAgICBkZW1vOiB7XG4gICAgICAgICAgICAgICAgICAgIGxhbmRzY2FwZXNfd2F0ZXJfdHJhbnNpdGlvbnM6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMubGFuZHNjYXBlc193YXRlcl90cmFuc2l0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbGFuZHNjYXBlc19mb3Jlc3RfbG9zc19tYXNrZWQ6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMubGFuZHNjYXBlc19mb3Jlc3RfbG9zc19tYXNrZWQsXG4gICAgICAgICAgICAgICAgICAgIGxhbmRzY2FwZXNfZm9yZXN0X21hc2s6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMubGFuZHNjYXBlc19mb3Jlc3RfbWFzayxcbiAgICAgICAgICAgICAgICAgICAgLy9sYzMwMF9jbGFzczRfMTk5NTogd2luZG93LldlYk1hcHBpbmcuTWFwYm94LkxheWVycy5sYzMwMF9jbGFzczRfMTk5NSxcbiAgICAgICAgICAgICAgICAgICAgLy9sYzMwMF9jbGFzczRfMjAxNTogd2luZG93LldlYk1hcHBpbmcuTWFwYm94LkxheWVycy5sYzMwMF9jbGFzczRfMjAxNSxcbiAgICAgICAgICAgICAgICAgICAgLy9sYzMwMF9jbGFzczRfMjAxODogd2luZG93LldlYk1hcHBpbmcuTWFwYm94LkxheWVycy5sYzMwMF9jbGFzczRfMjAxOCxcbiAgICAgICAgICAgICAgICAgICAgbGFuZHNjYXBlc19sYzMwMF8xOTk1XzIwMTU6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMubGFuZHNjYXBlc19sYzMwMF8xOTk1XzIwMTUsXG4gICAgICAgICAgICAgICAgICAgIGxhbmRzY2FwZXNfbGMzMDBfMjAxNV8yMDE4OiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3guTGF5ZXJzLmxhbmRzY2FwZXNfbGMzMDBfMjAxNV8yMDE4LFxuICAgICAgICAgICAgICAgICAgICBsYW5kc2NhcGVzX2Fib3ZlX2dyb3VuZF9jYXJib246IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMubGFuZHNjYXBlc19hYm92ZV9ncm91bmRfY2FyYm9uLFxuICAgICAgICAgICAgICAgICAgICBsYW5kc2NhcGVzX2JlbG93X2dyb3VuZF9jYXJib246IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMubGFuZHNjYXBlc19iZWxvd19ncm91bmRfY2FyYm9uLFxuICAgICAgICAgICAgICAgICAgICBsYW5kc2NhcGVzX3NvaWxfb3JnYW5pY19jYXJib246IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMubGFuZHNjYXBlc19zb2lsX29yZ2FuaWNfY2FyYm9uLFxuICAgICAgICAgICAgICAgICAgICBsYW5kc2NhcGVzX3RvdGFsX2NhcmJvbjogd2luZG93LldlYk1hcHBpbmcuTWFwYm94LkxheWVycy5sYW5kc2NhcGVzX3RvdGFsX2NhcmJvbixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG92ZXJsYXlzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbWlmYWNfbWFzazogd2luZG93LldlYk1hcHBpbmcuTWFwYm94LkxheWVycy5jb21pZmFjX21hc2ssXG4gICAgICAgICAgICAgICAgICAgIGNvbWlmYWNfZWV6OiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3guTGF5ZXJzLmNvbWlmYWNfZWV6LFxuICAgICAgICAgICAgICAgICAgICBjb3VudHJpZXM6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMuY291bnRyaWVzLFxuICAgICAgICAgICAgICAgICAgICBsYW5kc2NhcGVzOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3guTGF5ZXJzLmxhbmRzY2FwZXMsXG4gICAgICAgICAgICAgICAgICAgIGtsYzogd2luZG93LldlYk1hcHBpbmcuTWFwYm94LkxheWVycy5rbGMsXG4gICAgICAgICAgICAgICAgICAgIGNvbmNlc3Npb25zOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3guTGF5ZXJzLmNvbmNlc3Npb25zLFxuICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWRfYXJlYXM6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5MYXllcnMucHJvdGVjdGVkX2FyZWFzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgbWFwX2xvYWRpbmc6IGZhbHNlLFxuXG4gICAgICAgICAgICBjbG9zZV9sYXllcl9zZWxlY3Rvcl9vbmNsaWNrOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIG1vdW50ZWQoKXtcbiAgICAgICAgdGhpcy5pbml0TWFwKCk7XG4gICAgICAgIHRoaXMubWFwX2xvYWRpbmcgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgfVxuXG59KTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/demo.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/layers.js":
/*!******************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/layers.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = {\n  // ##########  Rasters  ##########\n  comifac: window.WebMapping.Mapbox.wms('comifac', Locale.getLabel('mapping.layers.comifac'), true, {\n    attribution: '<div style=\"width: 800px;\">' + '<b>Image source de base :</b> Verhegghen, A., Mayaux, P., de Wasseige, C., and Defourny, P.: ' + 'Mapping Congo Basin vegetation types from 300 m and 1 km multi-sensor time series for carbon stocks' + ' and forest areas estimation, Biogeosciences, 9, 5061-5079, doi:10.5194/bg-9-5061-2012, 2012. ' + '<a target=\"_blank\" href=\"http://www.biogeosciences.net/9/5061/2012/bg-9-5061-2012.html\">biogeosciences.net</a>' + '<br/><b>Données sources ajoutées :</b> SRTM de la Nasa, OSM et OFAC' + '<br/><b>Traitée :</b> Mai 2015, <a target=\"_blank\" href=\"/docs/atlas/mapsteps.pdf\">Etapes de réalisation</a></div>'\n  }),\n  spotvgt: window.WebMapping.Mapbox.wms('spotvgt', Locale.getLabel('mapping.layers.spotvgt'), true),\n  modis: window.WebMapping.Mapbox.wms('modis', Locale.getLabel('mapping.layers.modis'), true),\n  srtm: window.WebMapping.Mapbox.wms('srtm', Locale.getLabel('mapping.layers.srtm'), true),\n  glc2000: window.WebMapping.Mapbox.wms('glc2000', Locale.getLabel('mapping.layers.glc2000'), true),\n  congo_basin_vegetation_map: window.WebMapping.Mapbox.wms('congo_basin_vegetation_map', Locale.getLabel('mapping.layers.congo_basin_vegetation_map'), true),\n  total_carbon: window.WebMapping.Mapbox.wms('total_carbon', Locale.getLabel('mapping.layers.total_carbon'), true),\n  landscapes_forest_loss_masked: window.WebMapping.Mapbox.wms('landscapes_forest_loss_masked', Locale.getLabel('mapping.layers.landscapes_forest_loss_masked'), false, {\n    \"abstract\": 'From the <a target=\"_blank\" href=\"http://earthenginepartners.appspot.com/science-2013-global-forest/download_v1.7.html\">' + 'Lossyear Hansen map</a> masked by the forest presence in 2000'\n  }),\n  landscapes_forest_mask: window.WebMapping.Mapbox.wms('landscapes_forest_mask', Locale.getLabel('mapping.layers.landscapes_forest_mask'), false, {\n    \"abstract\": encodeURI('Computed with the Forest 2000 Hansen map, Forest cover more than 30% was retain as forest threshold')\n  }),\n  lc300_class4_1995: window.WebMapping.Mapbox.wms('lc300_class4_1995', Locale.getLabel('mapping.layers.lc300_class4_1995'), false, {\n    \"abstract\": 'Reclassified in 4 classes: Cultivated Areas (+Artificial areas), Natural Areas, Mosaic Cultivated/Natural Areas, and Water/Snow'\n  }),\n  lc300_class4_2015: window.WebMapping.Mapbox.wms('lc300_class4_2015', Locale.getLabel('mapping.layers.lc300_class4_2015'), false, {\n    \"abstract\": 'Reclassified in 4 classes: Cultivated Areas (+Artificial areas), Natural Areas, Mosaic Cultivated/Natural Areas, and Water/Snow'\n  }),\n  lc300_class4_2018: window.WebMapping.Mapbox.wms('lc300_class4_2018', Locale.getLabel('mapping.layers.lc300_class4_2018'), false, {\n    \"abstract\": 'Reclassified in 4 classes: Cultivated Areas (+Artificial areas), Natural Areas, Mosaic Cultivated/Natural Areas, and Water/Snow'\n  }),\n  landscapes_lc300_1995_2015: window.WebMapping.Mapbox.wms('landscapes_lc300_1995_2015', Locale.getLabel('mapping.layers.landscapes_lc300_1995_2015'), false),\n  landscapes_lc300_2015_2018: window.WebMapping.Mapbox.wms('landscapes_lc300_2015_2018', Locale.getLabel('mapping.layers.landscapes_lc300_2015_2018'), false),\n  landscapes_above_ground_carbon: window.WebMapping.Mapbox.wms('landscapes_above_ground_carbon', Locale.getLabel('mapping.layers.landscapes_above_ground_carbon'), false, {\n    \"abstract\": 'Above Ground Carbon * 0.5 (conversion factor (Biomass-> Carbon)). Water have been converted in \"NoData\". <br />' + 'Santoro, M., Cartus, O., Mermoz, S., Bouvet, A., Le Toan, T., Carvalhais, N., Rozendaal, D., ' + 'Herold, M., Avitabile, V., Quegan, S., Carreiras, J., Rauste, Y., Balzter, H., Schmullius, C., Seifert, F.M., 2018, ' + '<b>GlobBiomass global above-ground biomass and growing stock volume datasets</b>, available on-line ' + '<a target=\"_blank\" href=\"http://globbiomass.org/products/global-mapping\">here</a>'\n  }),\n  landscapes_below_ground_carbon: window.WebMapping.Mapbox.wms('landscapes_below_ground_carbon', Locale.getLabel('mapping.layers.landscapes_below_ground_carbon'), false, {\n    \"abstract\": 'Above Ground Carbon map * R (Root factor (Stem Carbon -> Root Carbon)). The R factor defined ' + 'by the <a target=\"_blank\" href=\"https://www.ipcc-nggip.iges.or.jp/public/2019rf/pdf/4_Volume4/19R_V4_Ch04_Forest%20Land.pdf\">' + '2019 Refinement to the 2006 IPCC Guidelines for National Greenhouse Gas Inventories</a>.'\n  }),\n  landscapes_soil_organic_carbon: window.WebMapping.Mapbox.wms('landscapes_soil_organic_carbon', Locale.getLabel('mapping.layers.landscapes_soil_organic_carbon'), false, {\n    \"abstract\": '<b>Global Soil Organic Carbon Map (GSOCmap)</b> from FAO available <a target=\"_blank\" ' + 'href=\"http://54.229.242.119/GSOCmap/\">here</a>'\n  }),\n  landscapes_total_carbon: window.WebMapping.Mapbox.wms('landscapes_total_carbon', Locale.getLabel('mapping.layers.landscapes_total_carbon'), false, {\n    \"abstract\": 'Addition of the Above Ground Carbon, Below Ground Carbon and Soil Organic Carbon maps'\n  }),\n  landscapes_water_transitions: window.WebMapping.Mapbox.wms('landscapes_water_transitions', Locale.getLabel('mapping.layers.landscapes_water_transitions'), false, {\n    \"abstract\": encodeURI('Jean-Francois Pekel, Andrew Cottam, Noel Gorelick, Alan S. Belward, <b>High-resolution ' + 'mapping of global surface water and its long-term changes.</b> Nature 540, 418-422 (2016). (doi:10.1038/nature20584)' + '<br />Accessed through <a href=\"https://global-surface-water.appspot.com/\" target=\"_blank\">Global Surface Water Explorer</a>' + '<br />Source: EC JRC/Google')\n  }),\n  // ##########  DOPA Resources  ##########\n  land_cover: {\n    id: 'land_cover',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'land_cover_copernicus_2018'),\n    label: 'Couverture du Sol',\n    \"abstract\": '&copy; Services DOPA'\n  },\n  land_cover_change: {\n    id: 'land_cover_change',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'LCC_1995_2015'),\n    label: 'Changement d\\'occupation du sol',\n    \"abstract\": '&copy; Services DOPA'\n  },\n  land_fragmentation: {\n    id: 'land_fragmentation',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'land_fragmentation'),\n    label: 'Fragmentation des terres',\n    \"abstract\": '&copy; Services DOPA' // abstract: 'Landscape pattern and fragmentation classes computed for the years 1995, 2000, 2005, 2010 and 2015. &copy; DOPA Services'\n\n  },\n  land_degradation: {\n    id: 'land_degradation',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'LPD'),\n    label: 'Dégradation des terres',\n    \"abstract\": '&copy; Services DOPA' // abstract: 'Changes over 15 years (1999-2013) in the health and productive capacity of the land. &copy; DOPA Services'\n\n  },\n  soil_organic_carbon: {\n    id: 'soil_organic_carbon',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'soil_organic_carbon'),\n    label: 'Carbone organique du sol',\n    \"abstract\": '&copy; Services DOPA' // abstract: 'Country statistics for the amount of soil organic carbon (0-30 cm depth). &copy; DOPA Services'\n\n  },\n  above_ground_carbon: {\n    id: 'above_ground_carbon',\n    type: 'raster',\n    source: window.WebMapping.Mapbox.mapbox_wms_source('https://geospatial.jrc.ec.europa.eu/geoserver/dopa_explorer_3/wms?', 'above_ground_carbon'),\n    label: 'Carbon au-dessous du sol',\n    \"abstract\": '&copy; Services DOPA' // abstract: 'Country statistics for the amount of soil organic carbon (0-30 cm depth). &copy; DOPA Services'\n\n  },\n  // ##########  Other External Resources  ##########\n  water_transitions: {\n    id: \"water_transitions\",\n    type: \"raster\",\n    source: {\n      \"type\": \"raster\",\n      \"tiles\": [\"https://storage.googleapis.com/global-surface-water/tiles2019/transitions/{z}/{x}/{y}.png\"],\n      \"attribution\": 'Source: EC JRC/Google'\n    },\n    label: Locale.getLabel('mapping.layers.water_transitions'),\n    \"abstract\": encodeURI('Jean-Francois Pekel, Andrew Cottam, Noel Gorelick, Alan S. Belward, <b>High-resolution ' + 'mapping of global surface water and its long-term changes.</b> Nature 540, 418-422 (2016). (doi:10.1038/nature20584)' + '<br />Accessed through <a href=\"https://global-surface-water.appspot.com/\" target=\"_blank\">Global Surface Water Explorer</a>' + '<br />Source: EC JRC/Google')\n  },\n  tree_cover: {\n    id: 'tree_cover',\n    type: 'raster',\n    source: {\n      \"type\": \"raster\",\n      \"tiles\": [\"https://storage.googleapis.com/earthenginepartners-hansen/tiles/gfc_v1.4/tree_alpha/{z}/{x}/{y}.png\"],\n      //\"tiles\": [\"https://storage.googleapis.com/wri-public/treecover/2010/{z}/{x}/{y}.png\"],\n      \"attribution\": \"Hansen/UMD/Google/USGS/NASA\"\n    },\n    label: 'Tree Cover 2000-2010',\n    \"abstract\": encodeURI('Hansen, M. C., P. V. Potapov, R. Moore, M. Hancher, S. A. Turubanova, A. Tyukavina, D. Thau, S. V. Stehman, S. J. Goetz, ' + 'T. R. Loveland, A. Kommareddy, A. Egorov, L. Chini, C. O. Justice, and J. R. G. Townshend. 2013. <b>“High-Resolution Global Maps of 21st-Century Forest Cover Change.”</b> ' + 'Science 342 (15 November): 850–53. <br />Data available on-line from: <a href=\"https://glad.umd.edu/dataset/global-2010-tree-cover-30-m\" target=\"_blank\">https://glad.umd.edu/dataset/global-2010-tree-cover-30-m</a>. ' + '<br />Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  },\n  forest_gain: {\n    id: 'forest_gain',\n    type: 'raster',\n    source: {\n      \"type\": \"raster\",\n      \"tiles\": [\"https://storage.googleapis.com/earthenginepartners-hansen/tiles/gfc_v1.4/gain_alpha/{z}/{x}/{y}.png\"],\n      \"attribution\": \"Hansen/UMD/Google/USGS/NASA\"\n    },\n    label: 'Forest cover gain 2000–2012',\n    \"abstract\": encodeURI('Hansen, M. C., P. V. Potapov, R. Moore, M. Hancher, S. A. Turubanova, A. Tyukavina, D. Thau, S. V. Stehman, S. J. Goetz, ' + 'T. R. Loveland, A. Kommareddy, A. Egorov, L. Chini, C. O. Justice, and J. R. G. Townshend. 2013. <b>“High-Resolution Global Maps of 21st-Century Forest Cover Change.”</b> ' + 'Science 342 (15 November): 850–53. <br />Data available on-line from: <a href=\"https://glad.umd.edu/dataset/global-2010-tree-cover-30-m\" target=\"_blank\">https://glad.umd.edu/dataset/global-2010-tree-cover-30-m</a>. ' + '<br />Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  },\n  forest_loss: {\n    id: 'forest_loss',\n    type: 'raster',\n    source: {\n      \"type\": \"raster\",\n      \"tiles\": [\"https://storage.googleapis.com/earthenginepartners-hansen/tiles/gfc_v1.7/loss_alpha/{z}/{x}/{y}.png\"],\n      \"attribution\": \"Hansen/UMD/Google/USGS/NASA\"\n    },\n    label: 'Forest cover loss 2000–2018',\n    \"abstract\": encodeURI('Hansen, M. C., P. V. Potapov, R. Moore, M. Hancher, S. A. Turubanova, A. Tyukavina, D. Thau, S. V. Stehman, S. J. Goetz, ' + 'T. R. Loveland, A. Kommareddy, A. Egorov, L. Chini, C. O. Justice, and J. R. G. Townshend. 2013. <b>“High-Resolution Global Maps of 21st-Century Forest Cover Change.”</b> ' + 'Science 342 (15 November): 850–53. <br />Data available on-line from: <a href=\"https://glad.umd.edu/dataset/global-2010-tree-cover-30-m\" target=\"_blank\">https://glad.umd.edu/dataset/global-2010-tree-cover-30-m</a>. ' + '<br />Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  },\n  intact_forest: {\n    id: \"intact_forest\",\n    type: \"raster\",\n    source: {\n      \"type\": \"raster\",\n      \"tiles\": [\"https://storage.googleapis.com/earthenginepartners-hansen/tiles/intact_forest_2016/{z}/{x}/{y}.png\"],\n      \"attribution\": 'Map tiles by <a target=\"_top\" rel=\"noopener\" href=\"http://stamen.com\">Stamen Design</a>, under <a target=\"_top\" rel=\"noopener\" href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. Data by <a target=\"_top\" rel=\"noopener\" href=\"http://openstreetmap.org\">OpenStreetMap</a>, under <a target=\"_top\" rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-sa/3.0\">CC BY SA</a>'\n    },\n    label: 'Intact Forest Landscapes (IFL 2000-2016)',\n    \"abstract\": encodeURI('Greenpeace, University of Maryland, World Resources Institute and Transparent World. “Intact Forest Landscapes. 2000/2013/2016” ' + 'Accessed through <a href=\"https://www.globalforestwatch.org\" target=\"_blank\">Global Forest Watch</a>')\n  },\n  // ##########  Overlays  ##########\n  comifac_mask: window.WebMapping.Mapbox.wms('comifac_mask', null, true),\n  comifac_eez: window.WebMapping.Mapbox.mapbox_vector_layer('comifac_eez', null, 'fill', {\n    'fill-color': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 'rgba(255, 255, 255, 0.3)', 'rgba(255, 255, 255, 0)'],\n    'fill-outline-color': 'rgba(60, 150, 255, 0.8)'\n  }),\n  countries: window.WebMapping.Mapbox.mapbox_vector_layer('countries', null, 'fill', {\n    'fill-color': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 'rgba(255, 255, 255, 0.3)', 'rgba(255, 255, 255, 0)'],\n    'fill-outline-color': 'rgba(0, 50, 0, 0.8)'\n  }, 'countries'),\n  landscapes: window.WebMapping.Mapbox.mapbox_vector_layer('landscapes', Locale.getLabel('mapping.platform.sites.landscapes', 2), 'fill', {\n    'fill-color': 'rgb(255, 255, 0)',\n    'fill-opacity': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 0.8, 0.5]\n  }),\n  klc: window.WebMapping.Mapbox.mapbox_vector_layer('klc', Locale.getLabel('mapping.platform.sites.klc', 2), 'fill', {\n    'fill-color': 'rgb(255, 155, 0)',\n    'fill-opacity': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 0.8, 0.5]\n  }),\n  concessions: window.WebMapping.Mapbox.mapbox_vector_layer('concessions', Locale.getLabel('mapping.platform.sites.concessions', 2), 'fill', {\n    'fill-color': 'rgb(163, 113, 66)',\n    'fill-opacity': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 0.8, 0.5]\n  }),\n  protected_areas: window.WebMapping.Mapbox.mapbox_vector_layer('protected_areas', Locale.getLabel('mapping.platform.sites.protected_areas', 2), 'fill', {\n    'fill-color': 'rgb(0, 115, 40)',\n    'fill-opacity': [\"case\", [\"boolean\", [\"feature-state\", \"hover\"], false], 0.8, 0.5]\n  }, 'protected_areas')\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzX2ltZXQvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L2xheWVycy5qcz8xYmY1Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjb21pZmFjIiwid2luZG93IiwiV2ViTWFwcGluZyIsIk1hcGJveCIsIndtcyIsIkxvY2FsZSIsImdldExhYmVsIiwiYXR0cmlidXRpb24iLCJzcG90dmd0IiwibW9kaXMiLCJzcnRtIiwiZ2xjMjAwMCIsImNvbmdvX2Jhc2luX3ZlZ2V0YXRpb25fbWFwIiwidG90YWxfY2FyYm9uIiwibGFuZHNjYXBlc19mb3Jlc3RfbG9zc19tYXNrZWQiLCJsYW5kc2NhcGVzX2ZvcmVzdF9tYXNrIiwiZW5jb2RlVVJJIiwibGMzMDBfY2xhc3M0XzE5OTUiLCJsYzMwMF9jbGFzczRfMjAxNSIsImxjMzAwX2NsYXNzNF8yMDE4IiwibGFuZHNjYXBlc19sYzMwMF8xOTk1XzIwMTUiLCJsYW5kc2NhcGVzX2xjMzAwXzIwMTVfMjAxOCIsImxhbmRzY2FwZXNfYWJvdmVfZ3JvdW5kX2NhcmJvbiIsImxhbmRzY2FwZXNfYmVsb3dfZ3JvdW5kX2NhcmJvbiIsImxhbmRzY2FwZXNfc29pbF9vcmdhbmljX2NhcmJvbiIsImxhbmRzY2FwZXNfdG90YWxfY2FyYm9uIiwibGFuZHNjYXBlc193YXRlcl90cmFuc2l0aW9ucyIsImxhbmRfY292ZXIiLCJpZCIsInR5cGUiLCJzb3VyY2UiLCJtYXBib3hfd21zX3NvdXJjZSIsImxhYmVsIiwibGFuZF9jb3Zlcl9jaGFuZ2UiLCJsYW5kX2ZyYWdtZW50YXRpb24iLCJsYW5kX2RlZ3JhZGF0aW9uIiwic29pbF9vcmdhbmljX2NhcmJvbiIsImFib3ZlX2dyb3VuZF9jYXJib24iLCJ3YXRlcl90cmFuc2l0aW9ucyIsInRyZWVfY292ZXIiLCJmb3Jlc3RfZ2FpbiIsImZvcmVzdF9sb3NzIiwiaW50YWN0X2ZvcmVzdCIsImNvbWlmYWNfbWFzayIsImNvbWlmYWNfZWV6IiwibWFwYm94X3ZlY3Rvcl9sYXllciIsImNvdW50cmllcyIsImxhbmRzY2FwZXMiLCJrbGMiLCJjb25jZXNzaW9ucyIsInByb3RlY3RlZF9hcmVhcyJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUViO0FBRUFDLFNBQU8sRUFBR0MsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsR0FBekIsQ0FBNkIsU0FBN0IsRUFBd0NDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQix3QkFBaEIsQ0FBeEMsRUFBa0YsSUFBbEYsRUFBd0Y7QUFDOUZDLGVBQVcsRUFBRSxnQ0FDVCwrRkFEUyxHQUVULHFHQUZTLEdBR1QsZ0dBSFMsR0FJVCxnSEFKUyxHQUtULHFFQUxTLEdBTVQ7QUFQMEYsR0FBeEYsQ0FKRztBQWFiQyxTQUFPLEVBQUdQLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUJDLEdBQXpCLENBQTZCLFNBQTdCLEVBQXdDQyxNQUFNLENBQUNDLFFBQVAsQ0FBZ0Isd0JBQWhCLENBQXhDLEVBQW1GLElBQW5GLENBYkc7QUFjYkcsT0FBSyxFQUFHUixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCQyxHQUF6QixDQUE2QixPQUE3QixFQUFzQ0MsTUFBTSxDQUFDQyxRQUFQLENBQWdCLHNCQUFoQixDQUF0QyxFQUErRSxJQUEvRSxDQWRLO0FBZWJJLE1BQUksRUFBR1QsTUFBTSxDQUFDQyxVQUFQLENBQWtCQyxNQUFsQixDQUF5QkMsR0FBekIsQ0FBNkIsTUFBN0IsRUFBcUNDLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQixxQkFBaEIsQ0FBckMsRUFBNkUsSUFBN0UsQ0FmTTtBQWdCYkssU0FBTyxFQUFHVixNQUFNLENBQUNDLFVBQVAsQ0FBa0JDLE1BQWxCLENBQXlCQyxHQUF6QixDQUE2QixTQUE3QixFQUF3Q0MsTUFBTSxDQUFDQyxRQUFQLENBQWdCLHdCQUFoQixDQUF4QyxFQUFtRixJQUFuRixDQWhCRztBQWlCYk0sNEJBQTBCLEVB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QU0sQ0FBQ0MsVUFBUCxDQUFrQkMsTUFBbEIsQ0FBeUIwQyxtQkFBekIsQ0FBNkMsaUJBQTdDLEVBQWdFeEMsTUFBTSxDQUFDQyxRQUFQLENBQWdCLHdDQUFoQixFQUEwRCxDQUExRCxDQUFoRSxFQUE4SCxNQUE5SCxFQUFzSTtBQUNuSixrQkFBYyxpQkFEcUk7QUFFbkosb0JBQ0ksQ0FBQyxNQUFELEVBQ0ksQ0FBQyxTQUFELEVBQVksQ0FBQyxlQUFELEVBQWtCLE9BQWxCLENBQVosRUFBd0MsS0FBeEMsQ0FESixFQUNvRCxHQURwRCxFQUVJLEdBRko7QUFIK0ksR0FBdEksRUFRakIsaUJBUmlCO0FBaFBKLENBQWpCIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2Fzc2V0c19pbWV0L2Fzc2V0cy9qcy9tYXBwaW5nX21hcGJveC9sYXllcnMuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcblxuICAgIC8vICMjIyMjIyMjIyMgIFJhc3RlcnMgICMjIyMjIyMjIyNcblxuICAgIGNvbWlmYWM6ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdjb21pZmFjJywgTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLmxheWVycy5jb21pZmFjJyksdHJ1ZSwge1xuICAgICAgICBhdHRyaWJ1dGlvbjogJzxkaXYgc3R5bGU9XCJ3aWR0aDogODAwcHg7XCI+JyArXG4gICAgICAgICAgICAnPGI+SW1hZ2Ugc291cmNlIGRlIGJhc2UgOjwvYj4gVmVyaGVnZ2hlbiwgQS4sIE1heWF1eCwgUC4sIGRlIFdhc3NlaWdlLCBDLiwgYW5kIERlZm91cm55LCBQLjogJyArXG4gICAgICAgICAgICAnTWFwcGluZyBDb25nbyBCYXNpbiB2ZWdldGF0aW9uIHR5cGVzIGZyb20gMzAwIG0gYW5kIDEga20gbXVsdGktc2Vuc29yIHRpbWUgc2VyaWVzIGZvciBjYXJib24gc3RvY2tzJyArXG4gICAgICAgICAgICAnIGFuZCBmb3Jlc3QgYXJlYXMgZXN0aW1hdGlvbiwgQmlvZ2Vvc2NpZW5jZXMsIDksIDUwNjEtNTA3OSwgZG9pOjEwLjUxOTQvYmctOS01MDYxLTIwMTIsIDIwMTIuICcgK1xuICAgICAgICAgICAgJzxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vd3d3LmJpb2dlb3NjaWVuY2VzLm5ldC85LzUwNjEvMjAxMi9iZy05LTUwNjEtMjAxMi5odG1sXCI+YmlvZ2Vvc2NpZW5jZXMubmV0PC9hPicrXG4gICAgICAgICAgICAnPGJyLz48Yj5Eb25uw6llcyBzb3VyY2VzIGFqb3V0w6llcyA6PC9iPiBTUlRNIGRlIGxhIE5hc2EsIE9TTSBldCBPRkFDJytcbiAgICAgICAgICAgICc8YnIvPjxiPlRyYWl0w6llIDo8L2I+IE1haSAyMDE1LCA8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiL2RvY3MvYXRsYXMvbWFwc3RlcHMucGRmXCI+RXRhcGVzIGRlIHLDqWFsaXNhdGlvbjwvYT48L2Rpdj4nLFxuICAgIH0pLFxuICAgIHNwb3R2Z3Q6ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdzcG90dmd0JywgTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLmxheWVycy5zcG90dmd0JyksIHRydWUpLFxuICAgIG1vZGlzOiAgd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnbW9kaXMnLCBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcubGF5ZXJzLm1vZGlzJyksIHRydWUpLFxuICAgIHNydG06ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdzcnRtJywgTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLmxheWVycy5zcnRtJyksIHRydWUpLFxuICAgIGdsYzIwMDA6ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdnbGMyMDAwJywgTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLmxheWVycy5nbGMyMDAwJyksIHRydWUpLFxuICAgIGNvbmdvX2Jhc2luX3ZlZ2V0YXRpb25fbWFwOiAgd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnY29uZ29fYmFzaW5fdmVnZXRhdGlvbl9tYXAnLCBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcubGF5ZXJzLmNvbmdvX2Jhc2luX3ZlZ2V0YXRpb25fbWFwJyksIHRydWUpLFxuICAgIHRvdGFsX2NhcmJvbjogIHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC53bXMoJ3RvdGFsX2NhcmJvbicsIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMudG90YWxfY2FyYm9uJyksIHRydWUpLFxuICAgIGxhbmRzY2FwZXNfZm9yZXN0X2xvc3NfbWFza2VkOiAgd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnbGFuZHNjYXBlc19mb3Jlc3RfbG9zc19tYXNrZWQnLFxuICAgICAgICBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcubGF5ZXJzLmxhbmRzY2FwZXNfZm9yZXN0X2xvc3NfbWFza2VkJyksIGZhbHNlLCB7XG4gICAgICAgICAgICBhYnN0cmFjdDogJ0Zyb20gdGhlIDxhIHRhcmdldD1cIl9ibGFua1wiIGhyZWY9XCJodHRwOi8vZWFydGhlbmdpbmVwYXJ0bmVycy5hcHBzcG90LmNvbS9zY2llbmNlLTIwMTMtZ2xvYmFsLWZvcmVzdC9kb3dubG9hZF92MS43Lmh0bWxcIj4nICtcbiAgICAgICAgICAgICAgICAnTG9zc3llYXIgSGFuc2VuIG1hcDwvYT4gbWFza2VkIGJ5IHRoZSBmb3Jlc3QgcHJlc2VuY2UgaW4gMjAwMCdcbiAgICAgICAgfSksXG4gICAgbGFuZHNjYXBlc19mb3Jlc3RfbWFzazogIHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC53bXMoJ2xhbmRzY2FwZXNfZm9yZXN0X21hc2snLFxuICAgICAgICBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcubGF5ZXJzLmxhbmRzY2FwZXNfZm9yZXN0X21hc2snKSwgZmFsc2UsIHtcbiAgICAgICAgICAgIGFic3RyYWN0OiBlbmNvZGVVUkkoJ0NvbXB1dGVkIHdpdGggdGhlIEZvcmVzdCAyMDAwIEhhbnNlbiBtYXAsIEZvcmVzdCBjb3ZlciBtb3JlIHRoYW4gMzAlIHdhcyByZXRhaW4gYXMgZm9yZXN0IHRocmVzaG9sZCcpXG4gICAgICAgIH0pLFxuICAgIGxjMzAwX2NsYXNzNF8xOTk1OiAgd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnbGMzMDBfY2xhc3M0XzE5OTUnLFxuICAgICAgICBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcubGF5ZXJzLmxjMzAwX2NsYXNzNF8xOTk1JyksIGZhbHNlLCB7XG4gICAgICAgICAgICBhYnN0cmFjdDogJ1JlY2xhc3NpZmllZCBpbiA0IGNsYXNzZXM6IEN1bHRpdmF0ZWQgQXJlYXMgKCtBcnRpZmljaWFsIGFyZWFzKSwgTmF0dXJhbCBBcmVhcywgTW9zYWljIEN1bHRpdmF0ZWQvTmF0dXJhbCBBcmVhcywgYW5kIFdhdGVyL1Nub3cnXG4gICAgfSksXG4gICAgbGMzMDBfY2xhc3M0XzIwMTU6ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdsYzMwMF9jbGFzczRfMjAxNScsXG4gICAgICAgIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGMzMDBfY2xhc3M0XzIwMTUnKSwgZmFsc2UsIHtcbiAgICAgICAgICAgIGFic3RyYWN0OiAnUmVjbGFzc2lmaWVkIGluIDQgY2xhc3NlczogQ3VsdGl2YXRlZCBBcmVhcyAoK0FydGlmaWNpYWwgYXJlYXMpLCBOYXR1cmFsIEFyZWFzLCBNb3NhaWMgQ3VsdGl2YXRlZC9OYXR1cmFsIEFyZWFzLCBhbmQgV2F0ZXIvU25vdydcbiAgICAgICAgfSksXG4gICAgbGMzMDBfY2xhc3M0XzIwMTg6ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdsYzMwMF9jbGFzczRfMjAxOCcsXG4gICAgICAgIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGMzMDBfY2xhc3M0XzIwMTgnKSwgZmFsc2UsIHtcbiAgICAgICAgICAgIGFic3RyYWN0OiAnUmVjbGFzc2lmaWVkIGluIDQgY2xhc3NlczogQ3VsdGl2YXRlZCBBcmVhcyAoK0FydGlmaWNpYWwgYXJlYXMpLCBOYXR1cmFsIEFyZWFzLCBNb3NhaWMgQ3VsdGl2YXRlZC9OYXR1cmFsIEFyZWFzLCBhbmQgV2F0ZXIvU25vdydcbiAgICAgICAgfSksXG4gICAgbGFuZHNjYXBlc19sYzMwMF8xOTk1XzIwMTU6ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdsYW5kc2NhcGVzX2xjMzAwXzE5OTVfMjAxNScsIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGFuZHNjYXBlc19sYzMwMF8xOTk1XzIwMTUnKSwgZmFsc2UpLFxuICAgIGxhbmRzY2FwZXNfbGMzMDBfMjAxNV8yMDE4OiAgd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnbGFuZHNjYXBlc19sYzMwMF8yMDE1XzIwMTgnLCBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcubGF5ZXJzLmxhbmRzY2FwZXNfbGMzMDBfMjAxNV8yMDE4JyksIGZhbHNlKSxcbiAgICBsYW5kc2NhcGVzX2Fib3ZlX2dyb3VuZF9jYXJib246ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdsYW5kc2NhcGVzX2Fib3ZlX2dyb3VuZF9jYXJib24nLFxuICAgICAgICBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcubGF5ZXJzLmxhbmRzY2FwZXNfYWJvdmVfZ3JvdW5kX2NhcmJvbicpLCBmYWxzZSx7XG4gICAgICAgIGFic3RyYWN0OiAnQWJvdmUgR3JvdW5kIENhcmJvbiAqIDAuNSAoY29udmVyc2lvbiBmYWN0b3IgKEJpb21hc3MtPiBDYXJib24pKS4gV2F0ZXIgaGF2ZSBiZWVuIGNvbnZlcnRlZCBpbiBcIk5vRGF0YVwiLiA8YnIgLz4nICtcbiAgICAgICAgICAgICdTYW50b3JvLCBNLiwgQ2FydHVzLCBPLiwgTWVybW96LCBTLiwgQm91dmV0LCBBLiwgTGUgVG9hbiwgVC4sIENhcnZhbGhhaXMsIE4uLCBSb3plbmRhYWwsIEQuLCAnICtcbiAgICAgICAgICAgICdIZXJvbGQsIE0uLCBBdml0YWJpbGUsIFYuLCBRdWVnYW4sIFMuLCBDYXJyZWlyYXMsIEouLCBSYXVzdGUsIFkuLCBCYWx6dGVyLCBILiwgU2NobXVsbGl1cywgQy4sIFNlaWZlcnQsIEYuTS4sIDIwMTgsICcgK1xuICAgICAgICAgICAgJzxiPkdsb2JCaW9tYXNzIGdsb2JhbCBhYm92ZS1ncm91bmQgYmlvbWFzcyBhbmQgZ3Jvd2luZyBzdG9jayB2b2x1bWUgZGF0YXNldHM8L2I+LCBhdmFpbGFibGUgb24tbGluZSAnICtcbiAgICAgICAgICAgICc8YSB0YXJnZXQ9XCJfYmxhbmtcIiBocmVmPVwiaHR0cDovL2dsb2JiaW9tYXNzLm9yZy9wcm9kdWN0cy9nbG9iYWwtbWFwcGluZ1wiPmhlcmU8L2E+J1xuICAgIH0pLFxuICAgIGxhbmRzY2FwZXNfYmVsb3dfZ3JvdW5kX2NhcmJvbjogIHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC53bXMoJ2xhbmRzY2FwZXNfYmVsb3dfZ3JvdW5kX2NhcmJvbicsXG4gICAgICAgIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGFuZHNjYXBlc19iZWxvd19ncm91bmRfY2FyYm9uJyksIGZhbHNlLCB7XG4gICAgICAgICAgICBhYnN0cmFjdDogJ0Fib3ZlIEdyb3VuZCBDYXJib24gbWFwICogUiAoUm9vdCBmYWN0b3IgKFN0ZW0gQ2FyYm9uIC0+IFJvb3QgQ2FyYm9uKSkuIFRoZSBSIGZhY3RvciBkZWZpbmVkICcgK1xuICAgICAgICAgICAgICAgICdieSB0aGUgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cImh0dHBzOi8vd3d3LmlwY2MtbmdnaXAuaWdlcy5vci5qcC9wdWJsaWMvMjAxOXJmL3BkZi80X1ZvbHVtZTQvMTlSX1Y0X0NoMDRfRm9yZXN0JTIwTGFuZC5wZGZcIj4nICtcbiAgICAgICAgICAgICAgICAnMjAxOSBSZWZpbmVtZW50IHRvIHRoZSAyMDA2IElQQ0MgR3VpZGVsaW5lcyBmb3IgTmF0aW9uYWwgR3JlZW5ob3VzZSBHYXMgSW52ZW50b3JpZXM8L2E+LidcbiAgICAgICAgfSksXG4gICAgbGFuZHNjYXBlc19zb2lsX29yZ2FuaWNfY2FyYm9uOiAgd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnbGFuZHNjYXBlc19zb2lsX29yZ2FuaWNfY2FyYm9uJyxcbiAgICAgICAgTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLmxheWVycy5sYW5kc2NhcGVzX3NvaWxfb3JnYW5pY19jYXJib24nKSwgZmFsc2Use1xuICAgICAgICAgICAgYWJzdHJhY3Q6ICc8Yj5HbG9iYWwgU29pbCBPcmdhbmljIENhcmJvbiBNYXAgKEdTT0NtYXApPC9iPiBmcm9tIEZBTyBhdmFpbGFibGUgPGEgdGFyZ2V0PVwiX2JsYW5rXCIgJyArXG4gICAgICAgICAgICAgICAgJ2hyZWY9XCJodHRwOi8vNTQuMjI5LjI0Mi4xMTkvR1NPQ21hcC9cIj5oZXJlPC9hPidcbiAgICAgICAgfSksXG4gICAgbGFuZHNjYXBlc190b3RhbF9jYXJib246ICB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gud21zKCdsYW5kc2NhcGVzX3RvdGFsX2NhcmJvbicsXG4gICAgICAgIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGFuZHNjYXBlc190b3RhbF9jYXJib24nKSwgZmFsc2UsIHtcbiAgICAgICAgICAgIGFic3RyYWN0OiAnQWRkaXRpb24gb2YgdGhlIEFib3ZlIEdyb3VuZCBDYXJib24sIEJlbG93IEdyb3VuZCBDYXJib24gYW5kIFNvaWwgT3JnYW5pYyBDYXJib24gbWFwcydcbiAgICAgICAgfSksXG4gICAgbGFuZHNjYXBlc193YXRlcl90cmFuc2l0aW9uczogd2luZG93LldlYk1hcHBpbmcuTWFwYm94LndtcygnbGFuZHNjYXBlc193YXRlcl90cmFuc2l0aW9ucycsXG4gICAgICAgIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5sYXllcnMubGFuZHNjYXBlc193YXRlcl90cmFuc2l0aW9ucycpLCBmYWxzZSwge1xuICAgICAgICAgICAgYWJzdHJhY3Q6IGVuY29kZVVSSSgnSmVhbi1GcmFuY29pcyBQZWtlbCwgQW5kcmV3IENvdHRhbSwgTm9lbCBHb3JlbGljaywgQWxhbiBTLiBCZWx3YXJkLCA8Yj5IaWdoLXJlc29sdXRpb24gJyArXG4gICAgICAgICAgICAgICAgJ21hcHBpbmcgb2YgZ2xvYmFsIHN1cmZhY2Ugd2F0ZXIgYW5kIGl0cyBsb25nLXRlcm0gY2hhbmdlcy48L2I+IE5hdHVyZSA1NDAsIDQxOC00MjIgKDIwMTYpLiAoZG9pOjEwLjEwMzgvbmF0dXJlMjA1ODQpJyArXG4gICAgICAgICAgICAgICAgJzxiciAvPkFjY2Vzc2VkIHRocm91Z2ggPGEgaHJlZj1cImh0dHBzOi8vZ2xvYmFsLXN1cmZhY2Utd2F0ZXIuYXBwc3BvdC5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+R2xvYmFsIFN1cmZhY2UgV2F0ZXIgRXhwbG9yZXI8L2E+JyArXG4gICAgICAgICAgICAgICAgJzxiciAvPlNvdXJjZTogRUMgSlJDL0dvb2dsZScpXG4gICAgICAgIH0pLFxuXG4gICAgLy8gIyMjIyMjIyMjIyAgRE9QQSBSZXNvdXJjZXMgICMjIyMjIyMjIyNcblxuICAgIGxhbmRfY292ZXI6e1xuICAgICAgICBpZDogJ2xhbmRfY292ZXInLFxuICAgICAgICB0eXBlOiAncmFzdGVyJyxcbiAgICAgICAgc291cmNlOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gubWFwYm94X3dtc19zb3VyY2UoJ2h0dHBzOi8vZ2Vvc3BhdGlhbC5qcmMuZWMuZXVyb3BhLmV1L2dlb3NlcnZlci9kb3BhX2V4cGxvcmVyXzMvd21zPycsICdsYW5kX2NvdmVyX2NvcGVybmljdXNfMjAxOCcpLFxuICAgICAgICBsYWJlbDogJ0NvdXZlcnR1cmUgZHUgU29sJyxcbiAgICAgICAgYWJzdHJhY3Q6ICcmY29weTsgU2VydmljZXMgRE9QQSdcbiAgICB9LFxuICAgIGxhbmRfY292ZXJfY2hhbmdlOntcbiAgICAgICAgaWQ6ICdsYW5kX2NvdmVyX2NoYW5nZScsXG4gICAgICAgIHR5cGU6ICdyYXN0ZXInLFxuICAgICAgICBzb3VyY2U6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5tYXBib3hfd21zX3NvdXJjZSgnaHR0cHM6Ly9nZW9zcGF0aWFsLmpyYy5lYy5ldXJvcGEuZXUvZ2Vvc2VydmVyL2RvcGFfZXhwbG9yZXJfMy93bXM/JywgJ0xDQ18xOTk1XzIwMTUnKSxcbiAgICAgICAgbGFiZWw6ICdDaGFuZ2VtZW50IGRcXCdvY2N1cGF0aW9uIGR1IHNvbCcsXG4gICAgICAgIGFic3RyYWN0OiAnJmNvcHk7IFNlcnZpY2VzIERPUEEnXG4gICAgfSxcbiAgICBsYW5kX2ZyYWdtZW50YXRpb246IHtcbiAgICAgICAgaWQ6ICdsYW5kX2ZyYWdtZW50YXRpb24nLFxuICAgICAgICB0eXBlOiAncmFzdGVyJyxcbiAgICAgICAgc291cmNlOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gubWFwYm94X3dtc19zb3VyY2UoJ2h0dHBzOi8vZ2Vvc3BhdGlhbC5qcmMuZWMuZXVyb3BhLmV1L2dlb3NlcnZlci9kb3BhX2V4cGxvcmVyXzMvd21zPycsICdsYW5kX2ZyYWdtZW50YXRpb24nKSxcbiAgICAgICAgbGFiZWw6ICdGcmFnbWVudGF0aW9uIGRlcyB0ZXJyZXMnLFxuICAgICAgICBhYnN0cmFjdDogJyZjb3B5OyBTZXJ2aWNlcyBET1BBJ1xuICAgICAgICAvLyBhYnN0cmFjdDogJ0xhbmRzY2FwZSBwYXR0ZXJuIGFuZCBmcmFnbWVudGF0aW9uIGNsYXNzZXMgY29tcHV0ZWQgZm9yIHRoZSB5ZWFycyAxOTk1LCAyMDAwLCAyMDA1LCAyMDEwIGFuZCAyMDE1LiAmY29weTsgRE9QQSBTZXJ2aWNlcydcbiAgICB9LFxuICAgIGxhbmRfZGVncmFkYXRpb246IHtcbiAgICAgICAgaWQ6ICdsYW5kX2RlZ3JhZGF0aW9uJyxcbiAgICAgICAgdHlwZTogJ3Jhc3RlcicsXG4gICAgICAgIHNvdXJjZTogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF93bXNfc291cmNlKCdodHRwczovL2dlb3NwYXRpYWwuanJjLmVjLmV1cm9wYS5ldS9nZW9zZXJ2ZXIvZG9wYV9leHBsb3Jlcl8zL3dtcz8nLCAnTFBEJyksXG4gICAgICAgIGxhYmVsOiAnRMOpZ3JhZGF0aW9uIGRlcyB0ZXJyZXMnLFxuICAgICAgICBhYnN0cmFjdDogJyZjb3B5OyBTZXJ2aWNlcyBET1BBJ1xuICAgICAgICAvLyBhYnN0cmFjdDogJ0NoYW5nZXMgb3ZlciAxNSB5ZWFycyAoMTk5OS0yMDEzKSBpbiB0aGUgaGVhbHRoIGFuZCBwcm9kdWN0aXZlIGNhcGFjaXR5IG9mIHRoZSBsYW5kLiAmY29weTsgRE9QQSBTZXJ2aWNlcydcbiAgICB9LFxuICAgIHNvaWxfb3JnYW5pY19jYXJib246IHtcbiAgICAgICAgaWQ6ICdzb2lsX29yZ2FuaWNfY2FyYm9uJyxcbiAgICAgICAgdHlwZTogJ3Jhc3RlcicsXG4gICAgICAgIHNvdXJjZTogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF93bXNfc291cmNlKCdodHRwczovL2dlb3NwYXRpYWwuanJjLmVjLmV1cm9wYS5ldS9nZW9zZXJ2ZXIvZG9wYV9leHBsb3Jlcl8zL3dtcz8nLCAnc29pbF9vcmdhbmljX2NhcmJvbicpLFxuICAgICAgICBsYWJlbDogJ0NhcmJvbmUgb3JnYW5pcXVlIGR1IHNvbCcsXG4gICAgICAgIGFic3RyYWN0OiAnJmNvcHk7IFNlcnZpY2VzIERPUEEnXG4gICAgICAgIC8vIGFic3RyYWN0OiAnQ291bnRyeSBzdGF0aXN0aWNzIGZvciB0aGUgYW1vdW50IG9mIHNvaWwgb3JnYW5pYyBjYXJib24gKDAtMzAgY20gZGVwdGgpLiAmY29weTsgRE9QQSBTZXJ2aWNlcydcbiAgICB9LFxuICAgIGFib3ZlX2dyb3VuZF9jYXJib246IHtcbiAgICAgICAgaWQ6ICdhYm92ZV9ncm91bmRfY2FyYm9uJyxcbiAgICAgICAgdHlwZTogJ3Jhc3RlcicsXG4gICAgICAgIHNvdXJjZTogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF93bXNfc291cmNlKCdodHRwczovL2dlb3NwYXRpYWwuanJjLmVjLmV1cm9wYS5ldS9nZW9zZXJ2ZXIvZG9wYV9leHBsb3Jlcl8zL3dtcz8nLCAnYWJvdmVfZ3JvdW5kX2NhcmJvbicpLFxuICAgICAgICBsYWJlbDogJ0NhcmJvbiBhdS1kZXNzb3VzIGR1IHNvbCcsXG4gICAgICAgIGFic3RyYWN0OiAnJmNvcHk7IFNlcnZpY2VzIERPUEEnXG4gICAgICAgIC8vIGFic3RyYWN0OiAnQ291bnRyeSBzdGF0aXN0aWNzIGZvciB0aGUgYW1vdW50IG9mIHNvaWwgb3JnYW5pYyBjYXJib24gKDAtMzAgY20gZGVwdGgpLiAmY29weTsgRE9QQSBTZXJ2aWNlcydcbiAgICB9LFxuXG4gICAgLy8gIyMjIyMjIyMjIyAgT3RoZXIgRXh0ZXJuYWwgUmVzb3VyY2VzICAjIyMjIyMjIyMjXG5cbiAgICB3YXRlcl90cmFuc2l0aW9uczoge1xuICAgICAgICBpZDogXCJ3YXRlcl90cmFuc2l0aW9uc1wiLFxuICAgICAgICB0eXBlOiBcInJhc3RlclwiLFxuICAgICAgICBzb3VyY2U6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInJhc3RlclwiLFxuICAgICAgICAgICAgXCJ0aWxlc1wiOiBbXCJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vZ2xvYmFsLXN1cmZhY2Utd2F0ZXIvdGlsZXMyMDE5L3RyYW5zaXRpb25zL3t6fS97eH0ve3l9LnBuZ1wiXSxcbiAgICAgICAgICAgIFwiYXR0cmlidXRpb25cIjogJ1NvdXJjZTogRUMgSlJDL0dvb2dsZSdcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6ICBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcubGF5ZXJzLndhdGVyX3RyYW5zaXRpb25zJyksXG4gICAgICAgIGFic3RyYWN0OiBlbmNvZGVVUkkoJ0plYW4tRnJhbmNvaXMgUGVrZWwsIEFuZHJldyBDb3R0YW0sIE5vZWwgR29yZWxpY2ssIEFsYW4gUy4gQmVsd2FyZCwgPGI+SGlnaC1yZXNvbHV0aW9uICcgK1xuICAgICAgICAgICAgJ21hcHBpbmcgb2YgZ2xvYmFsIHN1cmZhY2Ugd2F0ZXIgYW5kIGl0cyBsb25nLXRlcm0gY2hhbmdlcy48L2I+IE5hdHVyZSA1NDAsIDQxOC00MjIgKDIwMTYpLiAoZG9pOjEwLjEwMzgvbmF0dXJlMjA1ODQpJyArXG4gICAgICAgICAgICAnPGJyIC8+QWNjZXNzZWQgdGhyb3VnaCA8YSBocmVmPVwiaHR0cHM6Ly9nbG9iYWwtc3VyZmFjZS13YXRlci5hcHBzcG90LmNvbS9cIiB0YXJnZXQ9XCJfYmxhbmtcIj5HbG9iYWwgU3VyZmFjZSBXYXRlciBFeHBsb3JlcjwvYT4nICtcbiAgICAgICAgICAgICc8YnIgLz5Tb3VyY2U6IEVDIEpSQy9Hb29nbGUnKVxuICAgIH0sXG4gICAgdHJlZV9jb3Zlcjoge1xuICAgICAgICBpZDogJ3RyZWVfY292ZXInLFxuICAgICAgICB0eXBlOiAncmFzdGVyJyxcbiAgICAgICAgc291cmNlOntcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInJhc3RlclwiLFxuICAgICAgICAgICAgXCJ0aWxlc1wiOiBbXCJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vZWFydGhlbmdpbmVwYXJ0bmVycy1oYW5zZW4vdGlsZXMvZ2ZjX3YxLjQvdHJlZV9hbHBoYS97en0ve3h9L3t5fS5wbmdcIl0sXG4gICAgICAgICAgICAvL1widGlsZXNcIjogW1wiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL3dyaS1wdWJsaWMvdHJlZWNvdmVyLzIwMTAve3p9L3t4fS97eX0ucG5nXCJdLFxuICAgICAgICAgICAgXCJhdHRyaWJ1dGlvblwiOiBcIkhhbnNlbi9VTUQvR29vZ2xlL1VTR1MvTkFTQVwiXG4gICAgICAgIH0sXG4gICAgICAgIGxhYmVsOiAnVHJlZSBDb3ZlciAyMDAwLTIwMTAnLFxuICAgICAgICBhYnN0cmFjdDogZW5jb2RlVVJJKCdIYW5zZW4sIE0uIEMuLCBQLiBWLiBQb3RhcG92LCBSLiBNb29yZSwgTS4gSGFuY2hlciwgUy4gQS4gVHVydWJhbm92YSwgQS4gVHl1a2F2aW5hLCBELiBUaGF1LCBTLiBWLiBTdGVobWFuLCBTLiBKLiBHb2V0eiwgJyArXG4gICAgICAgICAgICAnVC4gUi4gTG92ZWxhbmQsIEEuIEtvbW1hcmVkZHksIEEuIEVnb3JvdiwgTC4gQ2hpbmksIEMuIE8uIEp1c3RpY2UsIGFuZCBKLiBSLiBHLiBUb3duc2hlbmQuIDIwMTMuIDxiPuKAnEhpZ2gtUmVzb2x1dGlvbiBHbG9iYWwgTWFwcyBvZiAyMXN0LUNlbnR1cnkgRm9yZXN0IENvdmVyIENoYW5nZS7igJ08L2I+ICcgK1xuICAgICAgICAgICAgJ1NjaWVuY2UgMzQyICgxNSBOb3ZlbWJlcik6IDg1MOKAkzUzLiA8YnIgLz5EYXRhIGF2YWlsYWJsZSBvbi1saW5lIGZyb206IDxhIGhyZWY9XCJodHRwczovL2dsYWQudW1kLmVkdS9kYXRhc2V0L2dsb2JhbC0yMDEwLXRyZWUtY292ZXItMzAtbVwiIHRhcmdldD1cIl9ibGFua1wiPmh0dHBzOi8vZ2xhZC51bWQuZWR1L2RhdGFzZXQvZ2xvYmFsLTIwMTAtdHJlZS1jb3Zlci0zMC1tPC9hPi4gJyArXG4gICAgICAgICAgICAnPGJyIC8+QWNjZXNzZWQgdGhyb3VnaCA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZ2xvYmFsZm9yZXN0d2F0Y2gub3JnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+R2xvYmFsIEZvcmVzdCBXYXRjaDwvYT4nKVxuICAgIH0sXG4gICAgZm9yZXN0X2dhaW46IHtcbiAgICAgICAgaWQ6ICdmb3Jlc3RfZ2FpbicsXG4gICAgICAgIHR5cGU6ICdyYXN0ZXInLFxuICAgICAgICBzb3VyY2U6e1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwicmFzdGVyXCIsXG4gICAgICAgICAgICBcInRpbGVzXCI6IFtcImh0dHBzOi8vc3RvcmFnZS5nb29nbGVhcGlzLmNvbS9lYXJ0aGVuZ2luZXBhcnRuZXJzLWhhbnNlbi90aWxlcy9nZmNfdjEuNC9nYWluX2FscGhhL3t6fS97eH0ve3l9LnBuZ1wiXSxcbiAgICAgICAgICAgIFwiYXR0cmlidXRpb25cIjogXCJIYW5zZW4vVU1EL0dvb2dsZS9VU0dTL05BU0FcIlxuICAgICAgICB9LFxuICAgICAgICBsYWJlbDogJ0ZvcmVzdCBjb3ZlciBnYWluIDIwMDDigJMyMDEyJyxcbiAgICAgICAgYWJzdHJhY3Q6IGVuY29kZVVSSSgnSGFuc2VuLCBNLiBDLiwgUC4gVi4gUG90YXBvdiwgUi4gTW9vcmUsIE0uIEhhbmNoZXIsIFMuIEEuIFR1cnViYW5vdmEsIEEuIFR5dWthdmluYSwgRC4gVGhhdSwgUy4gVi4gU3RlaG1hbiwgUy4gSi4gR29ldHosICcgK1xuICAgICAgICAgICAgJ1QuIFIuIExvdmVsYW5kLCBBLiBLb21tYXJlZGR5LCBBLiBFZ29yb3YsIEwuIENoaW5pLCBDLiBPLiBKdXN0aWNlLCBhbmQgSi4gUi4gRy4gVG93bnNoZW5kLiAyMDEzLiA8Yj7igJxIaWdoLVJlc29sdXRpb24gR2xvYmFsIE1hcHMgb2YgMjFzdC1DZW50dXJ5IEZvcmVzdCBDb3ZlciBDaGFuZ2Uu4oCdPC9iPiAnICtcbiAgICAgICAgICAgICdTY2llbmNlIDM0MiAoMTUgTm92ZW1iZXIpOiA4NTDigJM1My4gPGJyIC8+RGF0YSBhdmFpbGFibGUgb24tbGluZSBmcm9tOiA8YSBocmVmPVwiaHR0cHM6Ly9nbGFkLnVtZC5lZHUvZGF0YXNldC9nbG9iYWwtMjAxMC10cmVlLWNvdmVyLTMwLW1cIiB0YXJnZXQ9XCJfYmxhbmtcIj5odHRwczovL2dsYWQudW1kLmVkdS9kYXRhc2V0L2dsb2JhbC0yMDEwLXRyZWUtY292ZXItMzAtbTwvYT4uICcgK1xuICAgICAgICAgICAgJzxiciAvPkFjY2Vzc2VkIHRocm91Z2ggPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmdsb2JhbGZvcmVzdHdhdGNoLm9yZ1wiIHRhcmdldD1cIl9ibGFua1wiPkdsb2JhbCBGb3Jlc3QgV2F0Y2g8L2E+JylcbiAgICB9LFxuICAgIGZvcmVzdF9sb3NzOiB7XG4gICAgICAgIGlkOiAnZm9yZXN0X2xvc3MnLFxuICAgICAgICB0eXBlOiAncmFzdGVyJyxcbiAgICAgICAgc291cmNlOntcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInJhc3RlclwiLFxuICAgICAgICAgICAgXCJ0aWxlc1wiOiBbXCJodHRwczovL3N0b3JhZ2UuZ29vZ2xlYXBpcy5jb20vZWFydGhlbmdpbmVwYXJ0bmVycy1oYW5zZW4vdGlsZXMvZ2ZjX3YxLjcvbG9zc19hbHBoYS97en0ve3h9L3t5fS5wbmdcIl0sXG4gICAgICAgICAgICBcImF0dHJpYnV0aW9uXCI6IFwiSGFuc2VuL1VNRC9Hb29nbGUvVVNHUy9OQVNBXCJcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6ICdGb3Jlc3QgY292ZXIgbG9zcyAyMDAw4oCTMjAxOCcsXG4gICAgICAgIGFic3RyYWN0OiBlbmNvZGVVUkkoJ0hhbnNlbiwgTS4gQy4sIFAuIFYuIFBvdGFwb3YsIFIuIE1vb3JlLCBNLiBIYW5jaGVyLCBTLiBBLiBUdXJ1YmFub3ZhLCBBLiBUeXVrYXZpbmEsIEQuIFRoYXUsIFMuIFYuIFN0ZWhtYW4sIFMuIEouIEdvZXR6LCAnICtcbiAgICAgICAgICAgICdULiBSLiBMb3ZlbGFuZCwgQS4gS29tbWFyZWRkeSwgQS4gRWdvcm92LCBMLiBDaGluaSwgQy4gTy4gSnVzdGljZSwgYW5kIEouIFIuIEcuIFRvd25zaGVuZC4gMjAxMy4gPGI+4oCcSGlnaC1SZXNvbHV0aW9uIEdsb2JhbCBNYXBzIG9mIDIxc3QtQ2VudHVyeSBGb3Jlc3QgQ292ZXIgQ2hhbmdlLuKAnTwvYj4gJyArXG4gICAgICAgICAgICAnU2NpZW5jZSAzNDIgKDE1IE5vdmVtYmVyKTogODUw4oCTNTMuIDxiciAvPkRhdGEgYXZhaWxhYmxlIG9uLWxpbmUgZnJvbTogPGEgaHJlZj1cImh0dHBzOi8vZ2xhZC51bWQuZWR1L2RhdGFzZXQvZ2xvYmFsLTIwMTAtdHJlZS1jb3Zlci0zMC1tXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cHM6Ly9nbGFkLnVtZC5lZHUvZGF0YXNldC9nbG9iYWwtMjAxMC10cmVlLWNvdmVyLTMwLW08L2E+LiAnICtcbiAgICAgICAgICAgICc8YnIgLz5BY2Nlc3NlZCB0aHJvdWdoIDxhIGhyZWY9XCJodHRwczovL3d3dy5nbG9iYWxmb3Jlc3R3YXRjaC5vcmdcIiB0YXJnZXQ9XCJfYmxhbmtcIj5HbG9iYWwgRm9yZXN0IFdhdGNoPC9hPicpXG4gICAgfSxcbiAgICBpbnRhY3RfZm9yZXN0OiB7XG4gICAgICAgIGlkOiBcImludGFjdF9mb3Jlc3RcIixcbiAgICAgICAgdHlwZTogXCJyYXN0ZXJcIixcbiAgICAgICAgc291cmNlOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJyYXN0ZXJcIixcbiAgICAgICAgICAgIFwidGlsZXNcIjogW1wiaHR0cHM6Ly9zdG9yYWdlLmdvb2dsZWFwaXMuY29tL2VhcnRoZW5naW5lcGFydG5lcnMtaGFuc2VuL3RpbGVzL2ludGFjdF9mb3Jlc3RfMjAxNi97en0ve3h9L3t5fS5wbmdcIl0sXG4gICAgICAgICAgICBcImF0dHJpYnV0aW9uXCI6ICdNYXAgdGlsZXMgYnkgPGEgdGFyZ2V0PVwiX3RvcFwiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHA6Ly9zdGFtZW4uY29tXCI+U3RhbWVuIERlc2lnbjwvYT4sIHVuZGVyIDxhIHRhcmdldD1cIl90b3BcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS8zLjBcIj5DQyBCWSAzLjA8L2E+LiBEYXRhIGJ5IDxhIHRhcmdldD1cIl90b3BcIiByZWw9XCJub29wZW5lclwiIGhyZWY9XCJodHRwOi8vb3BlbnN0cmVldG1hcC5vcmdcIj5PcGVuU3RyZWV0TWFwPC9hPiwgdW5kZXIgPGEgdGFyZ2V0PVwiX3RvcFwiIHJlbD1cIm5vb3BlbmVyXCIgaHJlZj1cImh0dHA6Ly9jcmVhdGl2ZWNvbW1vbnMub3JnL2xpY2Vuc2VzL2J5LXNhLzMuMFwiPkNDIEJZIFNBPC9hPidcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWw6ICdJbnRhY3QgRm9yZXN0IExhbmRzY2FwZXMgKElGTCAyMDAwLTIwMTYpJyxcbiAgICAgICAgYWJzdHJhY3Q6IGVuY29kZVVSSSgnR3JlZW5wZWFjZSwgVW5pdmVyc2l0eSBvZiBNYXJ5bGFuZCwgV29ybGQgUmVzb3VyY2VzIEluc3RpdHV0ZSBhbmQgVHJhbnNwYXJlbnQgV29ybGQuIOKAnEludGFjdCBGb3Jlc3QgTGFuZHNjYXBlcy4gMjAwMC8yMDEzLzIwMTbigJ0gJyArXG4gICAgICAgICAgICAnQWNjZXNzZWQgdGhyb3VnaCA8YSBocmVmPVwiaHR0cHM6Ly93d3cuZ2xvYmFsZm9yZXN0d2F0Y2gub3JnXCIgdGFyZ2V0PVwiX2JsYW5rXCI+R2xvYmFsIEZvcmVzdCBXYXRjaDwvYT4nKVxuICAgIH0sXG5cbiAgICAvLyAjIyMjIyMjIyMjICBPdmVybGF5cyAgIyMjIyMjIyMjI1xuICAgIGNvbWlmYWNfbWFzazogIHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC53bXMoJ2NvbWlmYWNfbWFzaycsIG51bGwsIHRydWUpLFxuXG4gICAgY29taWZhY19lZXo6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5tYXBib3hfdmVjdG9yX2xheWVyKCdjb21pZmFjX2VleicsIG51bGwsICdmaWxsJywge1xuICAgICAgICAnZmlsbC1jb2xvcic6XG4gICAgICAgICAgICBbXCJjYXNlXCIsXG4gICAgICAgICAgICAgICAgW1wiYm9vbGVhblwiLCBbXCJmZWF0dXJlLXN0YXRlXCIsIFwiaG92ZXJcIl0sIGZhbHNlXSwgJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgICAgICAgICAgICAgJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMCknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgJ2ZpbGwtb3V0bGluZS1jb2xvcic6ICdyZ2JhKDYwLCAxNTAsIDI1NSwgMC44KSdcbiAgICB9KSxcblxuICAgIGNvdW50cmllczogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF92ZWN0b3JfbGF5ZXIoJ2NvdW50cmllcycsIG51bGwsICdmaWxsJywge1xuICAgICAgICAnZmlsbC1jb2xvcic6XG4gICAgICAgICAgICBbXCJjYXNlXCIsXG4gICAgICAgICAgICAgICAgW1wiYm9vbGVhblwiLCBbXCJmZWF0dXJlLXN0YXRlXCIsIFwiaG92ZXJcIl0sIGZhbHNlXSwgJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4zKScsXG4gICAgICAgICAgICAgICAgJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMCknLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgJ2ZpbGwtb3V0bGluZS1jb2xvcic6ICdyZ2JhKDAsIDUwLCAwLCAwLjgpJ1xuICAgIH0sXG4gICAgJ2NvdW50cmllcycpLFxuXG4gICAgbGFuZHNjYXBlczogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF92ZWN0b3JfbGF5ZXIoJ2xhbmRzY2FwZXMnLCBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcucGxhdGZvcm0uc2l0ZXMubGFuZHNjYXBlcycsIDIpLCAnZmlsbCcsIHtcbiAgICAgICAgJ2ZpbGwtY29sb3InOiAncmdiKDI1NSwgMjU1LCAwKScsXG4gICAgICAgICdmaWxsLW9wYWNpdHknOlxuICAgICAgICAgICAgW1wiY2FzZVwiLFxuICAgICAgICAgICAgICAgIFtcImJvb2xlYW5cIiwgW1wiZmVhdHVyZS1zdGF0ZVwiLCBcImhvdmVyXCJdLCBmYWxzZV0sIDAuOCxcbiAgICAgICAgICAgICAgICAwLjVcbiAgICAgICAgICAgIF1cbiAgICB9KSxcbiAgICBrbGM6IHdpbmRvdy5XZWJNYXBwaW5nLk1hcGJveC5tYXBib3hfdmVjdG9yX2xheWVyKCdrbGMnLCBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcucGxhdGZvcm0uc2l0ZXMua2xjJywgMiksICdmaWxsJywge1xuICAgICAgICAnZmlsbC1jb2xvcic6ICdyZ2IoMjU1LCAxNTUsIDApJyxcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6XG4gICAgICAgICAgICBbXCJjYXNlXCIsXG4gICAgICAgICAgICAgICAgW1wiYm9vbGVhblwiLCBbXCJmZWF0dXJlLXN0YXRlXCIsIFwiaG92ZXJcIl0sIGZhbHNlXSwgMC44LFxuICAgICAgICAgICAgICAgIDAuNVxuICAgICAgICAgICAgXVxuICAgIH0pLFxuICAgIGNvbmNlc3Npb25zOiB3aW5kb3cuV2ViTWFwcGluZy5NYXBib3gubWFwYm94X3ZlY3Rvcl9sYXllcignY29uY2Vzc2lvbnMnLCBMb2NhbGUuZ2V0TGFiZWwoJ21hcHBpbmcucGxhdGZvcm0uc2l0ZXMuY29uY2Vzc2lvbnMnLCAyKSwgJ2ZpbGwnLCB7XG4gICAgICAgICdmaWxsLWNvbG9yJzogJ3JnYigxNjMsIDExMywgNjYpJyxcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6XG4gICAgICAgICAgICBbXCJjYXNlXCIsXG4gICAgICAgICAgICAgICAgW1wiYm9vbGVhblwiLCBbXCJmZWF0dXJlLXN0YXRlXCIsIFwiaG92ZXJcIl0sIGZhbHNlXSwgMC44LFxuICAgICAgICAgICAgICAgIDAuNVxuICAgICAgICAgICAgXVxuICAgIH0pLFxuICAgIHByb3RlY3RlZF9hcmVhczogd2luZG93LldlYk1hcHBpbmcuTWFwYm94Lm1hcGJveF92ZWN0b3JfbGF5ZXIoJ3Byb3RlY3RlZF9hcmVhcycsIExvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5wbGF0Zm9ybS5zaXRlcy5wcm90ZWN0ZWRfYXJlYXMnLCAyKSwgJ2ZpbGwnLCB7XG4gICAgICAgICdmaWxsLWNvbG9yJzogJ3JnYigwLCAxMTUsIDQwKScsXG4gICAgICAgICdmaWxsLW9wYWNpdHknOlxuICAgICAgICAgICAgW1wiY2FzZVwiLFxuICAgICAgICAgICAgICAgIFtcImJvb2xlYW5cIiwgW1wiZmVhdHVyZS1zdGF0ZVwiLCBcImhvdmVyXCJdLCBmYWxzZV0sIDAuOCxcbiAgICAgICAgICAgICAgICAwLjVcbiAgICAgICAgICAgIF1cbiAgICB9LFxuICAgICdwcm90ZWN0ZWRfYXJlYXMnKVxuXG5cbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/layers.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/mixins/api.mixin.js":
/*!****************************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/mixins/api.mixin.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      api_cancel_token: null,\n      api_loading: false,\n      card_has_data: false,\n      api_data: {\n        forest_management: {\n          regional: null,\n          national: null,\n          concessions: null\n        },\n        biodiversity: {\n          regional: null,\n          national: null,\n          protected_areas: null\n        }\n      },\n      visible_hidden_components: []\n    };\n  },\n  mounted: function mounted() {\n    var _this = this; // call toggle functions\n\n\n    window.vueBus.$on('toggle_hidden_component', function (component) {\n      _this.toggle_hidden_component(component);\n    });\n  },\n  methods: {\n    toggle_hidden_component: function toggle_hidden_component(component) {\n      if (this.visible_hidden_components.includes(component)) {\n        this.visible_hidden_components.splice(this.visible_hidden_components.indexOf(component), 1);\n      } else {\n        this.visible_hidden_components.push(component);\n      }\n    },\n    is_hidden_component_visible: function is_hidden_component_visible(component) {\n      return this.visible_hidden_components.includes(component);\n    },\n    // ##############################################\n    // ##########  Retrieve DATA from APIs ##########\n    // ##############################################\n    getCachedData: function getCachedData() {\n      if (this.level !== 'local') {\n        if (this.level === 'regional') {\n          return this.api_data[this.theme][this.level];\n        } else if (this.site !== null && this.api_data[this.theme][this.level] !== null && this.api_data[this.theme][this.level].hasOwnProperty(this.site)) {\n          return this.api_data[this.theme][this.level][this.site];\n        }\n      }\n\n      return null;\n    },\n    getDataAttribute: function getDataAttribute(attribute_path) {\n      var data = this.getCachedData();\n\n      if (data !== null) {\n        // return data[attribute_path];\n        var deepFind = function deepFind(data, attribute_path) {\n          var paths = attribute_path.split('.');\n          var current = data;\n\n          for (var i = 0; i < paths.length; ++i) {\n            if (!current.hasOwnProperty(paths[i])) {\n              return null;\n            } else {\n              current = current[paths[i]];\n            }\n          }\n\n          return current;\n        };\n\n        return deepFind(data, attribute_path);\n      }\n\n      return null;\n    },\n    getAPI: function getAPI(site) {\n      var _this = this;\n\n      this.site = site || null;\n      this.api_loading = true;\n      this.card_has_data = false;\n      this.selected_card = this.theme + '_' + this.level;\n      this.visible_hidden_components = []; // set API url\n\n      var url = this.level === 'regional' ? 'api/analysis/' + this.theme + '/' + this.level : 'api/analysis/' + this.theme + '/' + this.level + '/' + site; // set API responseCallback\n\n      var responseCallback = function responseCallback(response) {\n        // store response in api_data\n        if (_this.level === 'regional') {\n          _this.api_data[_this.theme][_this.level] = response;\n        } else {\n          _this.api_data[_this.theme][_this.level] = _this.api_data[_this.theme][_this.level] || {};\n          _this.api_data[_this.theme][_this.level][site] = response;\n        } // set related cards + button\n\n\n        Vue.nextTick(function () {\n          _this.selected_card = _this.theme + '_' + _this.level;\n          _this.card_has_data = true;\n          Vue.nextTick(function () {\n            var first_button = document.querySelectorAll('.card-api.card-' + _this.theme + '_' + _this.level + ' .selection:first-of-type')[0];\n\n            if (first_button) {\n              _this.selected_card_button = first_button.getAttribute('data-card-key');\n            }\n          });\n        });\n      };\n\n      this.__retrieveAPI(url, responseCallback);\n    },\n    __retrieveAPI: function __retrieveAPI(url, responseCallback) {\n      var _this = this; // Cancel previous API request if still running\n\n\n      if (this.api_cancel_token !== null) {\n        this.api_cancel_token();\n      } // Check and retrieve cached data (if any)\n\n\n      var cached = this.getCachedData();\n\n      if (cached !== null) {\n        console.log('Request to API not executed. Data retrieved from cache.');\n        responseCallback(JSON.parse(JSON.stringify(cached)));\n        this.finallyCallback();\n        return;\n      }\n\n      window.axios({\n        method: 'post',\n        url: window.Laravel.baseUrl + url,\n        data: {\n          _token: _this.csrf\n        },\n        cancelToken: new window.axios.CancelToken(function executor(c) {\n          _this.api_cancel_token = c;\n        })\n      }).then(function (response) {\n        console.log('Request to API executed');\n        responseCallback(response.data);\n      })[\"catch\"](function (error) {\n        if (window.axios.isCancel(error)) {\n          console.log('Request to API canceled. No more necessary', error.message);\n        } else {\n          console.log(error);\n        }\n      })[\"finally\"](function () {\n        _this.finallyCallback();\n      });\n    },\n    finallyCallback: function finallyCallback() {\n      this.api_cancel_token = null;\n      this.api_loading = false;\n      this.removeLayerPopup();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/mixins/api.mixin.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/mixins/layers/data_driven.mixin.js":
/*!*******************************************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/mixins/layers/data_driven.mixin.js ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  mounted: function mounted() {\n    var _this = this; // call toggle functions\n\n\n    window.vueBus.$on('toggleDataLayer', function (checked, layer_id, source_layer_id, layer_paint) {\n      _this.toggle(checked, layer_id, source_layer_id, layer_paint);\n    });\n  },\n  methods: {\n    toggle: function toggle(_toggle, layer_id, source_layer_id, layer_paint) {\n      if (_toggle) {\n        this.map.addLayer({\n          'id': layer_id,\n          'type': 'fill',\n          'source': source_layer_id,\n          'source-layer': source_layer_id,\n          'paint': layer_paint\n        });\n      } else {\n        this.map.removeLayer(layer_id);\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzX2ltZXQvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L21peGlucy9sYXllcnMvZGF0YV9kcml2ZW4ubWl4aW4uanM/NTBmYyJdLCJuYW1lcyI6WyJtb3VudGVkIiwiX3RoaXMiLCJ3aW5kb3ciLCJ2dWVCdXMiLCIkb24iLCJjaGVja2VkIiwibGF5ZXJfaWQiLCJzb3VyY2VfbGF5ZXJfaWQiLCJsYXllcl9wYWludCIsInRvZ2dsZSIsIm1ldGhvZHMiLCJtYXAiLCJhZGRMYXllciIsInJlbW92ZUxheWVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFlO0FBRVhBLFNBRlcscUJBRUY7QUFDTCxRQUFJQyxLQUFLLEdBQUcsSUFBWixDQURLLENBR0w7OztBQUNBQyxVQUFNLENBQUNDLE1BQVAsQ0FBY0MsR0FBZCxDQUFrQixpQkFBbEIsRUFBcUMsVUFBVUMsT0FBVixFQUFtQkMsUUFBbkIsRUFBNkJDLGVBQTdCLEVBQThDQyxXQUE5QyxFQUEyRDtBQUM1RlAsV0FBSyxDQUFDUSxNQUFOLENBQWFKLE9BQWIsRUFBc0JDLFFBQXRCLEVBQWdDQyxlQUFoQyxFQUFpREMsV0FBakQ7QUFDSCxLQUZEO0FBR0gsR0FUVTtBQVdYRSxTQUFPLEVBQUU7QUFDTEQsVUFESyxrQkFDRUEsT0FERixFQUNVSCxRQURWLEVBQ29CQyxlQURwQixFQUNxQ0MsV0FEckMsRUFDaUQ7QUFDbEQsVUFBR0MsT0FBSCxFQUFVO0FBQ04sYUFBS0UsR0FBTCxDQUFTQyxRQUFULENBQ0k7QUFDSSxnQkFBTU4sUUFEVjtBQUVJLGtCQUFRLE1BRlo7QUFHSSxvQkFBVUMsZUFIZDtBQUlJLDBCQUFnQkEsZUFKcEI7QUFLSSxtQkFBU0M7QUFMYixTQURKO0FBU0gsT0FWRCxNQVVPO0FBQ0gsYUFBS0csR0FBTCxDQUFTRSxXQUFULENBQXFCUCxRQUFyQjtBQUNIO0FBQ0o7QUFmSTtBQVhFLENBQWYiLCJmaWxlIjoiLi9yZXNvdXJjZXMvYXNzZXRzX2ltZXQvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L21peGlucy9sYXllcnMvZGF0YV9kcml2ZW4ubWl4aW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG5cbiAgICBtb3VudGVkKCl7XG4gICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgLy8gY2FsbCB0b2dnbGUgZnVuY3Rpb25zXG4gICAgICAgIHdpbmRvdy52dWVCdXMuJG9uKCd0b2dnbGVEYXRhTGF5ZXInLCBmdW5jdGlvbiAoY2hlY2tlZCwgbGF5ZXJfaWQsIHNvdXJjZV9sYXllcl9pZCwgbGF5ZXJfcGFpbnQpIHtcbiAgICAgICAgICAgIF90aGlzLnRvZ2dsZShjaGVja2VkLCBsYXllcl9pZCwgc291cmNlX2xheWVyX2lkLCBsYXllcl9wYWludCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHRvZ2dsZSh0b2dnbGUsIGxheWVyX2lkLCBzb3VyY2VfbGF5ZXJfaWQsIGxheWVyX3BhaW50KXtcbiAgICAgICAgICAgIGlmKHRvZ2dsZSl7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIoXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdpZCc6IGxheWVyX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnZmlsbCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnc291cmNlJzogc291cmNlX2xheWVyX2lkLFxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NvdXJjZS1sYXllcic6IHNvdXJjZV9sYXllcl9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdwYWludCc6IGxheWVyX3BhaW50XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5yZW1vdmVMYXllcihsYXllcl9pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/mixins/layers/data_driven.mixin.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/mixins/layers/interactivity.mixin.js":
/*!*********************************************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/mixins/layers/interactivity.mixin.js ***!
  \*********************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      hover_feature: [],\n      popup: null,\n      popup_features: [],\n      click_coords: null\n    };\n  },\n  methods: {\n    // ########  Highlight filtered features  ######\n    setHighlight: function setHighlight(layer_id, condition, filter_attribute, filter_value) {\n      if (this.layerIsOnMap(layer_id)) {\n        if (condition) {\n          this.addGrayedLayer(layer_id);\n          this.map.setFilter(layer_id, ['==', filter_attribute, filter_value]);\n          this.map.setFilter(this.__grayedLayerId(layer_id), ['!=', filter_attribute, filter_value]);\n        } else {\n          this.removeGrayedLayer(layer_id);\n          this.map.setFilter(layer_id, true);\n        }\n      } else {\n        this.removeGrayedLayer(layer_id);\n      }\n    },\n    __grayedLayerId: function __grayedLayerId(layer_id) {\n      return layer_id + '_grayed';\n    },\n    addGrayedLayer: function addGrayedLayer(layer_id) {\n      if (!this.layerIsOnMap(this.__grayedLayerId(layer_id))) {\n        this.map.addLayer({\n          'id': this.__grayedLayerId(layer_id),\n          'type': 'fill',\n          'source': layer_id,\n          'source-layer': layer_id,\n          'paint': {\n            \"fill-color\": 'rgba(180, 180, 180, 0.5)'\n          }\n        });\n      }\n    },\n    removeGrayedLayer: function removeGrayedLayer(layer_id) {\n      if (this.layerIsOnMap(this.__grayedLayerId(layer_id))) {\n        this.map.removeLayer(this.__grayedLayerId(layer_id));\n      }\n    },\n    // ########  Mask unwanted features  ######\n    setMask: function setMask(layer_id, condition, filter_attribute, filter_value) {\n      if (this.layerIsOnMap(layer_id)) {\n        if (filter_value !== null && condition) {\n          this.addMaskedLayer(layer_id);\n          this.map.setFilter(this.__maskedLayerId(layer_id), ['!=', filter_attribute, filter_value]);\n        } else {\n          this.removeMaskedLayer(layer_id);\n        }\n      } else {\n        this.removeMaskedLayer(layer_id);\n      }\n    },\n    __maskedLayerId: function __maskedLayerId(layer_id) {\n      return layer_id + '_masked';\n    },\n    addMaskedLayer: function addMaskedLayer(layer_id) {\n      if (!this.layerIsOnMap(this.__maskedLayerId(layer_id))) {\n        this.map.addLayer({\n          'id': this.__maskedLayerId(layer_id),\n          'type': 'fill',\n          'source': layer_id,\n          'source-layer': layer_id,\n          'paint': {\n            \"fill-color\": 'rgba(0, 0, 0, 0.5)',\n            \"fill-outline-color\": 'rgba(0, 0, 0, 0.5)'\n          }\n        });\n      }\n    },\n    removeMaskedLayer: function removeMaskedLayer(layer_id) {\n      if (this.layerIsOnMap(this.__maskedLayerId(layer_id))) {\n        this.map.removeLayer(this.__maskedLayerId(layer_id));\n      }\n    },\n    // ########  Highlight on mouse hover  ######\n    mouseOver: function mouseOver(layer_id) {\n      var _this = this;\n\n      if (_this.layerIsOnMap(layer_id)) {\n        _this.hover_feature[layer_id] = _this.hover_feature[layer_id] || [];\n        this.map.on('mousemove', layer_id, function (evt) {\n          if (!_this.hover_feature[layer_id].includes(evt.features[0].id)) {\n            _this.hover_feature[layer_id].forEach(function (feature_id) {\n              _this._featureHoverOff(layer_id, feature_id);\n            });\n\n            _this._featureHoverOn(layer_id, evt.features[0].id);\n          }\n        });\n        this.map.on('mouseleave', layer_id, function () {\n          _this.hover_feature[layer_id].forEach(function (feature_id) {\n            _this._featureHoverOff(layer_id, feature_id);\n          });\n        });\n      }\n    },\n    __setFeatureHover: function __setFeatureHover(feature_id, layer_id, hover) {\n      this.map.setFeatureState({\n        source: layer_id,\n        sourceLayer: layer_id,\n        id: feature_id\n      }, {\n        hover: hover\n      });\n    },\n    _featureHoverOn: function _featureHoverOn(layer_id, feature_id) {\n      this.hover_feature[layer_id].push(feature_id);\n\n      this.__setFeatureHover(feature_id, layer_id, true);\n\n      this.map.getCanvas().style.cursor = 'pointer';\n    },\n    _featureHoverOff: function _featureHoverOff(layer_id, feature_id) {\n      if (this.hover_feature[layer_id].includes(feature_id)) {\n        this.__setFeatureHover(feature_id, layer_id, false);\n\n        this.map.getCanvas().style.cursor = '';\n        this.hover_feature[layer_id].splice(this.hover_feature[layer_id].indexOf(feature_id), 1);\n      }\n    },\n    hoverOnRelatedLayer: function hoverOnRelatedLayer(hover_layer_id, related_layer_id, hover_layer_filter_attribute, related_layer_filter_attribute) {\n      var _this = this;\n\n      if (_this.layerIsOnMap(hover_layer_id) && _this.layerIsOnMap(related_layer_id)) {\n        _this.hover_feature[hover_layer_id] = _this.hover_feature[hover_layer_id] || [];\n        _this.hover_feature[related_layer_id] = _this.hover_feature[related_layer_id] || [];\n        this.map.on('mousemove', hover_layer_id, function (evt) {\n          var related_features_ids = _this.map.querySourceFeatures(related_layer_id, {\n            sourceLayer: related_layer_id,\n            filter: ['==', related_layer_filter_attribute, evt.features[0].properties[hover_layer_filter_attribute]]\n          }).map(function (_ref) {\n            var id = _ref.id;\n            return id;\n          });\n\n          _this.hover_feature[related_layer_id].forEach(function (feature_id) {\n            if (!related_features_ids.includes(feature_id)) {\n              _this._featureHoverOff(related_layer_id, feature_id);\n            }\n          });\n\n          related_features_ids.forEach(function (feature_id) {\n            if (!_this.hover_feature[related_layer_id].includes(feature_id)) {\n              _this._featureHoverOn(related_layer_id, feature_id);\n            }\n          });\n        });\n        this.map.on('mouseleave', hover_layer_id, function () {\n          _this.hover_feature[related_layer_id].forEach(function (feature_id) {\n            _this._featureHoverOff(related_layer_id, feature_id);\n          });\n        });\n      }\n    },\n    // ########  Popup  ######\n    showPopup: function showPopup(layer_id) {\n      var _this = this;\n\n      if (_this.layerIsOnMap(layer_id)) {\n        _this.map.on('click', layer_id, function (evt) {\n          _this.removeLayerPopup(evt); // Collect all clicked features\n\n\n          _this.click_coords = evt.lngLat;\n          evt.features.forEach(function (feature) {\n            var ids = _this.popup_features.map(function (a) {\n              return a.id;\n            });\n\n            if (!ids.includes(feature.id)) {\n              _this.popup_features.push(feature);\n            }\n          }); // Build popUp content\n\n          var popup_content = '';\n\n          _this.popup_features.forEach(function (feature, feature_index) {\n            popup_content += '<div class=\"popup-item\" id=\"popup-item_' + feature_index + '\">' + _this.featurePopupDescription(feature) + _this.featurePopupActions(feature) + '</div>';\n          });\n\n          _this.popup = new window.mapboxgl.Popup().setLngLat(evt.lngLat).setHTML(popup_content).addTo(_this.map); // Add manually the EventListener. v-on directive on button added by mapboxgl.Popup (after VUeJS render) does not work.\n\n          document.querySelectorAll('.mapboxgl-popup .popup-item').forEach(function (popup_item) {\n            var popup_features_index = popup_item.id.replace('popup-item_', '');\n            var button = popup_item.querySelector('button.getAPI');\n\n            if (button !== null) {\n              button.addEventListener('click', function (event) {\n                var feature = _this.popup_features[popup_features_index];\n\n                _this.zoomToFeature(feature);\n\n                _this.getAPI(feature.id);\n              });\n            }\n          });\n        });\n      }\n    },\n    removeLayerPopup: function removeLayerPopup() {\n      var evt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (this.popup !== null) {\n        this.popup.remove();\n      }\n\n      this.popup = null;\n\n      if (evt === null || this.click_coords != null && this.click_coords !== evt.lngLat) {\n        this.popup_features = [];\n      }\n    },\n    featurePopupDescription: function featurePopupDescription(feature) {\n      // console.log(feature.properties);\n      if (feature.layer.id === 'countries') {\n        return '<i>' + this.Locale.getLabel('mapping.platform.sites.countries', 1) + '</i><br />' + '<b class=\"green\">' + feature.properties.name_fr + '</b>';\n      } else {\n        return '<i>' + this.Locale.getLabel('mapping.platform.sites.' + feature.layer.id, 1) + '</i><br />' + '<b class=\"green\">' + feature.properties.name + '</b>';\n      }\n    },\n    featurePopupActions: function featurePopupActions(feature) {\n      if (feature.layer.id === this.level) {\n        return '<div class=\"popup-footer\">' + '<button class=\"btn btn-sm act-btn-basic getAPI\">' + this.Locale.getLabel('mapping.platform.analysis') + '</button>' + '</div>';\n      }\n\n      return '';\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzX2ltZXQvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L21peGlucy9sYXllcnMvaW50ZXJhY3Rpdml0eS5taXhpbi5qcz8zMzdiIl0sIm5hbWVzIjpbImRhdGEiLCJob3Zlcl9mZWF0dXJlIiwicG9wdXAiLCJwb3B1cF9mZWF0dXJlcyIsImNsaWNrX2Nvb3JkcyIsIm1ldGhvZHMiLCJzZXRIaWdobGlnaHQiLCJsYXllcl9pZCIsImNvbmRpdGlvbiIsImZpbHRlcl9hdHRyaWJ1dGUiLCJmaWx0ZXJfdmFsdWUiLCJsYXllcklzT25NYXAiLCJhZGRHcmF5ZWRMYXllciIsIm1hcCIsInNldEZpbHRlciIsIl9fZ3JheWVkTGF5ZXJJZCIsInJlbW92ZUdyYXllZExheWVyIiwiYWRkTGF5ZXIiLCJyZW1vdmVMYXllciIsInNldE1hc2siLCJhZGRNYXNrZWRMYXllciIsIl9fbWFza2VkTGF5ZXJJZCIsInJlbW92ZU1hc2tlZExheWVyIiwibW91c2VPdmVyIiwiX3RoaXMiLCJvbiIsImV2dCIsImluY2x1ZGVzIiwiZmVhdHVyZXMiLCJpZCIsImZvckVhY2giLCJmZWF0dXJlX2lkIiwiX2ZlYXR1cmVIb3Zlck9mZiIsIl9mZWF0dXJlSG92ZXJPbiIsIl9fc2V0RmVhdHVyZUhvdmVyIiwiaG92ZXIiLCJzZXRGZWF0dXJlU3RhdGUiLCJzb3VyY2UiLCJzb3VyY2VMYXllciIsInB1c2giLCJnZXRDYW52YXMiLCJzdHlsZSIsImN1cnNvciIsInNwbGljZSIsImluZGV4T2YiLCJob3Zlck9uUmVsYXRlZExheWVyIiwiaG92ZXJfbGF5ZXJfaWQiLCJyZWxhdGVkX2xheWVyX2lkIiwiaG92ZXJfbGF5ZXJfZmlsdGVyX2F0dHJpYnV0ZSIsInJlbGF0ZWRfbGF5ZXJfZmlsdGVyX2F0dHJpYnV0ZSIsInJlbGF0ZWRfZmVhdHVyZXNfaWRzIiwicXVlcnlTb3VyY2VGZWF0dXJlcyIsImZpbHRlciIsInByb3BlcnRpZXMiLCJzaG93UG9wdXAiLCJyZW1vdmVMYXllclBvcHVwIiwibG5nTGF0IiwiZmVhdHVyZSIsImlkcyIsImEiLCJwb3B1cF9jb250ZW50IiwiZmVhdHVyZV9pbmRleCIsImZlYXR1cmVQb3B1cERlc2NyaXB0aW9uIiwiZmVhdHVyZVBvcHVwQWN0aW9ucyIsIndpbmRvdyIsIm1hcGJveGdsIiwiUG9wdXAiLCJzZXRMbmdMYXQiLCJzZXRIVE1MIiwiYWRkVG8iLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJwb3B1cF9pdGVtIiwicG9wdXBfZmVhdHVyZXNfaW5kZXgiLCJyZXBsYWNlIiwiYnV0dG9uIiwicXVlcnlTZWxlY3RvciIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInpvb21Ub0ZlYXR1cmUiLCJnZXRBUEkiLCJyZW1vdmUiLCJsYXllciIsIkxvY2FsZSIsImdldExhYmVsIiwibmFtZV9mciIsIm5hbWUiLCJsZXZlbCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBZTtBQUVYQSxNQUZXLGtCQUVKO0FBQ0gsV0FBTztBQUNIQyxtQkFBYSxFQUFFLEVBRFo7QUFFSEMsV0FBSyxFQUFFLElBRko7QUFHSEMsb0JBQWMsRUFBRSxFQUhiO0FBSUhDLGtCQUFZLEVBQUU7QUFKWCxLQUFQO0FBTUgsR0FUVTtBQVdYQyxTQUFPLEVBQUU7QUFFTDtBQUVBQyxnQkFKSyx3QkFJUUMsUUFKUixFQUlrQkMsU0FKbEIsRUFJNkJDLGdCQUo3QixFQUkrQ0MsWUFKL0MsRUFJNEQ7QUFDN0QsVUFBRyxLQUFLQyxZQUFMLENBQWtCSixRQUFsQixDQUFILEVBQWdDO0FBQzVCLFlBQUlDLFNBQUosRUFBZTtBQUNYLGVBQUtJLGNBQUwsQ0FBb0JMLFFBQXBCO0FBQ0EsZUFBS00sR0FBTCxDQUFTQyxTQUFULENBQW1CUCxRQUFuQixFQUE2QixDQUFDLElBQUQsRUFBT0UsZ0JBQVAsRUFBeUJDLFlBQXpCLENBQTdCO0FBQ0EsZUFBS0csR0FBTCxDQUFTQyxTQUFULENBQW1CLEtBQUtDLGVBQUwsQ0FBcUJSLFFBQXJCLENBQW5CLEVBQW1E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O0FBQ0osS0FsT0k7QUFvT0x2Qix1QkFwT0ssK0JBb09lTixPQXBPZixFQW9PdUI7QUFDeEIsVUFBR0EsT0FBTyxDQUFDeUIsS0FBUixDQUFjckQsRUFBZCxLQUFxQixLQUFLMEQsS0FBN0IsRUFBbUM7QUFDL0IsZUFBTywrQkFDSCxrREFERyxHQUNrRCxLQUFLSixNQUFMLENBQVlDLFFBQVosQ0FBcUIsMkJBQXJCLENBRGxELEdBQ3NHLFdBRHRHLEdBRUgsUUFGSjtBQUdIOztBQUNELGFBQU8sRUFBUDtBQUNIO0FBM09JO0FBWEUsQ0FBZiIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHNfaW1ldC9hc3NldHMvanMvbWFwcGluZ19tYXBib3gvbWl4aW5zL2xheWVycy9pbnRlcmFjdGl2aXR5Lm1peGluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhvdmVyX2ZlYXR1cmU6IFtdLFxuICAgICAgICAgICAgcG9wdXA6IG51bGwsXG4gICAgICAgICAgICBwb3B1cF9mZWF0dXJlczogW10sXG4gICAgICAgICAgICBjbGlja19jb29yZHM6IG51bGxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG5cbiAgICAgICAgLy8gIyMjIyMjIyMgIEhpZ2hsaWdodCBmaWx0ZXJlZCBmZWF0dXJlcyAgIyMjIyMjXG5cbiAgICAgICAgc2V0SGlnaGxpZ2h0KGxheWVyX2lkLCBjb25kaXRpb24sIGZpbHRlcl9hdHRyaWJ1dGUsIGZpbHRlcl92YWx1ZSl7XG4gICAgICAgICAgICBpZih0aGlzLmxheWVySXNPbk1hcChsYXllcl9pZCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkR3JheWVkTGF5ZXIobGF5ZXJfaWQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcC5zZXRGaWx0ZXIobGF5ZXJfaWQsIFsnPT0nLCBmaWx0ZXJfYXR0cmlidXRlLCBmaWx0ZXJfdmFsdWVdKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXAuc2V0RmlsdGVyKHRoaXMuX19ncmF5ZWRMYXllcklkKGxheWVyX2lkKSwgWychPScsIGZpbHRlcl9hdHRyaWJ1dGUsIGZpbHRlcl92YWx1ZV0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlR3JheWVkTGF5ZXIobGF5ZXJfaWQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcC5zZXRGaWx0ZXIobGF5ZXJfaWQsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVHcmF5ZWRMYXllcihsYXllcl9pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX19ncmF5ZWRMYXllcklkKGxheWVyX2lkKXtcbiAgICAgICAgICAgIHJldHVybiBsYXllcl9pZCArICdfZ3JheWVkJztcbiAgICAgICAgfSxcblxuICAgICAgICBhZGRHcmF5ZWRMYXllcihsYXllcl9pZCl7XG4gICAgICAgICAgICBpZighdGhpcy5sYXllcklzT25NYXAodGhpcy5fX2dyYXllZExheWVySWQobGF5ZXJfaWQpKSl7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuYWRkTGF5ZXIoe1xuICAgICAgICAgICAgICAgICAgICAnaWQnOiB0aGlzLl9fZ3JheWVkTGF5ZXJJZChsYXllcl9pZCksXG4gICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2ZpbGwnLFxuICAgICAgICAgICAgICAgICAgICAnc291cmNlJzogbGF5ZXJfaWQsXG4gICAgICAgICAgICAgICAgICAgICdzb3VyY2UtbGF5ZXInOiBsYXllcl9pZCxcbiAgICAgICAgICAgICAgICAgICAgJ3BhaW50Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJmaWxsLWNvbG9yXCI6ICdyZ2JhKDE4MCwgMTgwLCAxODAsIDAuNSknLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZUdyYXllZExheWVyKGxheWVyX2lkKXtcbiAgICAgICAgICAgIGlmKHRoaXMubGF5ZXJJc09uTWFwKHRoaXMuX19ncmF5ZWRMYXllcklkKGxheWVyX2lkKSkpe1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKHRoaXMuX19ncmF5ZWRMYXllcklkKGxheWVyX2lkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cblxuICAgICAgICAvLyAjIyMjIyMjIyAgTWFzayB1bndhbnRlZCBmZWF0dXJlcyAgIyMjIyMjXG5cbiAgICAgICAgc2V0TWFzayhsYXllcl9pZCwgY29uZGl0aW9uLCBmaWx0ZXJfYXR0cmlidXRlLCBmaWx0ZXJfdmFsdWUpe1xuICAgICAgICAgICAgaWYodGhpcy5sYXllcklzT25NYXAobGF5ZXJfaWQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcl92YWx1ZSAhPT0gbnVsbCAmJiBjb25kaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRNYXNrZWRMYXllcihsYXllcl9pZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFwLnNldEZpbHRlcih0aGlzLl9fbWFza2VkTGF5ZXJJZChsYXllcl9pZCksIFsnIT0nLCBmaWx0ZXJfYXR0cmlidXRlLCBmaWx0ZXJfdmFsdWVdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZU1hc2tlZExheWVyKGxheWVyX2lkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlTWFza2VkTGF5ZXIobGF5ZXJfaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9fbWFza2VkTGF5ZXJJZChsYXllcl9pZCl7XG4gICAgICAgICAgICByZXR1cm4gbGF5ZXJfaWQgKyAnX21hc2tlZCc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgYWRkTWFza2VkTGF5ZXIobGF5ZXJfaWQpe1xuICAgICAgICAgICAgaWYoIXRoaXMubGF5ZXJJc09uTWFwKHRoaXMuX19tYXNrZWRMYXllcklkKGxheWVyX2lkKSkpe1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLmFkZExheWVyKHtcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogdGhpcy5fX21hc2tlZExheWVySWQobGF5ZXJfaWQpLFxuICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdmaWxsJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NvdXJjZSc6IGxheWVyX2lkLFxuICAgICAgICAgICAgICAgICAgICAnc291cmNlLWxheWVyJzogbGF5ZXJfaWQsXG4gICAgICAgICAgICAgICAgICAgICdwYWludCc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmlsbC1jb2xvclwiOiAncmdiYSgwLCAwLCAwLCAwLjUpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZmlsbC1vdXRsaW5lLWNvbG9yXCI6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZU1hc2tlZExheWVyKGxheWVyX2lkKXtcbiAgICAgICAgICAgIGlmKHRoaXMubGF5ZXJJc09uTWFwKHRoaXMuX19tYXNrZWRMYXllcklkKGxheWVyX2lkKSkpe1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLnJlbW92ZUxheWVyKHRoaXMuX19tYXNrZWRMYXllcklkKGxheWVyX2lkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gIyMjIyMjIyMgIEhpZ2hsaWdodCBvbiBtb3VzZSBob3ZlciAgIyMjIyMjXG5cbiAgICAgICAgbW91c2VPdmVyKGxheWVyX2lkKXtcbiAgICAgICAgICAgIGxldCBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICBpZihfdGhpcy5sYXllcklzT25NYXAobGF5ZXJfaWQpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaG92ZXJfZmVhdHVyZVtsYXllcl9pZF0gPSBfdGhpcy5ob3Zlcl9mZWF0dXJlW2xheWVyX2lkXSB8fCBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5vbignbW91c2Vtb3ZlJywgbGF5ZXJfaWQsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGhpcy5ob3Zlcl9mZWF0dXJlW2xheWVyX2lkXS5pbmNsdWRlcyhldnQuZmVhdHVyZXNbMF0uaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5ob3Zlcl9mZWF0dXJlW2xheWVyX2lkXS5mb3JFYWNoKGZ1bmN0aW9uKGZlYXR1cmVfaWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9mZWF0dXJlSG92ZXJPZmYobGF5ZXJfaWQsIGZlYXR1cmVfaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZmVhdHVyZUhvdmVyT24oIGxheWVyX2lkLCBldnQuZmVhdHVyZXNbMF0uaWQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAub24oJ21vdXNlbGVhdmUnLCBsYXllcl9pZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ob3Zlcl9mZWF0dXJlW2xheWVyX2lkXS5mb3JFYWNoKGZ1bmN0aW9uKGZlYXR1cmVfaWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2ZlYXR1cmVIb3Zlck9mZihsYXllcl9pZCwgZmVhdHVyZV9pZCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9fc2V0RmVhdHVyZUhvdmVyKGZlYXR1cmVfaWQsIGxheWVyX2lkLCBob3Zlcil7XG4gICAgICAgICAgICB0aGlzLm1hcC5zZXRGZWF0dXJlU3RhdGUoe1xuICAgICAgICAgICAgICAgIHNvdXJjZTogbGF5ZXJfaWQsXG4gICAgICAgICAgICAgICAgc291cmNlTGF5ZXI6IGxheWVyX2lkLFxuICAgICAgICAgICAgICAgIGlkOiBmZWF0dXJlX2lkXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgaG92ZXI6IGhvdmVyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBfZmVhdHVyZUhvdmVyT24obGF5ZXJfaWQsIGZlYXR1cmVfaWQpe1xuICAgICAgICAgICAgdGhpcy5ob3Zlcl9mZWF0dXJlW2xheWVyX2lkXS5wdXNoKGZlYXR1cmVfaWQpO1xuICAgICAgICAgICAgdGhpcy5fX3NldEZlYXR1cmVIb3ZlcihmZWF0dXJlX2lkLCBsYXllcl9pZCwgdHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLm1hcC5nZXRDYW52YXMoKS5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgIH0sXG4gICAgICAgIF9mZWF0dXJlSG92ZXJPZmYobGF5ZXJfaWQsIGZlYXR1cmVfaWQpe1xuICAgICAgICAgICAgaWYgKHRoaXMuaG92ZXJfZmVhdHVyZVtsYXllcl9pZF0uaW5jbHVkZXMoZmVhdHVyZV9pZCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9fc2V0RmVhdHVyZUhvdmVyKGZlYXR1cmVfaWQsIGxheWVyX2lkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuZ2V0Q2FudmFzKCkuc3R5bGUuY3Vyc29yID0gJyc7XG4gICAgICAgICAgICAgICAgdGhpcy5ob3Zlcl9mZWF0dXJlW2xheWVyX2lkXS5zcGxpY2UodGhpcy5ob3Zlcl9mZWF0dXJlW2xheWVyX2lkXS5pbmRleE9mKGZlYXR1cmVfaWQpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBob3Zlck9uUmVsYXRlZExheWVyKGhvdmVyX2xheWVyX2lkLCByZWxhdGVkX2xheWVyX2lkLCBob3Zlcl9sYXllcl9maWx0ZXJfYXR0cmlidXRlLCByZWxhdGVkX2xheWVyX2ZpbHRlcl9hdHRyaWJ1dGUpe1xuICAgICAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIGlmKF90aGlzLmxheWVySXNPbk1hcChob3Zlcl9sYXllcl9pZCkgJiYgX3RoaXMubGF5ZXJJc09uTWFwKHJlbGF0ZWRfbGF5ZXJfaWQpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaG92ZXJfZmVhdHVyZVtob3Zlcl9sYXllcl9pZF0gPSBfdGhpcy5ob3Zlcl9mZWF0dXJlW2hvdmVyX2xheWVyX2lkXSB8fCBbXTtcbiAgICAgICAgICAgICAgICBfdGhpcy5ob3Zlcl9mZWF0dXJlW3JlbGF0ZWRfbGF5ZXJfaWRdID0gX3RoaXMuaG92ZXJfZmVhdHVyZVtyZWxhdGVkX2xheWVyX2lkXSB8fCBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLm1hcC5vbignbW91c2Vtb3ZlJywgaG92ZXJfbGF5ZXJfaWQsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbGF0ZWRfZmVhdHVyZXNfaWRzID0gX3RoaXMubWFwLnF1ZXJ5U291cmNlRmVhdHVyZXMocmVsYXRlZF9sYXllcl9pZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTGF5ZXI6IHJlbGF0ZWRfbGF5ZXJfaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IFsnPT0nLCByZWxhdGVkX2xheWVyX2ZpbHRlcl9hdHRyaWJ1dGUsIGV2dC5mZWF0dXJlc1swXS5wcm9wZXJ0aWVzW2hvdmVyX2xheWVyX2ZpbHRlcl9hdHRyaWJ1dGVdXVxuICAgICAgICAgICAgICAgICAgICB9KS5tYXAoKHsgaWQgfSkgPT4gaWQpO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5ob3Zlcl9mZWF0dXJlW3JlbGF0ZWRfbGF5ZXJfaWRdLmZvckVhY2goZnVuY3Rpb24oZmVhdHVyZV9pZCl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZighcmVsYXRlZF9mZWF0dXJlc19pZHMuaW5jbHVkZXMoZmVhdHVyZV9pZCkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl9mZWF0dXJlSG92ZXJPZmYocmVsYXRlZF9sYXllcl9pZCwgZmVhdHVyZV9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICByZWxhdGVkX2ZlYXR1cmVzX2lkcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlX2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV90aGlzLmhvdmVyX2ZlYXR1cmVbcmVsYXRlZF9sYXllcl9pZF0uaW5jbHVkZXMoZmVhdHVyZV9pZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fZmVhdHVyZUhvdmVyT24ocmVsYXRlZF9sYXllcl9pZCwgZmVhdHVyZV9pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMubWFwLm9uKCdtb3VzZWxlYXZlJywgaG92ZXJfbGF5ZXJfaWQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaG92ZXJfZmVhdHVyZVtyZWxhdGVkX2xheWVyX2lkXS5mb3JFYWNoKGZ1bmN0aW9uKGZlYXR1cmVfaWQpe1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX2ZlYXR1cmVIb3Zlck9mZihyZWxhdGVkX2xheWVyX2lkLCBmZWF0dXJlX2lkKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgLy8gIyMjIyMjIyMgIFBvcHVwICAjIyMjIyNcblxuICAgICAgICBzaG93UG9wdXAobGF5ZXJfaWQpe1xuICAgICAgICAgICAgbGV0IF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIGlmKF90aGlzLmxheWVySXNPbk1hcChsYXllcl9pZCkpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5tYXAub24oJ2NsaWNrJywgbGF5ZXJfaWQsIGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucmVtb3ZlTGF5ZXJQb3B1cChldnQpO1xuICAgICAgICAgICAgICAgICAgICAvLyBDb2xsZWN0IGFsbCBjbGlja2VkIGZlYXR1cmVzXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmNsaWNrX2Nvb3JkcyA9IGV2dC5sbmdMYXQ7XG4gICAgICAgICAgICAgICAgICAgIGV2dC5mZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWRzID0gX3RoaXMucG9wdXBfZmVhdHVyZXMubWFwKGEgPT4gYS5pZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlkcy5pbmNsdWRlcyhmZWF0dXJlLmlkKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLnBvcHVwX2ZlYXR1cmVzLnB1c2goZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEJ1aWxkIHBvcFVwIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvcHVwX2NvbnRlbnQgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucG9wdXBfZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSwgZmVhdHVyZV9pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBfY29udGVudCArPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwicG9wdXAtaXRlbVwiIGlkPVwicG9wdXAtaXRlbV8nICsgZmVhdHVyZV9pbmRleCArICdcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5mZWF0dXJlUG9wdXBEZXNjcmlwdGlvbihmZWF0dXJlKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZmVhdHVyZVBvcHVwQWN0aW9ucyhmZWF0dXJlKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIF90aGlzLnBvcHVwID0gbmV3IHdpbmRvdy5tYXBib3hnbC5Qb3B1cCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0TG5nTGF0KGV2dC5sbmdMYXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0SFRNTChwb3B1cF9jb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZFRvKF90aGlzLm1hcCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIG1hbnVhbGx5IHRoZSBFdmVudExpc3RlbmVyLiB2LW9uIGRpcmVjdGl2ZSBvbiBidXR0b24gYWRkZWQgYnkgbWFwYm94Z2wuUG9wdXAgKGFmdGVyIFZVZUpTIHJlbmRlcikgZG9lcyBub3Qgd29yay5cbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLm1hcGJveGdsLXBvcHVwIC5wb3B1cC1pdGVtJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChwb3B1cF9pdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBvcHVwX2ZlYXR1cmVzX2luZGV4ID0gcG9wdXBfaXRlbS5pZC5yZXBsYWNlKCdwb3B1cC1pdGVtXycsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYnV0dG9uID0gcG9wdXBfaXRlbS5xdWVyeVNlbGVjdG9yKCdidXR0b24uZ2V0QVBJJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJ1dHRvbiAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBmZWF0dXJlID0gX3RoaXMucG9wdXBfZmVhdHVyZXNbcG9wdXBfZmVhdHVyZXNfaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuem9vbVRvRmVhdHVyZShmZWF0dXJlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLmdldEFQSShmZWF0dXJlLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVtb3ZlTGF5ZXJQb3B1cChldnQgPSBudWxsKXtcbiAgICAgICAgICAgIGlmKHRoaXMucG9wdXAhPT1udWxsKXtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcHVwLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5wb3B1cCA9IG51bGw7XG4gICAgICAgICAgICBpZihldnQ9PT1udWxsIHx8ICh0aGlzLmNsaWNrX2Nvb3JkcyE9bnVsbCAmJiB0aGlzLmNsaWNrX2Nvb3JkcyE9PWV2dC5sbmdMYXQpKXtcbiAgICAgICAgICAgICAgICB0aGlzLnBvcHVwX2ZlYXR1cmVzID0gW107XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgZmVhdHVyZVBvcHVwRGVzY3JpcHRpb24oZmVhdHVyZSl7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhmZWF0dXJlLnByb3BlcnRpZXMpO1xuICAgICAgICAgICAgaWYoZmVhdHVyZS5sYXllci5pZCA9PT0gJ2NvdW50cmllcycpe1xuICAgICAgICAgICAgICAgIHJldHVybiAnPGk+JyArIHRoaXMuTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLnBsYXRmb3JtLnNpdGVzLmNvdW50cmllcycsIDEpICsgJzwvaT48YnIgLz4nICtcbiAgICAgICAgICAgICAgICAgICAgJzxiIGNsYXNzPVwiZ3JlZW5cIj4nICsgZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWVfZnIgKyAnPC9iPic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHJldHVybiAnPGk+JyArIHRoaXMuTG9jYWxlLmdldExhYmVsKCdtYXBwaW5nLnBsYXRmb3JtLnNpdGVzLicrZmVhdHVyZS5sYXllci5pZCwgMSkgKyAnPC9pPjxiciAvPicgK1xuICAgICAgICAgICAgICAgICAgICAnPGIgY2xhc3M9XCJncmVlblwiPicgKyBmZWF0dXJlLnByb3BlcnRpZXMubmFtZSArICc8L2I+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBmZWF0dXJlUG9wdXBBY3Rpb25zKGZlYXR1cmUpe1xuICAgICAgICAgICAgaWYoZmVhdHVyZS5sYXllci5pZCA9PT0gdGhpcy5sZXZlbCl7XG4gICAgICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwicG9wdXAtZm9vdGVyXCI+JyArXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1zbSBhY3QtYnRuLWJhc2ljIGdldEFQSVwiPicgKyB0aGlzLkxvY2FsZS5nZXRMYWJlbCgnbWFwcGluZy5wbGF0Zm9ybS5hbmFseXNpcycpICsgJzwvYnV0dG9uPicgK1xuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfSxcblxuICAgIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/mixins/layers/interactivity.mixin.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/mixins/library.mixin.js":
/*!********************************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/mixins/library.mixin.js ***!
  \********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      api_library_cancel_token: null,\n      library: {\n        data: null,\n        count: null,\n        show: false,\n        loading: false,\n        show_filters: false,\n        filter_domain: null\n      }\n    };\n  },\n  computed: {\n    filtered_library: function filtered_library() {\n      var _this = this;\n\n      var list = this.library.data; // sort\n\n      list = _.orderBy(list, 'title', 'asc'); // filter\n\n      list = list.filter(function (item) {\n        if (_this.library.filter_domain !== null && _this.library.filter_domain !== '') {\n          return item.domains.includes(_this.library.filter_domain);\n        }\n\n        return true;\n      });\n      return list;\n    }\n  },\n  methods: {\n    refreshLibrary: function refreshLibrary() {\n      var _this = this;\n\n      this.library.loading = false;\n      this.library.data = null;\n      this.library.count = null;\n      this.library.show = null; // Cancel previous API request if still running\n\n      if (this.api_library_cancel_token !== null) {\n        this.api_library_cancel_token();\n      }\n\n      if (this.theme !== null && (this.level === 'regional' || this.level === 'national' && this.site !== null || this.level === 'concessions' && this.site !== null || this.level === 'protected_areas' && this.site !== null)) {\n        this.library.loading = true;\n        window.axios({\n          method: 'post',\n          url: window.Laravel.baseUrl + 'api/analysis/library',\n          data: {\n            _token: _this.csrf,\n            level: _this.level,\n            site: _this.site || null,\n            domain: _this.theme || null\n          },\n          cancelToken: new window.axios.CancelToken(function executor(c) {\n            _this.api_library_cancel_token = c;\n          })\n        }).then(function (response) {\n          console.log('Request to library API executed');\n\n          if (!_.isEmpty(response.data)) {\n            _this.library.data = typeof response.data === \"string\" ? JSON.parse(response.data) : response.data;\n            _this.library.count = _this.library.data.length;\n          } else {\n            _this.library.count = 0;\n          }\n        })[\"catch\"](function (error) {\n          if (window.axios.isCancel(error)) {\n            console.log('Request to library API canceled. No more necessary');\n          } else {\n            console.log(error);\n          }\n        })[\"finally\"](function () {\n          _this.library.loading = false;\n          _this.api_library_cancel_token = null;\n        });\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/mixins/library.mixin.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/mixins/map.mixin.js":
/*!****************************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/mixins/map.mixin.js ***!
  \****************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      map: null,\n      extents: null,\n      map_loading: false,\n      zoomBBoxPadding: 75,\n      // in pixels\n      // layer selector\n      show_layer_selector: true,\n      close_layer_selector_onclick: true,\n      layers_selected: 0\n    };\n  },\n  methods: {\n    setLoading: function setLoading() {\n      var _this = this;\n\n      this.map.on('dataloading', function () {\n        _this.map_loading = true;\n      });\n      this.map.on('data', function () {\n        if (_this.map.areTilesLoaded()) {\n          _this.map_loading = false;\n        }\n      });\n      this.map.on('error', function () {\n        _this.map_loading = false;\n      });\n    },\n    // ###############################################\n    // ############  Manage map & layers  ############\n    // ###############################################\n    initMap: function initMap() {\n      var _this = this; // Initialize map\n\n\n      this.map = new window.mapboxgl.Map({\n        container: 'platform_map',\n        style: 'mapbox://styles/mapbox/streets-v11',\n        bounds: this.__getBounds(this.extents['comifac']),\n        minZoom: 3,\n        maxZoom: 12\n      }); // Add navigation control\n\n      this.map.addControl(new window.mapboxgl.NavigationControl({\n        showCompass: false\n      }), 'top-right'); // Add events\n\n      this.map.on('click', function (e) {\n        if (_this.close_layer_selector_onclick) {\n          _this.show_layer_selector = false;\n        }\n      }); // Set loading spinner events\n\n      this.setLoading();\n      this.map.on('load', function () {\n        // Add default sources\n        _this.map.addSource('countries', window.WebMapping.Mapbox.mapbox_vector_source('countries'));\n\n        _this.map.addSource('protected_areas', window.WebMapping.Mapbox.mapbox_vector_source('protected_areas')); // Add countries borders and mask outer regions\n\n\n        _this.addLayer('comifac_mask', 'overlays');\n\n        _this.addLayer('comifac_eez', 'overlays');\n\n        _this.addLayer('countries', 'overlays');\n      });\n    },\n    layerIsOnMap: function layerIsOnMap(layer_id) {\n      if (this.map !== null) {\n        return typeof this.map.getLayer(layer_id) !== 'undefined';\n      }\n\n      return false;\n    },\n    addLayer: function addLayer(layer_id, group_key) {\n      if (!this.layerIsOnMap(layer_id)) {\n        this.map.addLayer(this.layers[group_key][layer_id]);\n        window.vueBus.$emit('toggle_layer', layer_id, true);\n        this.refreshInteractiveLayers(); // must be called after adding main layer\n\n        this.sortLayers();\n      }\n    },\n    removeLayer: function removeLayer(layer_id, group_key) {\n      if (this.layerIsOnMap(layer_id)) {\n        this.map.removeLayer(layer_id);\n        window.vueBus.$emit('toggle_layer', layer_id, false);\n        this.refreshInteractiveLayers(); // must be called before removing source\n\n        if (layer_id !== 'countries' && layer_id !== 'protected_areas') {\n          this.map.removeSource(layer_id);\n        }\n\n        this.sortLayers();\n      }\n    },\n    toggleLayer: function toggleLayer(layer_id, group_key) {\n      if (this.layerIsOnMap(layer_id)) {\n        this.layers_selected -= 1;\n        this.removeLayer(layer_id, group_key);\n      } else {\n        this.layers_selected += 1;\n        this.addLayer(layer_id, group_key);\n      }\n    },\n    sortLayers: function sortLayers() {\n      // Move countries borders\n      if (this.layerIsOnMap('countries')) {\n        this.map.moveLayer('countries');\n      }\n\n      if (this.layerIsOnMap('comifac_eez')) {\n        this.map.moveLayer('comifac_eez');\n      } // Move all layers defined in this.layers\n\n\n      for (var group_key in this.layers) {\n        if (this.layers.hasOwnProperty(group_key)) {\n          for (var layer_id in this.layers[group_key]) {\n            if (this.layers[group_key].hasOwnProperty(layer_id)) {\n              if (this.layerIsOnMap(layer_id)) {\n                this.map.moveLayer(layer_id);\n              }\n\n              if (this.layerIsOnMap(this.__grayedLayerId(layer_id))) {\n                this.map.moveLayer(this.__grayedLayerId(layer_id));\n              }\n\n              if (this.layerIsOnMap(this.__maskedLayerId(layer_id))) {\n                this.map.moveLayer(this.__maskedLayerId(layer_id));\n              }\n            }\n          }\n        }\n      } // Move countries mask\n\n\n      if (this.layerIsOnMap('countries_mask')) {\n        this.map.moveLayer('countries_mask');\n      }\n    },\n    __getBounds: function __getBounds(extent) {\n      return new window.mapboxgl.LngLatBounds(new window.mapboxgl.LngLat(extent['minx'], extent['miny']), new window.mapboxgl.LngLat(extent['maxx'], extent['maxy']));\n    },\n\n    /**\n     * Pan e zoom accoridng to level/site selection\n     */\n    zoomToBBox: function zoomToBBox(bbox) {\n      this.map.fitBounds(this.__getBounds(bbox), {\n        padding: this.zoomBBoxPadding\n      });\n    },\n    zoomToFeature: function zoomToFeature(feature) {\n      var bbox = window.Turf.bbox({\n        type: 'FeatureCollection',\n        features: [feature]\n      });\n      this.map.fitBounds(bbox, {\n        padding: this.zoomBBoxPadding\n      });\n    },\n    // #######################################################\n    // ######  Manage dynamic layers' interactivity  #########\n    // #######################################################\n    refreshInteractiveLayers: function refreshInteractiveLayers() {}\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/mixins/map.mixin.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/mixins/projects.mixin.js":
/*!*********************************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/mixins/projects.mixin.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  data: function data() {\n    return {\n      api_projects_cancel_token: null,\n      projects: {\n        data: null,\n        count: null,\n        show: false,\n        loading: false,\n        show_filters: false,\n        filter_domain: null,\n        filter_status: null\n      }\n    };\n  },\n  computed: {\n    filtered_projects: function filtered_projects() {\n      var _this = this;\n\n      var list = this.projects.data; // sort\n\n      list = _.orderBy(list, 'Acronym', 'asc'); // filter\n\n      list = list.filter(function (item) {\n        if (_this.projects.filter_domain !== null && _this.projects.filter_domain !== '') {\n          return item.domains.includes(_this.projects.filter_domain);\n        }\n\n        if (_this.projects.filter_status !== null && _this.projects.filter_status !== '') {\n          return item.status.includes(_this.projects.filter_status);\n        }\n\n        return true;\n      });\n      return list;\n    }\n  },\n  methods: {\n    refreshProjects: function refreshProjects() {\n      var _this = this;\n\n      this.projects.loading = null;\n      this.projects.data = null;\n      this.projects.count = null;\n      this.projects.show = null; // Cancel previous API request if still running\n\n      if (this.api_projects_cancel_token !== null) {\n        this.api_projects_cancel_token();\n      }\n\n      if (this.theme !== null && (this.level === 'regional' || this.level === 'national' && this.site !== null || this.level === 'concessions' && this.site !== null || this.level === 'protected_areas' && this.site !== null)) {\n        this.projects.loading = true;\n        window.axios({\n          method: 'post',\n          url: window.Laravel.baseUrl + 'api/analysis/projects',\n          data: {\n            _token: _this.csrf,\n            level: _this.level,\n            site: _this.site || null,\n            domain: _this.theme || null\n          },\n          cancelToken: new window.axios.CancelToken(function executor(c) {\n            _this.api_projects_cancel_token = c;\n          })\n        }).then(function (response) {\n          console.log('Request to projects API executed');\n\n          if (!_.isEmpty(response.data)) {\n            _this.projects.data = typeof response.data === \"string\" ? JSON.parse(response.data) : response.data;\n            _this.projects.count = _this.projects.data.length;\n          } else {\n            _this.projects.count = 0;\n          }\n        })[\"catch\"](function (error) {\n          if (window.axios.isCancel(error)) {\n            console.log('Request to projects API canceled. No more necessary');\n          } else {\n            console.log(error);\n          }\n        })[\"finally\"](function () {\n          _this.projects.loading = false;\n          _this.api_projects_cancel_token = null;\n        });\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/mixins/projects.mixin.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/mixins/utils/choropleth.mixin.js":
/*!*****************************************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/mixins/utils/choropleth.mixin.js ***!
  \*****************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    opacity: {\n      type: Number,\n      \"default\": 0.6\n    }\n  },\n  methods: {\n    __normalize: function __normalize(numbers, max) {\n      max = max || Math.max.apply(Math, _toConsumableArray(numbers));\n\n      if (!isNaN(max) && max > 0) {\n        var ratio = max / 100;\n        numbers = numbers.map(function (v) {\n          return Math.round(v / ratio);\n        });\n      }\n\n      return numbers;\n    },\n    __classify: function __classify(numbers) {\n      var num_steps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n\n      var classify = function classify(num_steps) {\n        return function (number) {\n          if (number === null) {\n            return null;\n          }\n\n          var class_index = 0;\n          var i = 0;\n\n          while (i < 100) {\n            if (number > i && number <= i + 100 / num_steps) {\n              return class_index;\n            }\n\n            i = i + 100 / num_steps;\n            class_index++;\n          }\n\n          return 0;\n        };\n      };\n\n      return numbers.map(classify(num_steps));\n    },\n    choropleth: function choropleth(data, palette) {\n      var keys = [],\n          values = [];\n      Object.entries(data).forEach(function (item) {\n        keys.push(item[0]);\n        values.push(item[1]);\n      });\n      values = this.__normalize(values);\n      values = this.__classify(values, palette.length);\n      data = _.zipObject(keys, values);\n      return data;\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzX2ltZXQvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L21peGlucy91dGlscy9jaG9yb3BsZXRoLm1peGluLmpzPzVkNDUiXSwibmFtZXMiOlsicHJvcHMiLCJvcGFjaXR5IiwidHlwZSIsIk51bWJlciIsIm1ldGhvZHMiLCJfX25vcm1hbGl6ZSIsIm51bWJlcnMiLCJtYXgiLCJNYXRoIiwiaXNOYU4iLCJyYXRpbyIsIm1hcCIsInYiLCJyb3VuZCIsIl9fY2xhc3NpZnkiLCJudW1fc3RlcHMiLCJjbGFzc2lmeSIsIm51bWJlciIsImNsYXNzX2luZGV4IiwiaSIsImNob3JvcGxldGgiLCJkYXRhIiwicGFsZXR0ZSIsImtleXMiLCJ2YWx1ZXMiLCJPYmplY3QiLCJlbnRyaWVzIiwiZm9yRWFjaCIsIml0ZW0iLCJwdXNoIiwibGVuZ3RoIiwiXyIsInppcE9iamVjdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFlO0FBRVhBLE9BQUssRUFBQztBQUNGQyxXQUFPLEVBQUU7QUFDTEMsVUFBSSxFQUFFQyxNQUREO0FBRUwsaUJBQVM7QUFGSjtBQURQLEdBRks7QUFTWEMsU0FBTyxFQUFFO0FBRUxDLGVBRkssdUJBRU9DLE9BRlAsRUFFZ0JDLEdBRmhCLEVBRW9CO0FBQ3JCQSxTQUFHLEdBQUdBLEdBQUcsSUFBSUMsSUFBSSxDQUFDRCxHQUFMLE9BQUFDLElBQUkscUJBQVFGLE9BQVIsRUFBakI7O0FBQ0EsVUFBRyxDQUFDRyxLQUFLLENBQUNGLEdBQUQsQ0FBTixJQUFlQSxHQUFHLEdBQUMsQ0FBdEIsRUFBd0I7QUFDcEIsWUFBSUcsS0FBSyxHQUFHSCxHQUFHLEdBQUcsR0FBbEI7QUFDQUQsZUFBTyxHQUFHQSxPQUFPLENBQUNLLEdBQVIsQ0FBWSxVQUFBQyxDQUFDO0FBQUEsaUJBQUlKLElBQUksQ0FBQ0ssS0FBTCxDQUFXRCxDQUFDLEdBQUdGLEtBQWYsQ0FBSjtBQUFBLFNBQWIsQ0FBVjtBQUNIOztBQUNELGFBQU9KLE9BQVA7QUFDSCxLQVRJO0FBV0xRLGNBWEssc0JBV01SLE9BWE4sRUFXMkI7QUFBQSxVQUFaUyxTQUFZLHVFQUFGLENBQUU7O0FBQzVCLFVBQUlDLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVNELFNBQVQsRUFBbUI7QUFDOUIsZUFBTyxVQUFTRSxNQUFULEVBQWlCO0FBQ3BCLGNBQUlBLE1BQU0sS0FBSyxJQUFmLEVBQXFCO0FBQ2pCLG1CQUFPLElBQVA7QUFDSDs7QUFDRCxjQUFJQyxXQUFXLEdBQUcsQ0FBbEI7QUFDQSxjQUFJQyxDQUFDLEdBQUcsQ0FBUjs7QUFDQSxpQkFBT0EsQ0FBQyxHQUFHLEdBQVgsRUFBZ0I7QUFDWixnQkFBSUYsTUFBTSxHQUFHRSxDQUFULElBQWNGLE1BQU0sSUFBSUUsQ0FBQyxHQUFHLE1BQU1KLFNBQXRDLEVBQWlEO0FBQzdDLHFCQUFPRyxXQUFQO0FBQ0g7O0FBQ0RDLGFBQUMsR0FBR0EsQ0FBQyxHQUFHLE1BQU1KLFNBQWQ7QUFDQUcsdUJBQVc7QUFDZDs7QUFDRCxpQkFBTyxDQUFQO0FBQ0gsU0FkRDtBQWVILE9BaEJEOztBQWlCQSxhQUFPWixPQUFPLENBQUNLLEdBQVIsQ0FBWUssUUFBUSxDQUFDRCxTQUFELENBQXBCLENBQVA7QUFDSCxLQTlCSTtBQWlDTEssY0FqQ0ssc0JBaUNNQyxJQWpDTixFQWlDWUMsT0FqQ1osRUFpQ29CO0FBQ3JCLFVBQUlDLElBQUksR0FBRyxFQUFYO0FBQUEsVUFDSUMsTUFBTSxHQUFHLEVBRGI7QUFFQUMsWUFBTSxDQUFDQyxPQUFQLENBQWVMLElBQWYsRUFBcUJNLE9BQXJCLENBQTZCLFVBQVNDLElBQVQsRUFBYztBQUN2Q0wsWUFBSSxDQUFDTSxJQUFMLENBQVVELElBQUksQ0FBQyxDQUFELENBQWQ7QUFDQUosY0FBTSxDQUFDSyxJQUFQLENBQVlELElBQUksQ0FBQyxDQUFELENBQWhCO0FBQ0gsT0FIRDtBQUlBSixZQUFNLEdBQUcsS0FBS25CLFdBQUwsQ0FBaUJtQixNQUFqQixDQUFUO0FBQ0FBLFlBQU0sR0FBRyxLQUFLVixVQUFMLENBQWdCVSxNQUFoQixFQUF3QkYsT0FBTyxDQUFDUSxNQUFoQyxDQUFUO0FBQ0FULFVBQUksR0FBR1UsQ0FBQyxDQUFDQyxTQUFGLENBQVlULElBQVosRUFBa0JDLE1BQWxCLENBQVA7QUFDQSxhQUFPSCxJQUFQO0FBQ0g7QUE1Q0k7QUFURSxDQUFmIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2Fzc2V0c19pbWV0L2Fzc2V0cy9qcy9tYXBwaW5nX21hcGJveC9taXhpbnMvdXRpbHMvY2hvcm9wbGV0aC5taXhpbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IHtcblxuICAgIHByb3BzOntcbiAgICAgICAgb3BhY2l0eToge1xuICAgICAgICAgICAgdHlwZTogTnVtYmVyLFxuICAgICAgICAgICAgZGVmYXVsdDogMC42XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIF9fbm9ybWFsaXplKG51bWJlcnMsIG1heCl7XG4gICAgICAgICAgICBtYXggPSBtYXggfHwgTWF0aC5tYXgoLi4ubnVtYmVycylcbiAgICAgICAgICAgIGlmKCFpc05hTihtYXgpICYmIG1heD4wKXtcbiAgICAgICAgICAgICAgICBsZXQgcmF0aW8gPSBtYXggLyAxMDA7XG4gICAgICAgICAgICAgICAgbnVtYmVycyA9IG51bWJlcnMubWFwKHYgPT4gTWF0aC5yb3VuZCh2IC8gcmF0aW8pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudW1iZXJzO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9fY2xhc3NpZnkobnVtYmVycywgbnVtX3N0ZXBzPTQpe1xuICAgICAgICAgICAgbGV0IGNsYXNzaWZ5ID0gZnVuY3Rpb24obnVtX3N0ZXBzKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxldCBjbGFzc19pbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgPCAxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudW1iZXIgPiBpICYmIG51bWJlciA8PSBpICsgMTAwIC8gbnVtX3N0ZXBzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzX2luZGV4O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkgKyAxMDAgLyBudW1fc3RlcHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19pbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcnMubWFwKGNsYXNzaWZ5KG51bV9zdGVwcykpO1xuICAgICAgICB9LFxuXG5cbiAgICAgICAgY2hvcm9wbGV0aChkYXRhLCBwYWxldHRlKXtcbiAgICAgICAgICAgIGxldCBrZXlzID0gW10sXG4gICAgICAgICAgICAgICAgdmFsdWVzID0gW107XG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhkYXRhKS5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pe1xuICAgICAgICAgICAgICAgIGtleXMucHVzaChpdGVtWzBdKTtcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChpdGVtWzFdKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFsdWVzID0gdGhpcy5fX25vcm1hbGl6ZSh2YWx1ZXMpO1xuICAgICAgICAgICAgdmFsdWVzID0gdGhpcy5fX2NsYXNzaWZ5KHZhbHVlcywgcGFsZXR0ZS5sZW5ndGgpO1xuICAgICAgICAgICAgZGF0YSA9IF8uemlwT2JqZWN0KGtleXMsIHZhbHVlcyk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfVxuXG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/mixins/utils/choropleth.mixin.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/mixins/utils/utils.mixin.js":
/*!************************************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/mixins/utils/utils.mixin.js ***!
  \************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    red_yellow_green: {\n      type: Array,\n      \"default\": function _default() {\n        return ['#ce2e29', // $darkRed\n        '#f9c74f', '#007233' // $darkGreen\n        ];\n      }\n    },\n    rainbow_10: {\n      type: Array,\n      \"default\": function _default() {\n        return ['#404887', '#3374ff', '#43aa8b', '#90be6d', '#f9c74f', '#f3722c', '#f94144', '#d35e9d', '#ad7af6', '#e7c1cb', '#c9bcb5', '#5f6269'];\n      }\n    }\n  },\n  methods: {\n    /**\n     * Generate a gradient color palette (using https://github.com/Siddharth11/gradstop)\n     *\n     * @param num_colors\n     * @param colors\n     */\n    generateGradientPalette: function generateGradientPalette(num_colors, colors) {\n      colors = colors || this.red_yellow_green;\n      return gradstop({\n        stops: num_colors,\n        inputFormat: 'hex',\n        colorArray: colors\n      });\n    },\n\n    /**\n     * Return a palette from the given array of colors\n     *\n     * @param num_colors\n     * @param colors\n     * @returns {T[]}\n     */\n    generateColorPalette: function generateColorPalette(num_colors, colors) {\n      colors = colors || this.rainbow_10;\n      return colors.slice(0, num_colors);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzX2ltZXQvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L21peGlucy91dGlscy91dGlscy5taXhpbi5qcz84MjdkIl0sIm5hbWVzIjpbInByb3BzIiwicmVkX3llbGxvd19ncmVlbiIsInR5cGUiLCJBcnJheSIsInJhaW5ib3dfMTAiLCJtZXRob2RzIiwiZ2VuZXJhdGVHcmFkaWVudFBhbGV0dGUiLCJudW1fY29sb3JzIiwiY29sb3JzIiwiZ3JhZHN0b3AiLCJzdG9wcyIsImlucHV0Rm9ybWF0IiwiY29sb3JBcnJheSIsImdlbmVyYXRlQ29sb3JQYWxldHRlIiwic2xpY2UiXSwibWFwcGluZ3MiOiJBQUFBO0FBQWU7QUFFWEEsT0FBSyxFQUFDO0FBQ0ZDLG9CQUFnQixFQUFFO0FBQ2RDLFVBQUksRUFBRUMsS0FEUTtBQUVkLGlCQUFTO0FBQUEsZUFBTSxDQUNYLFNBRFcsRUFDQztBQUNaLGlCQUZXLEVBR1gsU0FIVyxDQUdDO0FBSEQsU0FBTjtBQUFBO0FBRkssS0FEaEI7QUFTRkMsY0FBVSxFQUFDO0FBQ1BGLFVBQUksRUFBRUMsS0FEQztBQUVQLGlCQUFTO0FBQUEsZUFBTSxDQUNYLFNBRFcsRUFFWCxTQUZXLEVBR1gsU0FIVyxFQUlYLFNBSlcsRUFLWCxTQUxXLEVBTVgsU0FOVyxFQU9YLFNBUFcsRUFRWCxTQVJXLEVBU1gsU0FUVyxFQVVYLFNBVlcsRUFXWCxTQVhXLEVBWVgsU0FaVyxDQUFOO0FBQUE7QUFGRjtBQVRULEdBRks7QUE4QlhFLFNBQU8sRUFBRTtBQUVMO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNRQywyQkFSSyxtQ0FRbUJDLFVBUm5CLEVBUStCQyxNQVIvQixFQVF1QztBQUN4Q0EsWUFBTSxHQUFHQSxNQUFNLElBQUksS0FBS1AsZ0JBQXhCO0FBQ0EsYUFBT1EsUUFBUSxDQUFDO0FBQ1pDLGFBQUssRUFBRUgsVUFESztBQUVaSSxtQkFBVyxFQUFFLEtBRkQ7QUFHWkMsa0JBQVUsRUFBRUo7QUFIQSxPQUFELENBQWY7QUFLSCxLQWZJOztBQWlCTDtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNRSyx3QkF4QkssZ0NBd0JnQk4sVUF4QmhCLEVBd0I0QkMsTUF4QjVCLEVBd0JvQztBQUNyQ0EsWUFBTSxHQUFHQSxNQUFNLElBQUksS0FBS0osVUFBeEI7QUFDQSxhQUFPSSxNQUFNLENBQUNNLEtBQVAsQ0FBYSxDQUFiLEVBQWdCUCxVQUFoQixDQUFQO0FBQ0g7QUEzQkk7QUE5QkUsQ0FBZiIsImZpbGUiOiIuL3Jlc291cmNlcy9hc3NldHNfaW1ldC9hc3NldHMvanMvbWFwcGluZ19tYXBib3gvbWl4aW5zL3V0aWxzL3V0aWxzLm1peGluLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQge1xuXG4gICAgcHJvcHM6e1xuICAgICAgICByZWRfeWVsbG93X2dyZWVuOiB7XG4gICAgICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICgpID0+IFtcbiAgICAgICAgICAgICAgICAnI2NlMmUyOScsICAvLyAkZGFya1JlZFxuICAgICAgICAgICAgICAgICcjZjljNzRmJyxcbiAgICAgICAgICAgICAgICAnIzAwNzIzMycgICAvLyAkZGFya0dyZWVuXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHJhaW5ib3dfMTA6e1xuICAgICAgICAgICAgdHlwZTogQXJyYXksXG4gICAgICAgICAgICBkZWZhdWx0OiAoKSA9PiBbXG4gICAgICAgICAgICAgICAgJyM0MDQ4ODcnLFxuICAgICAgICAgICAgICAgICcjMzM3NGZmJyxcbiAgICAgICAgICAgICAgICAnIzQzYWE4YicsXG4gICAgICAgICAgICAgICAgJyM5MGJlNmQnLFxuICAgICAgICAgICAgICAgICcjZjljNzRmJyxcbiAgICAgICAgICAgICAgICAnI2YzNzIyYycsXG4gICAgICAgICAgICAgICAgJyNmOTQxNDQnLFxuICAgICAgICAgICAgICAgICcjZDM1ZTlkJyxcbiAgICAgICAgICAgICAgICAnI2FkN2FmNicsXG4gICAgICAgICAgICAgICAgJyNlN2MxY2InLFxuICAgICAgICAgICAgICAgICcjYzliY2I1JyxcbiAgICAgICAgICAgICAgICAnIzVmNjI2OScsXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZW5lcmF0ZSBhIGdyYWRpZW50IGNvbG9yIHBhbGV0dGUgKHVzaW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9TaWRkaGFydGgxMS9ncmFkc3RvcClcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG51bV9jb2xvcnNcbiAgICAgICAgICogQHBhcmFtIGNvbG9yc1xuICAgICAgICAgKi9cbiAgICAgICAgZ2VuZXJhdGVHcmFkaWVudFBhbGV0dGUobnVtX2NvbG9ycywgY29sb3JzKSB7XG4gICAgICAgICAgICBjb2xvcnMgPSBjb2xvcnMgfHwgdGhpcy5yZWRfeWVsbG93X2dyZWVuO1xuICAgICAgICAgICAgcmV0dXJuIGdyYWRzdG9wKHtcbiAgICAgICAgICAgICAgICBzdG9wczogbnVtX2NvbG9ycyxcbiAgICAgICAgICAgICAgICBpbnB1dEZvcm1hdDogJ2hleCcsXG4gICAgICAgICAgICAgICAgY29sb3JBcnJheTogY29sb3JzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJuIGEgcGFsZXR0ZSBmcm9tIHRoZSBnaXZlbiBhcnJheSBvZiBjb2xvcnNcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIG51bV9jb2xvcnNcbiAgICAgICAgICogQHBhcmFtIGNvbG9yc1xuICAgICAgICAgKiBAcmV0dXJucyB7VFtdfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2VuZXJhdGVDb2xvclBhbGV0dGUobnVtX2NvbG9ycywgY29sb3JzKSB7XG4gICAgICAgICAgICBjb2xvcnMgPSBjb2xvcnMgfHwgdGhpcy5yYWluYm93XzEwO1xuICAgICAgICAgICAgcmV0dXJuIGNvbG9ycy5zbGljZSgwLCBudW1fY29sb3JzKTtcbiAgICAgICAgfVxuXG5cbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/mixins/utils/utils.mixin.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/platform.js":
/*!********************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/platform.js ***!
  \********************************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _mixins_map_mixin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mixins/map.mixin */ \"./resources/assets_imet/assets/js/mapping_mapbox/mixins/map.mixin.js\");\n/* harmony import */ var _mixins_library_mixin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mixins/library.mixin */ \"./resources/assets_imet/assets/js/mapping_mapbox/mixins/library.mixin.js\");\n/* harmony import */ var _mixins_projects_mixin__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./mixins/projects.mixin */ \"./resources/assets_imet/assets/js/mapping_mapbox/mixins/projects.mixin.js\");\n/* harmony import */ var _mixins_api_mixin__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./mixins/api.mixin */ \"./resources/assets_imet/assets/js/mapping_mapbox/mixins/api.mixin.js\");\n/* harmony import */ var _mixins_utils_utils_mixin__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mixins/utils/utils.mixin */ \"./resources/assets_imet/assets/js/mapping_mapbox/mixins/utils/utils.mixin.js\");\n/* harmony import */ var _mixins_utils_choropleth_mixin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mixins/utils/choropleth.mixin */ \"./resources/assets_imet/assets/js/mapping_mapbox/mixins/utils/choropleth.mixin.js\");\n/* harmony import */ var _mixins_layers_interactivity_mixin__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mixins/layers/interactivity.mixin */ \"./resources/assets_imet/assets/js/mapping_mapbox/mixins/layers/interactivity.mixin.js\");\n/* harmony import */ var _mixins_layers_data_driven_mixin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./mixins/layers/data_driven.mixin */ \"./resources/assets_imet/assets/js/mapping_mapbox/mixins/layers/data_driven.mixin.js\");\n\n\n\n\n\n\n\n\nwindow.WebMapping.Mapbox.Platform = Vue.extend({\n  mixins: [_mixins_map_mixin__WEBPACK_IMPORTED_MODULE_0__[\"default\"], _mixins_library_mixin__WEBPACK_IMPORTED_MODULE_1__[\"default\"], _mixins_projects_mixin__WEBPACK_IMPORTED_MODULE_2__[\"default\"], _mixins_api_mixin__WEBPACK_IMPORTED_MODULE_3__[\"default\"], _mixins_utils_utils_mixin__WEBPACK_IMPORTED_MODULE_4__[\"default\"], _mixins_layers_interactivity_mixin__WEBPACK_IMPORTED_MODULE_6__[\"default\"], _mixins_layers_data_driven_mixin__WEBPACK_IMPORTED_MODULE_7__[\"default\"], _mixins_utils_choropleth_mixin__WEBPACK_IMPORTED_MODULE_5__[\"default\"]],\n  created: function created() {\n    this.theme = this.theme === '' ? null : this.theme;\n    this.level = this.level === '' ? null : this.level;\n    this.site = this.site === '' ? null : this.site;\n  },\n  data: function data() {\n    return {\n      Locale: window.Locale,\n      csrf: window.Laravel.csrfToken,\n      zoomBBoxPadding: 75,\n      // in pixels\n      layers: {\n        backgrounds: {\n          comifac: window.WebMapping.Mapbox.Layers.comifac,\n          spotvgt: window.WebMapping.Mapbox.Layers.spotvgt,\n          modis: window.WebMapping.Mapbox.Layers.modis,\n          srtm: window.WebMapping.Mapbox.Layers.srtm,\n          glc2000: window.WebMapping.Mapbox.Layers.glc2000,\n          congo_basin_vegetation_map: window.WebMapping.Mapbox.Layers.congo_basin_vegetation_map,\n          total_carbon: window.WebMapping.Mapbox.Layers.total_carbon\n        },\n        dopa_resources: {\n          land_cover: window.WebMapping.Mapbox.Layers.land_cover,\n          land_cover_change: window.WebMapping.Mapbox.Layers.land_cover_change,\n          land_fragmentation: window.WebMapping.Mapbox.Layers.land_fragmentation,\n          land_degradation: window.WebMapping.Mapbox.Layers.land_degradation,\n          soil_organic_carbon: window.WebMapping.Mapbox.Layers.soil_organic_carbon,\n          above_ground_carbon: window.WebMapping.Mapbox.Layers.above_ground_carbon\n        },\n        external_resources: {\n          tree_cover: window.WebMapping.Mapbox.Layers.tree_cover,\n          intact_forest: window.WebMapping.Mapbox.Layers.intact_forest\n        },\n        overlays: {\n          comifac_mask: window.WebMapping.Mapbox.Layers.comifac_mask,\n          comifac_eez: window.WebMapping.Mapbox.Layers.comifac_eez,\n          countries: window.WebMapping.Mapbox.Layers.countries,\n          landscapes: window.WebMapping.Mapbox.Layers.landscapes,\n          klc: window.WebMapping.Mapbox.Layers.klc,\n          concessions: window.WebMapping.Mapbox.Layers.concessions,\n          protected_areas: window.WebMapping.Mapbox.Layers.protected_areas\n        }\n      },\n      // UI selections\n      selected_card: false,\n      selected_card_button: null\n    };\n  },\n  watch: {\n    theme: function theme() {\n      this.reset();\n      this.level = null;\n      this.site = null;\n      this.refresh();\n    },\n    level: function level() {\n      this.site = null;\n      this.reset();\n      this.refresh();\n\n      if (this.level === 'regional') {\n        this.getAPI();\n      }\n\n      if (this.level === 'concessions' || this.level === 'protected_areas') {\n        this.addLayer(this.level, 'overlays');\n      }\n    },\n    site: function site(value) {\n      this.reset();\n      this.refresh();\n\n      if (this.level === 'national' || this.site !== null) {\n        this.getAPI(this.site);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.initMap();\n    this.refreshLibrary();\n    this.refreshProjects();\n    this.map_loading = false;\n    this.api_loading = false;\n  },\n  methods: {\n    reset: function reset() {\n      // console.log('level changed |', 'theme: '+this.theme, ', level: '+this.level, ', site: '+this.site);\n      this.show_layer_selector = false;\n      this.removeLayerPopup();\n      this.selected_card = null;\n      this.selected_card_button = null;\n    },\n    refresh: function refresh() {\n      if (this.level === 'regional') {\n        this.zoomToBBox(this.extents['comifac']);\n      } else if (this.level === 'national' && this.site !== null) {\n        this.zoomToBBox(this.extents[this.level][this.site]);\n      }\n\n      this.refreshInteractiveLayers();\n      this.refreshLibrary();\n      this.refreshProjects();\n    },\n    // #######################################################\n    // ######  Manage dynamic layers' interactivity  #########\n    // #######################################################\n    refreshInteractiveLayers: function refreshInteractiveLayers() {\n      // countries\n      this.showPopup('countries');\n      this.mouseOver('countries');\n      this.hoverOnRelatedLayer('countries', 'comifac_eez', 'iso3', 'ISO_Ter1');\n      this.setMask('countries', this.level === 'national' && this.site !== null, 'iso3', this.site); // eez\n\n      this.mouseOver('comifac_eez');\n      this.hoverOnRelatedLayer('comifac_eez', 'countries', 'ISO_Ter1', 'iso3');\n      this.setMask('comifac_eez', this.level === 'national' && this.site !== null, 'ISO_Ter1', this.site); // landscapes\n\n      this.showPopup('landscapes');\n      this.mouseOver('landscapes'); // klc\n\n      this.showPopup('klc');\n      this.mouseOver('klc'); // protected_areas\n\n      this.showPopup('protected_areas');\n      this.mouseOver('protected_areas');\n      this.setHighlight('protected_areas', this.level === 'national' && this.site !== null, 'country', this.site); // concessions\n\n      this.showPopup('concessions');\n      this.mouseOver('concessions');\n      this.setHighlight('concessions', this.level === 'national' && this.site !== null, 'country', this.site);\n    },\n    // ##############################################\n    // ###############  Manage cards  ###############\n    // ##############################################\n    toggleLayersSelector: function toggleLayersSelector() {\n      this.show_layer_selector = !this.show_layer_selector;\n\n      if (this.show_layer_selector) {\n        this.library.show = false;\n        this.projects.show = false;\n      }\n    },\n    toggleLibrary: function toggleLibrary() {\n      this.library.show = !this.library.show;\n\n      if (this.library.show) {\n        this.show_layer_selector = false;\n        this.projects.show = false;\n      }\n    },\n    toggleProjects: function toggleProjects() {\n      this.projects.show = !this.projects.show;\n\n      if (this.projects.show) {\n        this.show_layer_selector = false;\n        this.library.show = false;\n      }\n    },\n    showCardButton: function showCardButton(button) {\n      this.library.show = false;\n      this.projects.show = false;\n\n      if (this.selected_card_button !== null) {\n        $('.collapse').collapse('hide'); // necessary 'cause there's a conflict between bootstrap4 and VueJS in accordion body\n      }\n\n      if (this.selected_card_button !== button) {\n        this.selected_card_button = button;\n      } else {\n        this.selected_card_button = null;\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/platform.js\n");

/***/ }),

/***/ "./resources/assets_imet/assets/js/mapping_mapbox/utils.js":
/*!*****************************************************************!*\
  !*** ./resources/assets_imet/assets/js/mapping_mapbox/utils.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nmodule.exports = {\n  tileSize: 1024,\n  internalTileSize: 1024,\n  mapbox_vector_layer: function mapbox_vector_layer(layer_id) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'fill';\n    var paint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var source_id = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    return {\n      'id': layer_id,\n      'type': type,\n      'source': source_id || module.exports.mapbox_vector_source(layer_id),\n      'source-layer': source_id || layer_id,\n      'paint': paint,\n      label: label\n    };\n  },\n  mapbox_vector_source: function mapbox_vector_source(layer_id) {\n    return {\n      'type': 'vector',\n      'tiles': [window.Laravel.baseUrl + window.urls.ofac_tiles + layer_id + '/{z}/{x}/{y}.pbf']\n    };\n  },\n  mapbox_wms_source: function mapbox_wms_source(wms_url, layer, tile_size) {\n    wms_url = wms_url.replace(/\\??$/, '?');\n    tile_size = tile_size || module.exports.tileSize;\n    var options = wms_url + 'service=WMS' + '&version=1.1.1' + '&request=GetMap' + '&format=image/png' + '&transparent=true' + '&styles=' + '&layers=' + layer + '&width=' + tile_size + '&height=' + tile_size + '&bbox={bbox-epsg-3857}' + '&srs=EPSG:3857';\n    return {\n      'type': 'raster',\n      'tiles': [options],\n      'tileSize': tile_size\n    };\n  },\n\n  /**\n   * Get MapServer/MapProxy wms layer\n   * @param layer_id\n   * @param label\n   * @param cache [boolean] (true if should pass by MapProxy)\n   * @param custom_attributes\n   * @returns {*}\n   */\n  wms: function wms(layer_id) {\n    var label = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var cache = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var custom_attributes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var url = cache === true ? window.urls.ofac_mapproxy : window.urls.ofac_mapserver;\n    url = url.replace(/\\??$/, '?');\n    var options = {\n      'id': layer_id,\n      'type': 'raster',\n      'source': module.exports.mapbox_wms_source(url, layer_id, module.exports.internalTileSize),\n      label: label\n    };\n\n    if (!_.isEmpty(custom_attributes)) {\n      for (var _i = 0, _Object$entries = Object.entries(custom_attributes); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        options[key] = value;\n      }\n    }\n\n    return options;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvYXNzZXRzX2ltZXQvYXNzZXRzL2pzL21hcHBpbmdfbWFwYm94L3V0aWxzLmpzPzExYzIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInRpbGVTaXplIiwiaW50ZXJuYWxUaWxlU2l6ZSIsIm1hcGJveF92ZWN0b3JfbGF5ZXIiLCJsYXllcl9pZCIsImxhYmVsIiwidHlwZSIsInBhaW50Iiwic291cmNlX2lkIiwibWFwYm94X3ZlY3Rvcl9zb3VyY2UiLCJ3aW5kb3ciLCJMYXJhdmVsIiwiYmFzZVVybCIsInVybHMiLCJvZmFjX3RpbGVzIiwibWFwYm94X3dtc19zb3VyY2UiLCJ3bXNfdXJsIiwibGF5ZXIiLCJ0aWxlX3NpemUiLCJyZXBsYWNlIiwib3B0aW9ucyIsIndtcyIsImNhY2hlIiwiY3VzdG9tX2F0dHJpYnV0ZXMiLCJ1cmwiLCJvZmFjX21hcHByb3h5Iiwib2ZhY19tYXBzZXJ2ZXIiLCJfIiwiaXNFbXB0eSIsIk9iamVjdCIsImVudHJpZXMiLCJrZXkiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtBQUViQyxVQUFRLEVBQUUsSUFGRztBQUdiQyxrQkFBZ0IsRUFBRSxJQUhMO0FBS2JDLHFCQUFtQixFQUFFLDZCQUFTQyxRQUFULEVBQThFO0FBQUEsUUFBM0RDLEtBQTJELHVFQUFuRCxJQUFtRDtBQUFBLFFBQTdDQyxJQUE2Qyx1RUFBdEMsTUFBc0M7QUFBQSxRQUE5QkMsS0FBOEIsdUVBQXRCLEVBQXNCO0FBQUEsUUFBbEJDLFNBQWtCLHVFQUFOLElBQU07QUFDL0YsV0FBTztBQUNILFlBQU1KLFFBREg7QUFFSCxjQUFRRSxJQUZMO0FBR0gsZ0JBQVVFLFNBQVMsSUFBSVQsTUFBTSxDQUFDQyxPQUFQLENBQWVTLG9CQUFmLENBQW9DTCxRQUFwQyxDQUhwQjtBQUlILHNCQUFnQkksU0FBUyxJQUFJSixRQUoxQjtBQUtILGVBQVNHLEtBTE47QUFNSEYsV0FBSyxFQUFFQTtBQU5KLEtBQVA7QUFRSCxHQWRZO0FBZ0JiSSxzQkFBb0IsRUFBRSw4QkFBU0wsUUFBVCxFQUFrQjtBQUNwQyxXQUFPO0FBQ0gsY0FBUSxRQURMO0FBRUgsZUFBUyxDQUNMTSxNQUFNLENBQUNDLE9BQVAsQ0FBZUMsT0FBZixHQUF5QkYsTUFBTSxDQUFDRyxJQUFQLENBQVlDLFVBQXJDLEdBQWtEVixRQUFsRCxHQUE2RCxrQkFEeEQ7QUFGTixLQUFQO0FBTUgsR0F2Qlk7QUF5QmJXLG1CQUFpQixFQUFFLDJCQUFTQyxPQUFULEVBQWtCQyxLQUFsQixFQUF5QkMsU0FBekIsRUFBbUM7QUFFbERGLFdBQU8sR0FBT0EsT0FBTyxDQUFDRyxPQUFSLENBQWdCLE1BQWhCLEVBQXdCLEdBQXhCLENBQWQ7QUFDQUQsYUFBUyxHQUFLQSxTQUFTLElBQUluQixNQUFNLENBQUNDLE9BQVAsQ0FBZUMsUUFBMUM7QUFFQSxRQUFJbUIsT0FBTyxHQUFHSixPQUFPLEdBQ2pCLGFBRFUsR0FFVixnQkFGVSxHQUdWLGlCQUhVLEdBSVYsbUJBSlUsR0FLVixtQkFMVSxHQU1WLFVBTlUsR0FPVixVQVBVLEdBT0dDLEtBUEgsR0FRVixTQVJVLEdBUUVDLFNBUkYsR0FTVixVQVRVLEdBU0dBLFNBVEgsR0FVVix3QkFWVSxHQVdWLGdCQVhKO0FBWUEsV0FBTztBQUNILGNBQVEsUUFETDtBQUVILGVBQVMsQ0FBQ0UsT0FBRCxDQUZOO0FBR0gsa0JBQVlGO0FBSFQsS0FBUDtBQUtILEdBL0NZOztBQWlEYjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0lHLEtBQUcsRUFBRSxhQUFTakIsUUFBVCxFQUFzRTtBQUFBLFFBQW5EQyxLQUFtRCx1RUFBM0MsSUFBMkM7QUFBQSxRQUFyQ2lCLEtBQXFDLHVFQUE3QixJQUE2QjtBQUFBLFFBQXZCQyxpQkFBdUIsdUVBQUgsRUFBRztBQUN2RSxRQUFJQyxHQUFHLEdBQUdGLEtBQUssS0FBRyxJQUFSLEdBQ0paLE1BQU0sQ0FBQ0csSUFBUCxDQUFZWSxhQURSLEdBRUpmLE1BQU0sQ0FBQ0csSUFBUCxDQUFZYSxjQUZsQjtBQUlBRixPQUFHLEdBQUdBLEdBQUcsQ0FBQ0wsT0FBSixDQUFZLE1BQVosRUFBb0IsR0FBcEIsQ0FBTjtBQUVBLFFBQUlDLE9BQU8sR0FBRztBQUNWLFlBQU1oQixRQURJO0FBRVYsY0FBUSxRQUZFO0FBR1YsZ0JBQVVMLE1BQU0sQ0FBQ0MsT0FBUCxDQUFlZSxpQkFBZixDQUFpQ1MsR0FBakMsRUFBc0NwQixRQUF0QyxFQUFnREwsTUFBTSxDQUFDQyxPQUFQLENBQWVFLGdCQUEvRCxDQUhBO0FBSVZHLFdBQUssRUFBRUE7QUFKRyxLQUFkOztBQU1BLFFBQUcsQ0FBQ3NCLENBQUMsQ0FBQ0MsT0FBRixDQUFVTCxpQkFBVixDQUFKLEVBQWlDO0FBQzdCLHlDQUF5Qk0sTUFBTSxDQUFDQyxPQUFQLENBQWVQLGlCQUFmLENBQXpCLHFDQUE0RDtBQUFBO0FBQUEsWUFBbERRLEdBQWtEO0FBQUEsWUFBN0NDLEtBQTZDOztBQUN4RFosZUFBTyxDQUFDVyxHQUFELENBQVAsR0FBZUMsS0FBZjtBQUNIO0FBQ0o7O0FBQ0QsV0FBT1osT0FBUDtBQUNIO0FBNUVZLENBQWpCIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2Fzc2V0c19pbWV0L2Fzc2V0cy9qcy9tYXBwaW5nX21hcGJveC91dGlscy5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuXG4gICAgdGlsZVNpemU6IDEwMjQsXG4gICAgaW50ZXJuYWxUaWxlU2l6ZTogMTAyNCxcblxuICAgIG1hcGJveF92ZWN0b3JfbGF5ZXI6IGZ1bmN0aW9uKGxheWVyX2lkLCBsYWJlbCA9IG51bGwsIHR5cGUgPSAnZmlsbCcsIHBhaW50ID0ge30sIHNvdXJjZV9pZCA9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdpZCc6IGxheWVyX2lkLFxuICAgICAgICAgICAgJ3R5cGUnOiB0eXBlLFxuICAgICAgICAgICAgJ3NvdXJjZSc6IHNvdXJjZV9pZCB8fCBtb2R1bGUuZXhwb3J0cy5tYXBib3hfdmVjdG9yX3NvdXJjZShsYXllcl9pZCksXG4gICAgICAgICAgICAnc291cmNlLWxheWVyJzogc291cmNlX2lkIHx8IGxheWVyX2lkLFxuICAgICAgICAgICAgJ3BhaW50JzogcGFpbnQsXG4gICAgICAgICAgICBsYWJlbDogbGFiZWxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBtYXBib3hfdmVjdG9yX3NvdXJjZTogZnVuY3Rpb24obGF5ZXJfaWQpe1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3R5cGUnOiAndmVjdG9yJyxcbiAgICAgICAgICAgICd0aWxlcyc6IFtcbiAgICAgICAgICAgICAgICB3aW5kb3cuTGFyYXZlbC5iYXNlVXJsICsgd2luZG93LnVybHMub2ZhY190aWxlcyArIGxheWVyX2lkICsgJy97en0ve3h9L3t5fS5wYmYnXG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgbWFwYm94X3dtc19zb3VyY2U6IGZ1bmN0aW9uKHdtc191cmwsIGxheWVyLCB0aWxlX3NpemUpe1xuXG4gICAgICAgIHdtc191cmwgICAgID0gd21zX3VybC5yZXBsYWNlKC9cXD8/JC8sICc/Jyk7XG4gICAgICAgIHRpbGVfc2l6ZSAgID0gdGlsZV9zaXplIHx8IG1vZHVsZS5leHBvcnRzLnRpbGVTaXplO1xuXG4gICAgICAgIGxldCBvcHRpb25zID0gd21zX3VybCArXG4gICAgICAgICAgICAnc2VydmljZT1XTVMnICtcbiAgICAgICAgICAgICcmdmVyc2lvbj0xLjEuMScgK1xuICAgICAgICAgICAgJyZyZXF1ZXN0PUdldE1hcCcgK1xuICAgICAgICAgICAgJyZmb3JtYXQ9aW1hZ2UvcG5nJyArXG4gICAgICAgICAgICAnJnRyYW5zcGFyZW50PXRydWUnICtcbiAgICAgICAgICAgICcmc3R5bGVzPScgK1xuICAgICAgICAgICAgJyZsYXllcnM9JyArIGxheWVyICtcbiAgICAgICAgICAgICcmd2lkdGg9JyArIHRpbGVfc2l6ZSArXG4gICAgICAgICAgICAnJmhlaWdodD0nICsgdGlsZV9zaXplICtcbiAgICAgICAgICAgICcmYmJveD17YmJveC1lcHNnLTM4NTd9JyArXG4gICAgICAgICAgICAnJnNycz1FUFNHOjM4NTcnO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgJ3R5cGUnOiAncmFzdGVyJyxcbiAgICAgICAgICAgICd0aWxlcyc6IFtvcHRpb25zXSxcbiAgICAgICAgICAgICd0aWxlU2l6ZSc6IHRpbGVfc2l6ZVxuICAgICAgICB9O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBHZXQgTWFwU2VydmVyL01hcFByb3h5IHdtcyBsYXllclxuICAgICAqIEBwYXJhbSBsYXllcl9pZFxuICAgICAqIEBwYXJhbSBsYWJlbFxuICAgICAqIEBwYXJhbSBjYWNoZSBbYm9vbGVhbl0gKHRydWUgaWYgc2hvdWxkIHBhc3MgYnkgTWFwUHJveHkpXG4gICAgICogQHBhcmFtIGN1c3RvbV9hdHRyaWJ1dGVzXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgd21zOiBmdW5jdGlvbihsYXllcl9pZCwgbGFiZWwgPSBudWxsLCBjYWNoZSA9IHRydWUsIGN1c3RvbV9hdHRyaWJ1dGVzID0ge30pe1xuICAgICAgICBsZXQgdXJsID0gY2FjaGU9PT10cnVlXG4gICAgICAgICAgICA/IHdpbmRvdy51cmxzLm9mYWNfbWFwcHJveHlcbiAgICAgICAgICAgIDogd2luZG93LnVybHMub2ZhY19tYXBzZXJ2ZXI7XG5cbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoL1xcPz8kLywgJz8nKTtcblxuICAgICAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICdpZCc6IGxheWVyX2lkLFxuICAgICAgICAgICAgJ3R5cGUnOiAncmFzdGVyJyxcbiAgICAgICAgICAgICdzb3VyY2UnOiBtb2R1bGUuZXhwb3J0cy5tYXBib3hfd21zX3NvdXJjZSh1cmwsIGxheWVyX2lkLCBtb2R1bGUuZXhwb3J0cy5pbnRlcm5hbFRpbGVTaXplKSxcbiAgICAgICAgICAgIGxhYmVsOiBsYWJlbFxuICAgICAgICB9O1xuICAgICAgICBpZighXy5pc0VtcHR5KGN1c3RvbV9hdHRyaWJ1dGVzKSl7XG4gICAgICAgICAgICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY3VzdG9tX2F0dHJpYnV0ZXMpKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uc1trZXldID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfSxcblxufTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./resources/assets_imet/assets/js/mapping_mapbox/utils.js\n");

/***/ }),

/***/ 2:
/*!**********************************************************!*\
  !*** multi ./resources/assets_imet/assets/js/mapping.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! /Users/panospolitopoulos/projects/web/imet/resources/assets_imet/assets/js/mapping.js */"./resources/assets_imet/assets/js/mapping.js");


/***/ })

/******/ });